{
  "transpiled": true,
  "noir_version": "1.0.0-beta.2+3278f71a05090dbd",
  "name": "Token",
  "functions": [
    {
      "name": "transfer_in_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 17
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "15238796416211288225": {
            "error_kind": "string",
            "string": "Balance too low"
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2429784973622283587": {
            "error_kind": "string",
            "string": "Can only emit a note log for an existing note."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6869395374906889440": {
            "error_kind": "string",
            "string": "Mismatch note header contract address."
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "get_notes_internal",
        "get_collapse_hints",
        "decompose_hint",
        "get_public_keys_and_partial_address",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "public_get_symbol",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15009911310769716579": {
            "error_kind": "string",
            "string": "Function public_get_symbol can only be called statically"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "compressed_string::field_compressed_string::FieldCompressedString"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgACBAEnAAABBIBFJgAABAMmAgEEACYCAgQAHxgAAgABgEQkAAAARSQAAABGLQQAAYBEJwIAAgSARCYCAwQBOg0AAgADJSQAAACbHgIAAQAeAgACADI4AAEAAgADJgIBAQEjAgADAAAAbyQAAADEHgIAAQkmAgIAAQo4AQIDIwIAAwAAAIskAAAA1iYCAQAGLgwAAQACLAwCASUnAIAEBHgADQAAAIAEgAMjAIADAAAAwykBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEF0E3qz6yL/WM7AQECJS0AGMoYyg==",
      "debug_symbols": "7VXBbsIwDP2XnHuIY8dJ+JVpQgUCqlS1qJRJE+LflyAaSheBxmCnXaq4es57eU7sg1j5xX4zr5p1uxOzt4Oo22XZV20TosOxEIuuqutqMx//FjJ+jD7hd9uyieGuL7tezIBZFcI3q7g0KuywrmovZhyW38FS6gEslU5gUJxBE5E5o4k0J7TTGbDFtLVFBWPweyGsfIJ2m8BB/B9qf4bvBMl3vuc7aE5oBnNbu0M3gB0hTbQ7fKp2kNfaI4N9NUNw7OUUAL+mYCeHG8dO4Z2qybSzk1ZPqgbw0xPHJAWPJD3ChPRIksslkUmukVF822LUNDAgj6toch6DsqnZ4QitZO7RGbR4RhuSdLt8BlIvMuq6YWR0gES8XD7mabWJ/p3JOHMM0UfZVeWi9ufhuN43y9Gs7D+3fjI2t1279Kt95+MAvcxOiPNHuQLp9LxCgLpAEzgCzxc=",
      "brillig_names": [
        "public_get_symbol"
      ]
    },
    {
      "name": "prepare_private_balance_increase",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "random",
        "decompose_hint",
        "field_less_than",
        "lte_hint",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "_finalize_transfer_to_private_unsafe",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "error_types": {
          "10536464181608181124": {
            "error_kind": "string",
            "string": "transfer not prepared"
          },
          "11859452850824495745": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ],
            "length": 60
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17028138060491915576": {
            "error_kind": "string",
            "string": "Function _finalize_transfer_to_private_unsafe can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          }
        },
        "parameters": [
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          },
          {
            "name": "hiding_point_slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_finalize_transfer_to_private_unsafe"
      ]
    },
    {
      "name": "get_admin",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "10055739771636044368": {
            "error_kind": "string",
            "string": "Function get_admin can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgACBAEnAAABBIBFJgAABAMmAgEEACYCAgQAHxgAAgABgEQkAAAARSQAAABGLQQAAYBEJwIAAgSARCYCAwQBOg0AAgADJSQAAACSHgIAAQAeAgACADI4AAEAAgADJgIBAQEjAgADAAAAbyQAAAC7HgIAAQkmAgIAAQo4AQIDIwIAAwAAAIskAAAAzS4MAAIAASUnAIAEBHgADQAAAIAEgAMjAIADAAAAuikBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEFi40qC3IiUlA7AQECJS0AGMoYyg==",
      "debug_symbols": "vVTbioMwEP2XPPuQyeTaX1lKsW1aBFHxsrBI/32TovGyUlnX7otk5Myck5nJacnVnpv7KclueUUOHy1J80tcJ3nmovYRkXOZpGlyP41/E+o/SjzxVRFnPqzquKzJAaRkEbHZ1R8VcxVuSWrJQbrjTzClogdTJgIYmFxAc85Vh+ZcyIA2YgGsMZTWyGAMPkZE0x206wB24v9R+x595xD6Ltf6DkIGtAT1WrtB04MNRz7TbnBX7UCn2j2DfjeD69jbKQD+TCEN7TdOGoYrU6OhsqFazKYG8Nsb+yQGW5K2MCHfkmSWkgSEXRegzMoUXZEwRTnsOqilZ6RQY4dWnPLXA1EQ3EWxqQUs6aCIwzrJib0cHy76jMskPqe2M/Vbk11GHl9/FXZm90WZX+y1Ka03/sHzwfsmUxGy51q4wBGjcByO5xs=",
      "brillig_names": [
        "get_admin"
      ]
    },
    {
      "name": "compute_note_hash_and_optionally_a_nullifier",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5972837590977953198": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 36
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          }
        },
        "parameters": [
          {
            "name": "contract_address",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "storage_slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "note_type_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "compute_nullifier",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          },
          {
            "name": "packed_note_content",
            "type": {
              "kind": "array",
              "length": 3,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 4,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "public"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "compute_note_hash_and_optionally_a_nullifier"
      ]
    },
    {
      "name": "set_admin",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "12850931128589648885": {
            "error_kind": "string",
            "string": "caller is not admin"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [
          {
            "name": "new_admin",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "JgACBAEnAAABBIBFJgAABAMmAgIEASYCAwQAHxgAAwACgEQtCIBEAAEkAAAARSQAAABGJwIAAQSARSYCAgQAOg0AAQACJSQAAACYHgIAAgAeAgADADI4AAIAAwAEJgICAQEjAgAEAAAAbyQAAADBJgICAAEuDAACAAMeAgAEAQo4AwQFIwIABQAAAJEkAAAA0y8MAAEAAiUnAIAEBHgADQAAAIAEgAMjAIADAAAAwCkBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEFsletxjiYg/U7AQECJS0AGMoYyg==",
      "debug_symbols": "5VXbisIwEP2XPPchc8kk8VeWZalapVBaqXVhEf99U7Gp1WJAdF/2pXTKmcyZM6eZo1oXy8P2q6w3zV4tPo6qalZ5VzZ1iI6nTC3bsqrK7df1Z6X7hzVn/H6X13247/K2UwsQwUwV9bp/tRhO2JRVoRYSXu/BWpsBrNFEMKDMoJnZXtDMRiLamxmwo3i0I4Rr8GemnH4BdxfBgfwfcn+F7gxRd0npDkYiWsA+5u7JD2DPxDfcPb2UO+gp976Ce3eFoNjbSwDMlWCw0UTgTaIEkI8lZBwE2LkZW3J0QVvW/HjGFqL1LU79OcdDE429itxYIpD7P70izvaKenADI/jHvbJgBAv61E1iMd4kzt7RsSnpESdO7pMIn0hi/UySmVfL6yGJdEKtwDYOhNinnOFIhmE74xLOkGg6K16nnAE8rgtwNBnFKUTfeVvmy6q47N3NoV5dreHuZ1fcbORd26yK9aEt+t08rmXolUaXEZ1/rhCQzciHGqHOLw==",
      "brillig_names": [
        "set_admin"
      ]
    },
    {
      "name": "balance_of_private",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          }
        },
        "parameters": [
          {
            "name": "owner",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "lo",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "hi",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "std::uint128::U128"
          },
          "visibility": "public"
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "balance_of_private"
      ]
    },
    {
      "name": "balance_of_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6067862452620309358": {
            "error_kind": "string",
            "string": "Function balance_of_public can only be called statically"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          }
        },
        "parameters": [
          {
            "name": "owner",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "lo",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "hi",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "std::uint128::U128"
          },
          "visibility": "public"
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "balance_of_public"
      ]
    },
    {
      "name": "transfer",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11170287298796244984": {
            "error_kind": "string",
            "string": "Something has gone wrong"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 17
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "15238796416211288225": {
            "error_kind": "string",
            "string": "Balance too low"
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2429784973622283587": {
            "error_kind": "string",
            "string": "Can only emit a note log for an existing note."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6869395374906889440": {
            "error_kind": "string",
            "string": "Mismatch note header contract address."
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "7b3druy6bib6Lvt6XZjij6R+lUajkU7nNAIESSNJH+Cgsd/9eM4xyq65rCrN0pIp2WQugjHXtuqjPkk0SdOf/+/f/uc//Y//87/++z//6//zb//xt//yX//v3/7l3/7xH/7zn//tX9d//d+/Af78b//xv//hX3/88z/+8x/+/T//9l9AJPzxt3/61//5488Y/v7H3/6ff/6Xf/rbf5H1z8PFIUj8vjiElLeLYcmlqzOl76txCVC5GgRz2iwh2K8PCYvX8355jNvVuCylq1HwcTXB8svV/+2PvwE5Ny+5YefmJTcyOTeEvHNDucJNgCAPW4D4L3ITnZuX3KS/zA0t+XExQUjbxZl+AuSTAcLylwEAF3pcjPi0ukFKVy8QHwuw/p3x2aDS1kk5b3snH+2Hi9sfSvZnig+TsiBU7F/i7jmXBLF2+b6lAXbzQVLpat5Oy7LziFD65UTb0UrrBCoHEbdfprAfrCLnIcLGYUR8fzHEfX1i5srFy/bLKy/p+eIfi4O+OPMuDvnizLs47Isz7+KI+uJA2q4OT0FXeXECbxFLkKVy9+ZtcZh2CiP/nGi0MtHUe6JIlahyvWaPKuXZnsI8MSyPeWJ8iugjFgNWoe2nlycO6WfMHbKdueJiaK5gaK7B0FzR0FzJ0FzZ0FzF0FyjobkaipvQUNxEhuImMhQ3kaG4iQzFTUSG5moobiJDcRMZipvIUNxEhuImNhQ3saG4iQ3FTWwobmIyNFdDcRMbipvYUNzEhuImNhQ3iaG4SQzFTXKruCnE7afxqU/2x1yPV3OMj55dTiFUrs78aL7JcW83gfyzO0FuFZENY5GcxQ4s3iqKHMbireLTYSzeKvIdxuKtYuphLN4qWh/FYrxVHjCMxVtlGMNY9NylB4ueu/RgkZzFDix67tKDRc9derDouUsPFj136cGi5y4dWEyeu/Rg0XOXHix67tKDRc9derBIzmIHFj136cGi5y49WPTcpQeLnrv0YNFzlw4sZs9derDouUsPFj136cGi5y49WCRnsQOLnrv0YNFzlx4seu7ymyymXaWV8y80FijhuIkHcsID6Z7qDCDdMyN90mHxTGoE6555jWDdM7URrHtmN4J1ctYHsO6Z4wjWPdMcwbpnpiNY99R0BOuemw5gHTw3HcG656YjWPfcdATrnpuOYJ2c9QGse246gnXPTUew7rnpCNY9Nx3BuuemA1gPnpuOYN1z0xGse246gnXPTUewTs76ANY9Nx3BuuemI1j33HQE656bjmDdc9MBrN/rK9KXYd1z0xGse246gnXPTUewTs76ANY9Nx3BuuemI1j33HQE656bjmDdc9MBrJPnpiNY99x0BOuem45g3XPTEayTsz6Adc9NR7DuuekI1j03HcG656YjWPfcdADr7LnpCNY9Nx3BuuemI1j33HQE6+SsD2Ddc9MRrHtuOoJ1z01HsO656QjWPTcdwLp4bjqCdc9NR7DuuekI1j03HcE6OesDWPfcdATrnpuOYN1z0xGse246gnXPTQewHj03HcG656YjWPfcdATrnpuOYJ2c9QGse246gnXPTUew7rnpCNY9Nx3BuuemA1hPnpuOYN1z0xGse246gnXPTUewTs76ANY9Nx3BuuemI1j33HQE656bjmDdc9MBrGfPTUew7rnpCNY9Nx3BuuemZ7AuwI+rBeORdXLW+7Me1pz/YXagAuuem57BOiV4mM3LcmTdc9MRrHtuOoJ1z01HsO656Rmsy/KIHINA+jPrYfHcdATrnpuOYN1z0xGse246gnVy1k9gPeLGemQ4su656QjWPTcdwbrnpiNY99x0BOuemw5gHTw3HcG656YjWPfcdATrnpuOYJ2c9bNZT5WrozwujnHnY12snwvkaewpJZuUtwWS5XgsPI0dwbqnsSNY9zR2BOuexg5gPXgaO4J1T2NHsO5p7AjWPY09gXUkfrT/IkM8sk7O+gDWPTcdwbrnpiNY99z0jLvp+0bUEDw3HcG656YDWEfPTUew7rnpKVnS+5ZI9Nx0BOuem45gnZz1Aax7bjqCdc9Nz2C90sSBnpuOYN1z0xGse246gHXy3HQE656bjmDdc9MRrHtuOoJ1ctYHsO656QjWPTc9nfW/1OpOnsaeUrJ537BEnsaOYN3T2AGss6exI1j3NHYE657GjmDd09gRrJOzPoB1T2NPYB2XHL6vRkA+su5p7AjWPTcdwbrnpiNY99x0AOviuekI1j03HcG656ZnxOu8l+I51q4m2Pij8PTCU/xaIc9jzzgXlZfMhJz1Aax7HjuCdc9jR7DueewZd97KS2bieewI1j2PHcB69Dx2BOuex57BeuV1p+h57AjWPTcdwTo56wNY99x0BOuem57BeqVBO3puOoJ1z01HsO656QDWk+emI1j33HQE656bjmDdc9MRrJOzPoB1z01HsO656ems/6XXWJOnsaeUbN6/jJA8jR3BuqexA1jPnsaOYN3T2BGsexo7gnVPY09gvdYWn8lZH8C6p7EjWPc0dgTrnpuOYN1z0xGse26qzzounpuOYN1z0xGse256Rm7a7zVWXDyPnX2FyFdI/TVAXDznHcG657wjWPecdwTrnvOeced9/xrgGrA66/qsg+e8I1j3nHcE657znsH6+xfS1uqDsz6AdXLWB7DuuekI1j03HcG656ZnsP6+hR7Bc9MRrHtuOoD14LnpCNY9Nx3BuuemI1j33HQE6+SsD2Ddc9MRrHtuOoJ1z01PZ/2vvGiMwdPYU0o2b1+NwuBp7ADW0dPYEax7GjuCdU9jR7DuaewI1slZ139xAT2NHcG6p7EjWPc0dgTrnpuOYN1z0wGsk+emI1j33HQE656bjmDdc9MzctOOr7ES+QpNvkKe857huSqvAZLnvCNY95x3BOue845g3XPeM+68ldcA2XPeEax7zjuCdc95R7DuOe8ZrFdeSGNy1gew7rnpCNY9Nx3BuuemI1j33PQM1ist9Oy56QDWxXPTEax7bjqCdc9NR7DuuekI1slZH8C656YjWPfcdATrnpuOYN1z09NZ/0svGounsaeUbN6/GhU9jR3BuqexI1j3NHYE657GjmCdnPUBrHsaewLrtRcXoqexI1j3NHYE657GjmDdc9MBrCfPTUew7rnpCNY9Nx3BuuemI1gnZ33u11iT57Gzr5DnvGd4rsprgMlz3hGse847gnXPeQewnj3nPePOW3kNMHvOO4J1z3lHsO457wjWyVnXfyEtex47gnXPTUew7rnpCNY9Nx3BuuemZ7D+voWeFs9NR7DuuekI1j03HcG656YjWCdnfQDrnpuOYN1z0xGse246gnXPTUew7rnp6az/lReNV7Z8gdRfjSLwNHYE657GjmDd09gRrJOzPoB1T2NHsO5p7AmsV15cIPA0dgTrnsaOYN3T2AGsB89NR7DuuekI1j03HcG656YjWCdnfQDrnpuekZv2e42Vguexs6+Q57xneK73rwFS8Jx3BOue8w5gHT3nHcG657xn3HnfvwZI6DnvCNY95x3BOjnrA1j3nPcM1t+/kEboeewI1j03HcG656YjWPfcdADr5LnpGaxXWujJc9MRrHtuOoJ1z01HsE7O+gDWPTcdwbrnpiNY99x0BOuem45g3XPTAayz56ans/6XXjRmT2NPKdm8fzWKPY0dwbqnsSNYJ2d9AOuexo5g3dPYEax7GnsC67UXF9jT2BGsexo7gHXxNHYE656bjmDdc9MRrHtuOoJ1ctYHsO656QjWPTc9Izft+BqreB47+wp5znuG56q8Biie8w5gPXrOO4J1z3lHsO457xl33sprgNFz3hGsk7M+gHXPeUew7jnvGaxXXkiLnseOYN1z0xGse246gPXkuekI1j03PYP1Sgt98tx0BOuem45gnZz1Aax7bjqCdc9NR7DuuekI1j03HcG656YDWM+em45g3XPT01n/Sy8aZ09jTynZvH81KnsaO4J1ctYHsO5p7AjWPY0dwbqnsSNY9zT2BNZrLy5kT2P1WefF09gRrHsaO4J1z01HsO656QjWyVkfwLrnpiNY99x0BOuem56Rm/Z7jZUXz2NnXyHPec/wXO9fA2TwnHcE657zjmDdc94RrHvOe8ad9/1rgAzkrA9g3XPeEax7zjuCdc95z2D9/QtpDJ7HjmDdc9MBrAfPTUew7rnpCNY9Nz2D9fct9Bw8Nx3BOjnrA1j33HQE656bjmDdc9MRrHtuOoJ1z00HsI6em45g3XPTEax7bno663/lRWNGT2NPKdm8fTWKkZz1Aax7GjuCdU9jR7DuaewI1j2NHcG6p7EnsF57cYE8jR3BuqexI1j3NHYE656bjmCdnPUBrHtuOoJ1z01HsO656QjWPTc9Izft+BoreR47+Qqx57xneK7Ka4DsOe8I1j3nHcG657wjWCdnXf81QPacdwTrnvOOYN1z3hGse857BuuVF9LY89gBrIvnpiNY99x0BOuem45g3XPTM1ivtNALOesDWPfcdATrnpuOYN1z0xGse246gnXPTQewHj03HcG656YjWPfcdATrnpuezvpfetE4ki+Q/qtR0dPYEax7GjuCdU9jR7DuaewI1j2NHcB68jT2BNZrLy4kT2NHsO5p7AjWPY0dwTo56wNY99x0BOuem45g3XPTEax7bjqCdc9Nz8hNO77Gmj2PnX2FPOc9w3NVXgPMnvOOYN1z3hGsk7M+gHXPec+481ZeA8ye845g3XPeEax7zjuCdc95z2D9/QtpsngeO4J1z01HsO656QjWPTcdwTo56+ot9LJ4bjqCdc9NR7DuuekI1j03HcG656YDWAfPTUew7rnpCNY9Nx3BuuemI1gnZ33mF40FPI09pWTz9tUoAU9jR7DuaewI1j2NHcG6p7EDWA+exo5g3dPYE1ivvLggwdPYEax7GjuCdXLWB7DuuekI1j03HcG656YjWPfcdATrnpsOYB09Nz0jN+33GutKv6/Q5CvkOe8Znuv9a4CCnvOOYJ2c9QGse847gnXPec+4875/DVDQc94RrHvOO4J1z3kHsE6e857BeuWFNPI8dgTrnpuOYN1z0xGsk7M+gHXPTc9gvdJCT56bjmDdc9MRrHtuOoJ1z00HsM6em45g3XPTEax7bjqCdc9NR7BOzvoA1j03PZ31v/SiMXsae0rJ5v2rUexp7AjWPY0dwbqnsQNYF09jR7DuaewI1j2NPYH12osL4mnsCNbJWR/AuqexI1j33HQE656bjmDdc9MRrHtuOoD16LnpCNY9Nz0jN+34Gmv0PHb2FfKc9wzPVXkNMJKzPoB1z3lHsO457wjWPec9485beQ0wes47gnXPeQewnjznHcG657xnsF55IS15HjuCdc9NR7BOzvoA1j03HcG656ZnsF5poU+em45g3XPTEax7bjqA9ey56QjWPTcdwbrnpiNY99x0BOvkrA9g3XPTEax7bno663/pRePsaewpJZv3r0ZlT2NHsO5prD7rcfE0dgTrnsaOYN3T2BGsexp7AuuVFxfiQs76ANY9jR3BuqexI1j33HQE656bjmDdc9MBrIPnpiNY99x0BOuem56Rm/Z7jTWC57GzrxD5Cqm/BhjBc94RrHvOO4J1z3lHsO457xl33vevAUbwnHcA68Fz3hGse847gnXPec9g/f0LaTF4HjuCdXLWB7DuuekI1j03HcG656ZnsP6+hT4Gz01HsO656QDW0XPTEax7bjqCdc9NR7DuuekI1slZH8C656YjWPfcdATrnpuezvpfedE4oqexp5Rs3r8ahZ7GDmCdPI0dwbqnsSNY9zR2BOuexo5gnZx1/RcXyNPYEax7GjuCdU9jR7DuuekI1j03HcA6e246gnXPTUew7rnpCNY9Nz0jN+34GiuTr9DkK+Q57xmeq/IaIHvOO4J1z3lHsO457wjWPec9485beQ1QPOcdwbrnvCNY95x3BOue857BeuWFNCFnfQDrnpuOYN1z0xGse246gnXPTc9gvdJCL56bDmA9em46gnXPTUew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6w9XWCWvVVxhlbyucYFVSl4DmWKV8vK4eq1axcMqeY3gCqvk9YQrrJLXHq6wSuSrdIFV8trDFVbJaw9XWCWvPVxhlbz2cIVV8trDBVYpe+3hCqvktYcrrJLXHq6wSl57uMIqka/SBVbJaw9XWCWvPVxhlbz2cIVV8trDFVbJaw/zr1JYvPZwhVXy2sMVVslrD1dYJa89XGGVyFfpAqvktYcrrJLXHq6wSl57uMIqee1hjlXadDwk83GVvPZwgVUCrz1cYZW89qC/Sl/Mez1hFPNeIziH+fXOvDG/spyPzJMzP4h5z+VHMe/5+SjmPecexbzn0aOY99x4EPPB891RzHsOO4p5z2FHMe857CjmyZkfxLznsKOY9xx2FPOew45i3nPYUcx7DjuIefQcdhTznsOOYt5z2FHMew47inly5gcx7znsKOY9hx3FvOewo5j3HHYU857DDmKePIcdxbznsKOY9xx2FPOew45inpz5Qcx7DjuKec9hRzHvOewo5j2HHcW857CDmGfPYUcx7znsKOY9hx3FvOewo5gnZ34Q857DjmLec9hRzHsOO4p5z2FHMe857CDmxXPYUcx7DjuKec9hRzHvOewo5smZH8S857CjmPccdhTznsOOYt5z2FHMew47iPnoOewo5j2HHcW857CjmPccdhTz5MwPYt5z2FHMew47innPYUcx7znsKOY9hx3EfPIcdhTznsOOYt5z2FHMew47inly5gcx7znsKOY9hx3FvOewo5j3HHYU857DDmI+ew47innPYUcx7znsKOY9hx3FPDnzg5j3HHYU857DjmLec9hRzHsOO4p5z2HHMI+L57CjmPccdhTznsOOYt5z2FHMkzM/iHnPYUcx7znsKOY9hx3FvOewo5j3HHYQ8+A57CjmPYcdxbznsKOY9xx2FPPkzA9i3nPYUcx7DjuKec9hRzHvOewo5j2HHcR88Bx2FPOew45i3nPYUcx7DjuKeXLmBzHvOewo5j2HHcW857CjmPccdhTznsMOYh49hx3FvOewo5j3HHYU857DjmKenPlBzHsOO4p5z2FHMe857CjmPYcdxbznsIOYJ89hRzHvOewo5j2HHcW857CjmCdnfhDznsOOYt5z2FHMew47innPYUcx7znsIObZc9hRzHsOO4p5z2FHMe857CjmyZkfxLznsKOY9xx2FPOew57DPCTe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LW11sKWtDra01cGWtjrY0lYHW9rqYEtbHWxpq4MtbXWwpa0OtrTVwZa2OtjSVgdb2upgS1sdbGmrgy1tdbClrQ62tNXBlrY62NJWB1va6mBLWx1saauDLW11sKWtDra01cGWtjrY0lYHW9rqYEtbHWxpq4MtbXWwpa0OtrTVwZa2OtjSVgdb2upgS1sdbGmrgy1tdbClrQ62tNXBlrY62NJWB1va6mBLWx1saauDLW11sKWtDra01cGWtjrY0lYHW9rqYEtbHWxpq4MtbXWwpa0OtrTVwZa2OtjSVg+2tNWDLW31YEtbPdjSVg8L2Zquqagq2NJWD7a01YMtbfVgS1s92NJWD7a01YMtbfVgS1s92NJWD7a01YMtbfVgS1s92NJWD7a01YMtbfVgS1s92NJWD7a01YMtbfVgS1s92NJWD7a01YMtbfVgS1s92NJWD7a01YMtbfVgS1s92NJWD7a01YMtbfVgS1s92NJWD7a01YMtbfVgS1s92NJWD7a01YMtbfVgS1s92NJWD7a01YMtbfVgS1s92NJWD7a01YMtbfVgS1s92NJWD7a01YMtbfVgS1s92NJWD7a01YMtbfVgS1s92NJWD7a01YMtbfVgS1s93E9bnWibLh+ne7uo6v10bxdVvZ/u7aKqt9O9n7b6++neLqp6P93bRVXvp3u7qOr9dMnWdG8XVb2frq2o6n7a6u+nayuqup+2+tvp3k9b/f10bUVV99NWfz9dW1HV/bTV30/XVlR1P23199O1FVXdT1v9/XRtRVX301Z/P11bUdX9tNXfT9dWVHU/bfX307UVVd1PW/39dG1FVffTVn8/XVNRFd5PW/39dE1FVXg/bfX30zUVVeFCtqZrKqrC+2mrv5+uqagK76et/n66tqKq+2mrv5+urajqftrq76drK6q6n7b6++naiqrup63+frq2oqr7aau/n66tqOp+2urvp2srqrqftvr76dqKqu6nrf5+uraiqvtpq7+frq2o6n7a6u+nayuqup+2+vvp2oqq7qet/n66tqKq+2mrv5+urajqftrq76drK6q6n7b6++naiqrup63+frq2oqr7aau/n66tqOp+2urvp2srqrqftvr76dqKqu6nrf5+uraiqvtpq7+frq2o6n7a6u+nayuqup+2+vvp2oqq7qet/n66tqKq+2mrv5+urajqftrq76drK6q6n7b6++naiqrup63+frq2oipb2upoS1sdbWmroy1tdbSlrY62tNXRlrY62tJWR1va6mhLWx1taaujLW11tKWtjra01dGWtjra0lZHW9rqaEtbHW1pq6MtbXW0pa2OtrTV0Za2OtrSVkdb2upoS1sdbWmroy1tdbSlrY62tNXRlrY62tJWR1va6mhLW51saauTLW11sqWtTra01WkhW9M1FVWRLW11sqWtTra01cmWtjrZ0lYnW9rqZEtbnWxpq5MtbXWypa1OtrTVyZa2OtnSVidb2upkS1udbGmrky1tdbKlrU62tNXJlrY62dJWJ1va6mRLW51saauTLW11sqWtTra01cmWtjrZ0lYnW9rqZEtbnWxpq5MtbXWypa1OtrTVyZa2OtnSVidb2upkS1udbGmrky1tdbKlrU62tNXJlrY62dJWJ1va6mRLW51saauTLW11sqWtTra01cmWtjrZ0lYnW9rqZEtbnWxpq5MtbXWypa1OtrTVyZa2OtnSVidb2upkS1udbGmrky1tdbKlrU62tNXJlrY62dJWJ1va6mRLW51saauTLW11sqWtTra01cmWtjrZ0lYnW9rqZEtbnWxpq5MtbXWypa1OtrTVyZa2OtnSVidb2upkS1udbGmrky1tdbKlrU62tNXJlrY62dJWJ1va6mxLW51taauzLW11tqWtzgvZmq6pqIptaauzLW11tqWtzra01dmWtjrb0lZnW9rqbEtbnW1pq7MtbXW2pa3OtrTV2Za2OtvSVmdb2upsS1udbWmrsy1tdbalrc62tNXZlrY629JWZ1va6mxLW51taauzLW11tqWtzra01dmWtjrb0lZnW9rqbEtbnW1pq7MtbXW2pa3OtrTV2Za2OtvSVmdb2upsS1udbWmrsy1tdbalrc62tNXZlrY629JWZ1va6mxLW51taauzLW11tqWtzra01dmWtjrb0lZnW9rqbEtbnW1pq7MtbXW2pa3OtrTV2Za2OtvSVmdb2upsS1udbWmrsy1tdbalrc62tNXZlrY629JWZ1va6mxLW51taauzLW11tqWtzra01dmWtjrb0lZnW9rqbEtbnW1pq7MtbXW2pa3OtrTV2Za2OtvSVmdb2upsS1udbWmrsy1tdbalrc62tNXZlrY629JWF1va6mJLW11saauLLW11WcjWdE1FVWJLW11saauLLW11saWtLra01cWWtrrY0lYXW9rqYktbXWxpq4stbXWxpa0utrTVxZa2utjSVhdb2upiS1tdbGmriy1tdbGlrS62tNXFlra62NJWF1va6mJLW11saauLLW11saWtLra01cWWtrrY0lYXW9rqYktbXWxpq4stbXWxpa0utrTVxZa2utjSVhdb2upiS1tdbGmriy1tdbGlrS62tNXFlra62NJWF1va6mJLW11saauLLW11saWtLra01cWWtrrY0lYXW9rqYktbXWxpq4stbXWxpa0utrTVxZa2utjSVhdb2upiS1tdbGmriy1tdbGlrS62tNXFlra62NJWF1va6mJLW11saauLLW11saWtLra01cWWtrrY0lYXW9rqYktbXWxpq4stbXWxpa0utrTVxZa2utjSVhdb2upiS1tdbGmriy1tdbGlrS62tNXFlrZ6tKWtHm1pq0db2urRlrZ6XMjWdE1FVdGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa0ebWmrR1va6tGWtnq0pa2ebGmrJ1va6smWtnqypa2eFrI1XVNRVbKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saasnW9rqyZa2erKlrZ5saatnW9rq2Za2eralrZ5taavnhWxN11RUlW1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2db2urZlrZ6tqWtnm1pq2dT2uq4mNJWX6drKapap2spqlqnaymqWqdLtqZrKapap2spqlqnaymqWqdrKapap2srqjKlrb5O11ZUZUpbfZ2urajKlLb6Ol1bUZUpbfV1uraiKlPa6ut0bUVVprTV1+naiqpMaauv07UVVZnSVl+nayuqMqWtvk7XVlRlSlt9na6tqMqUtvo6XVtRlSlt9XW6tqIqU9rq63RtRVWmtNXX6dqKqkxpq6/TtRVVmdJWX6drK6oypa2+TtdWVGVKW32drq2oypS2+jpdW1GVKW31dbq2oipT2urrdG1FVaa01dfp2oqqTGmrr9O1FVWZ0lZfp2srqjKlrb5O11ZUZUpbfZ2urajKlLb6Ol1bUZUpbfV1uraiKlPa6ut0bUVVprTV1+naiqrK2uorsiwPjPWhKL2fcCB6sLP+mSvsLLtFAMsCT/OFb6NA3agVG3ejMP5iVGkRaInbIlCg94sQQsqPNQshh/R8+deUg70po70pk70p8/xTZtwcMDJXpiyJN4eaIhwcqhibbzQ232RsvtnWfNNibL4XiLU+m29eeAt4wyHgTRcItLrO9wJRVtf5krH53i6+qsz3dvFVZb63i68q871dfFWZ7+3iq/fzzbeLryrzNRZfZWPxVTYWX2Vj8VU2Fl9lY/FVNhZfZWPxVbYVX8FiK76CxVZ8BYut+AoWW/EVLGRsvrbiK1hsxVew2IqvYLEVX8FiLL4CY/EVGIuvwFh8BcbiKzAWX4Gx+AqMxVdgLL4CY/EVGIuvgrH4KhiLr4Kx+CoYi6+CsfgqGIuvgrH4KhiLr4Kx+CoYi6/QWHyFxuIrNBZfobH4Co3FV2gsvkJj8RUai6/QWHyFxuIrMhZfkbH4iozFV2QsviJj8RUZi6/IWHxFxuIrMhZfkbH4io3FV2wsvmJj8RUbi6/YWHzFxuIrNhZfsbH4io3FV2wsvhJj8ZUYi6/EWHwlxuIrMRZfibH4SozFV2IsvhJj8ZUYi6+isfjqClruXedrLL66gop71/mSsfkai6/up99ema+x+Op++u2V+RqLr+6n316Zr7H4yph+OxjTbwdj+u1gTL8djOm3gzH9djCm3w7G9NvBmH47GNNvB2P67WBMvx2M6beDMf12MKbfDsb028GYfjsY028PxvTbgzH99mBMvz0Y028PCxmbr634KhjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NuDMf32YEy/PRjTbw/G9NvRmH47GtNvR2P67WhMvx0XMjZfW/EVGtNvR2P67WhMvx2N6bejMf12NKbfjsb029GYfjsa029HY/rtaEy/HY3pt6Mx/XY0pt+OxvTb0Zh+OxrTb0dj+u1oTL8djem3ozH9djSm347G9NvRmH47GtNvR2P67WhMvx2N6bejMf12NKbfjsb029GYfjsa029HY/rtaEy/HY3pt6Mx/XY0pt+OxvTb0Zh+OxrTb0dj+u1oTL8djem3ozH9djSm347G9NvRmH47GtNvR2P67WhMvx2N6bejMf12NKbfjsb029GYfjsa029HY/rtaEy/HY3pt6Mx/XY0pt+OxvTb0Zh+OxrTb0dj+u1oTL8djem3ozH9djSm347G9NvRmH47GtNvR2P67WhMvx2N6bejMf12NKbfjsb029GYfjsa029HY/rtaEy/HY3pt6Mx/XY0pt+OxvTb0Zh+OxrTb0dj+u1oTL8djem3ozH9djSm307G9NvJmH47GdNvJ2P67bSQsfnaiq/ImH47GdNvJ2P67WRMv52M6beTMf12MqbfTsb028mYfjsZ028nY/rtZEy/nYzpt5Mx/XYypt9OxvTbyZh+OxnTbydj+u1kTL+djOm3kzH9djKm307G9NvJmH47GdNvJ2P67WRMv52M6beTMf12MqbfTsb028mYfjsZ028nY/rtZEy/nYzpt5Mx/XYypt9OxvTbyZh+OxnTbydj+u1kTL+djOm3kzH9djKm307G9NvJmH47GdNvJ2P67WRMv52M6beTMf12MqbfTsb028mYfjsZ028nY/rtZEy/nYzpt5Mx/XYypt9OxvTbyZh+OxnTbydj+u1kTL+djOm3kzH9djKm307G9NvJmH47GdNvJ2P67WRMv52M6beTMf12MqbfTsb028mYfjsZ028nY/rtZEy/nYzpt5Mx/XYypt9OxvTbyZh+OxnTbydj+u1kTL+djOm3kzH9djam387G9NvZmH47G9Nv54WMzddWfMXG9NvZmH47G9NvZ2P67WxMv52N6bezMf12Nqbfzsb029mYfjsb029nY/rtbEy/nY3pt7Mx/XY2pt/OxvTb2Zh+OxvTb2dj+u1sTL+djem3szH9djam387G9NvZmH47G9NvZ2P67WxMv52N6bezMf12Nqbfzsb029mYfjsb029nY/rtbEy/nY3pt7Mx/XY2pt/OxvTb+YV+u8gGITE8T+BrVGoalVtGvVDkro2CplGhaRQ2jaKmUdw0SppGNe0Nbtob3LQ3pGlvSNPekKa9IU17Q5r2hjTtDWnaG9K0N6Rpb0jT3ohNeyM27Y3YtDdi096ITXsjNu2N2LQ3YtPeiE17IzbtjdS0N1LT3khNeyM17Y3UtDdS095ITXsjNe2N1LQ3UtPeyE17Izftjdy0N3LT3shNeyM37Y3ctDdy097ITXsjt+wNWZamUdA0KjSNwqZR1DSKm0ZJ06jYNCo1jWraG9C0N6Bpb0DT3oCmvQFNewOa9gY07Q1o2hvQtDegaW+Epr0RmvZGaNoboWlvhKa9EZr2RmjaG6Fpb4SmvRGa9gY27Q1s2hvYtDewaW9g097Apr2BTXsDm/YGNu0NbNob1LQ3qGlvUNPeoKa9QU17g5r2BjXtjaa6qDTVRaWpLipNdVFpqotKU11Umuqi0lQXlaa6qDTVRaWpLipNdVFpqotKU11Umuqi0lQXlaa6qDTVRaWpLipNdVFpqotKU11Umuqi0lQXlaa6qDTVRaWpLipNdVFpqotKU11Umuqi0lQXlaa6qDTVRaWpLipNdVFpqotKU11Umuqi0lQXlaa6qDTVRaWpLipNdVFpqotKU11Umuqi0lQXlaa6qDTVRaWpLipNdVFpqovGprpobKqLxqa6aGyqi8amumhsqovGprpobKqLxqa6aGyqi8amumhsqovGprpobKqLxqa6aGyqi8amumhsqovGprpobKqLxqa6aGyqi8amumhsqovGprpobKqLxqa6aGyqi8amumhsqovGprpobKqLxqa6aGyqi8amumhsqovGprpobKqLxqa6aGyqi8amumhsqovGprpobKqLxqa6aGyqi8amumhsqovGprpobKqLxqa6aGyqi8amumhsqovGprpobKqLxqa6aGyqi8amumhsqovGprpobKqLxqa6aGyqi8amumhsqovGprpobKqLxqa6aGyqi8amumhsqovGprpobKqLxqa6aGyqi8amumhsqovGprpobKqLxqa6aGyqi8amumhsqovGprpobKqLxqa6aGyqi8amumhsqovGprpobKqLxqa6aGyqi8amumhsqovGprpobKqLxqa6aGyqi6amumhqqoumprpoaqqLpqa6aGqqi6amumhqqoumprpoaqqLpqa6aGqqi6amumhqqoumprpoaqqLpqa6aGqqi6amumhqqoumprpoaqqLpqa6aGqqi6amumhqqoumprpoaqqLpqa6aGqqi6amumhqqoumprpoaqqLpqa6aGqqi6amumhqqoumprpoaqqLpqa6aGqqi6amumhqqoumprpoaqqLpqa6aGqqi6amumhqqoumprpoaqqLpqa6aGqqi6amumhqqoumprpoaqqLpqa6aGqqi6amumhqqoumprpoaqqLpqa6aGqqi6amumhqqoumprpoaqqLpqa6aGqqi6amumhqqoumprpoaqqLpqa6aGqqi6amumhqqoumprpoaqqLpqa6aGqqi6amumhqqoumprpoaqqLpqa6aGqqi6amumhqqoumprpoaqqLpqa6aGqqi6amumhqqoumprpoaqqL5qa6aG6qi+amumhuqovmprpobqqL5qa6aG6qi+amumhuqovmprpobqqL5qa6aG6qi+amumhuqovmprpobqqL5qa6aG6qi+amumhuqovmprpobqqL5qa6aG6qi+amumhuqovmprpobqqL5qa6aG6qi+amumhuqovmprpobqqL5qa6aG6qi+amumhuqovmprpobqqL5qa6aG6qi+amumhuqovmprpobqqL5qa6aG6qi+amumhuqovmprpobqqL5qa6aG6qi+amumhuqovmprpobqqL5qa6aG6qi+amumhuqovmprpobqqL5qa6aG6qi+amumhuqovmprpobqqL5qa6aG6qi+amumhuqovmprpobqqL5qa6aG6qi+amumhuqovmprpobqqL5qa6aG6qi+amumhuqovmprpobqqL5qa6aG6qi+amumhuqovmprpobqqL5qa6aG6qi+amumhuqYvS0lIXXUdB06jQNAqbRlHTKG4aJU2jYtOo1DSqaW9A096Apr0BTXsDmvYGNO0NaNob0LQ3oGlvQNPegKa9EZr2RmjaG6Fpb4SmvRGa9kZo2huhaW+Epr0RmvZGaNob2LQ3sGlvYNPewKa9gU17A5v2BjbtDWzaG9i0N7Bpb1DT3qCmvUFNe4Oa9gY17Q1q2hvUtDeoaW9Q096gpr3BTXuDm/YGN+0Nbtob3LQ3uGlvcNPe4Ka9wU17g5v2hjTtDWnaG9K0N6Rpb0jT3pCmvSFNe0Oa9oY07Q1p2huxaW/Epr0Rm/ZGbNobsWlvxKa9EZv2RmzaG7Fpb8SmvZGa9kZq2hupaW+kpr2RmvZGatobqWlv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oyuaM5Zm0mN3ZdqKBVkK9/geTWp1ENAACRogqAFCGiCsAdLhfiLrA9Tvq2WtPhRAogZI0gDJCiA9WpzqIKABEjRAUAOENEBYA6THief0UFRdU1SpXF17lJfjdBal6SzKk1kEyzKdRTCdRWE6i3A6i2g6i3g6i2bz2bCc7LO/QJIGSFYAgUUDBDRAggYIaoCQBghrgIgGiMaJB40T36MFUTI92tTlWYhtA+nRVVgHAQ2QoAGCGiCkAcIaIKIBEjVAkgaIxonv0c4XGbZPa67V85pJac/10y/vyZdUNTltE1j/zL9c/TUBuPoEwtUngFefAF19Anz1CcjVJxCvPoF09Qnki0+Arn4npqvfienqd2K6+p24R1vzuwl8gbAGiGiARA2QpAGSFUB6tDVH2V5dj0I1XYCIabsa01P69ahI92iC7m1SmM8knM8kms8kns8kmc+kOJ9JaT6T8nQmyXzeW+bz3jKf95b5vLfM571lPu8t83lv0ffetDwezK1/5oJJaT6T8nQmxWU+k/S9N+FuEqaCSWE+k3A+k2g+k3g+k2Q+k+J8JqX5TMrTmZSW+Uyaz3un+bx3ms97p/m8d5rPe6f5vHeaz3vnASdOYDPp+Qs1m0n6e0kYt6sFCiadvJe+QKIGSNIAyeeDhKXLHXVT2ogxYAEENEB6nMG4qUzHSKEAghogpAHCGiCiARI1QJIGSFYA6fE2RR0ENEA0TjxonHjQOPGgceJB48SDxokHjRMPGic+aJz4oHHig8aJDxonPmic+KBx4oPGiQ8aJz5onPigceJR48SjxolHjROPGiceNU48apx41DjxqHHiUePEo8aJJ40TTxonnjROPGmceNI48aRx4knjxJPGiSeNE08aJ541TjxrnHjWOPGsceJZ48SzxolnjRPPGieeNU48a5x40TjxonHiRePEi8aJF40TLxonXjROvGiceNE48aJx4qPGiY8aJz5qnPioceKjxomPGic+apz4qHHio8aJjxonPmmc+KRx4pPGiU8aJz5pnPikceKTxolPGic+aZz4pHHis8aJzxonPmuc+Kxx4rPGic8aJz5rnPisceKzxonPCicel0UDBDRAggYIaoCQBghrgIgGSNQASRogGideo+cONXruUKPnDjV67lCj5w41eu5Qo+cONXruUKPnDjV67lCj5w41eu5Qo+cONXruUKPnDjV67lCj5w41eu5Qo+cONXruUKPnDjV67lCj5w41eu5Qo+cONXruUKPnDjV67lCj5w41eu5Qo+cONXruUKPnDjV67lCj5w41eu5Qo+cONXruUKPnDjV67lCj5w41eu5Qo+cONXruUKPnDjV67lCj5w41eu5Qo+cONXruUKPnDjV67lCj5w41eu5Qo+cONXruUKPnDjV67lCj5w41eu5Qo+cONXruUKPnDjV67lCj5w41eu5Qo+cONXruUKPnDjV67lCj5w41eu5Qo+cONXruUKPnDjV67lCj5w41eu5Qo+cONXruUKPnDjV67lCj5w41eu5Qo+cONXruUKPnDjV67lCj5w41eu5Io+eONHruSKPnjjR67mghDRDWABENkKgBkjRANE68Rs8dafTckUbPHWn03JFGzx1p9NyRRs8dafTckUbPHWn03JFGzx1p9NyRRs8dafTckUbPHWn03JFGzx1p9NyRRs8dafTckUbPHWn03JFGzx1p9NyRRs8dafTckUbPHWn03JFGzx1p9NyRRs8dafTckUbPHWn03JFGzx1p9NyRRs8dafTckUbPHWn03JFGzx1p9NyRRs8dafTckUbPHWn03JFGzx1p9NyRRs8dafTckUbPHWn03JFGzx1p9NyRRs8dafTckUbPHWn03JFGzx1p9NyRRs8dafTckUbPHWn03JFGzx1p9NyRRs8dafTckUbPHWn03JFGzx1p9NyRRs8dafTckUbPHWn03JFGzx1p9NyRRs8dafTckUbPHWn03JFGzx1p9NyRRs8dafTckUbPHWn03JFGzx1p9NyxRs8da/TcsUbPHWv03PFCGiCsASIaIFEDJGmAaJx4jZ471ui5Y42eO9bouWONnjvW6LljjZ471ui5Y42eO9bouWONnjvW6LljjZ471ui5Y42eO9bouWONnjvW6LljjZ471ui5Y42eO9bouWONnjvW6LljjZ471ui5Y42eO9bouWONnjvW6LljjZ471ui5Y42eO9bouWONnjvW6LljjZ471ui5Y42eO9bouWONnjvW6LljjZ471ui5Y42eO9bouWONnjvW6LljjZ471ui5Y42eO9bouWONnjvW6LljjZ471ui5Y42eO9bouWONnjvW6LljjZ471ui5Y42eO9bouWONnjvW6LljjZ471ui5Y42eO9bouWONnjvW6LljjZ471ui5Y42eO9bouWONnjvW6LljjZ471ui5Y42eO9bouWONnjvW6LljjZ471ui5Y42eO9bouWONnjvW6LkTjZ470ei5E42eO9HouZOFNEBYA0Q0QKIGSNIA0TjxGj13otFzJxo9d6LRcycaPXei0XMnGj13otFzJxo9d6LRcycaPXei0XMnGj13otFzJxo9d6LRcycaPXei0XMnGj13otFzJxo9d6LRcycaPXei0XMnGj13otFzJxo9d6LRcycaPXei0XMnGj13otFzJxo9d6LRcycaPXei0XMnGj13otFzJxo9d6LRcycaPXei0XMnGj13otFzJxo9d6LRcycaPXei0XMnGj13otFzJxo9d6LRcycaPXei0XMnGj13otFzJxo9d6LRcycaPXei0XMnGj13otFzJxo9d6LRcycaPXei0XMnGj13otFzJxo9d6LRcycaPXei0XMnGj13otFzJxo9d6LRcycaPXei0XMnGj13otFzJxo9d6LRcycaPXei0XMnGj13otFzJxo9d6LRcycaPXei0XMXNXruokbPXdTouYsaPXdx6XLiE20giQsgrAEiGiA9zkla8AGSsLAmXfq7Eu0gQgWQHrsrL/wAyVQCIQ0Q1gARDZCoANKlYSnLtrty6Zx0afPJWb6vTgvEAkiHhU8LwwaSsAAiGiBRAyRpgGQFkB7NMQmWx9UJUAogPXYXUNxAJBVAeuwuovQAobRUrpblYZEsT7+c87dBcTaD0mwG5ckM6tEC09cgmM2gMJtBOJtBNJtBPJtBs3lqms1T02yemmbz1Dybp+bZPDXP5ql5Nk/Ns3lqns1T82yemmfz1Dybp+bZPLWob+q4FwWXXDBIfckAtkISAELBpJMX7SdIXDRAQAOkw60tL/SojOQlQQEENUBIA4Q1QEQDJGqAJA2QrADSoxNo/eX8uBo41K4O8nhIlvHZ0/14bnK8muKjLJ2Z5JervybQwZvkAI/70/pnoXDYo8uoDtLDm4SYNpBc8Is9uozqIKwBIhogUQMkaYBkBZAeXUZ1ENAACRogGic+a5z4rHHis8aJzxonPmuc+Kxw4tOyaICABkjQAEENENIAYQ0Q0QCJGiBJA0TjxIPGiQeNEw8aJx40TjxonHjQOPGgceJB48SDxokHjRMfNE580DjxQePEB40THzROfI+Wv4yBt3JPkAKIaIBEBZAeelgZiTYQyQWQHrsL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",
      "brillig_names": [
        "get_notes_internal",
        "get_collapse_hints",
        "decompose_hint",
        "get_public_keys_and_partial_address",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "random",
        "notify_created_note_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "compute_log_unconstrained",
        "compute_log_unconstrained",
        "directive_invert",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "transfer_to_public",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 17
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "15238796416211288225": {
            "error_kind": "string",
            "string": "Balance too low"
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6869395374906889440": {
            "error_kind": "string",
            "string": "Mismatch note header contract address."
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "get_notes_internal",
        "get_collapse_hints",
        "decompose_hint",
        "get_public_keys_and_partial_address",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "private_get_decimals",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "error_types": {
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "14575960922920780690": {
            "error_kind": "string",
            "string": "Function private_get_decimals can only be called statically"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "AAAAAAAQAAAAAAAAAAAAFAAAAAAAAAAQAAAAAAADKLEBAAAAAAAAAAEAAAACAAAAAwAAAAQAAAAFAAAABgAAAAcAAAAIAAAACQAAAAoAAAALAAAADAAAAA0AAAAOAAAADwAAAAAAAAAAAAAgIxmaMbRgijJqxgJ0Kx/wJBOu3ewjrlkh91Gz5bPFGXfWatNXCtWKFfL1LI90FhxVxiDYNutFiTQbzOB99yQNJ29uS1dtYhpFOfdN/G+CA+7dsa07isZ0/qp0U8tmARWrleYSvIbhna2UzHL5g7sJOTQipdGo66ayP1bNcffgLTmQ22WfioWYbNmwFpDsEFwbPRxWWM8l2GXdSGV+7U4fffPMvFGOcSqZ6jsH1PWUvRss51gRFNd8W+jCZ4itEifC70n0N+IkOA0dzAa149Beq5auoThzhu78LRYgBHjDCTWyLAz5Tcy4Vo2X70DRZeYj1kuwSV5YmyD0nHnoICcJAaq/eDSiEVugsmBQIdB4nE5wm/0I9NRlo1DmVw6oTixvUQeErzsKfSVCk6jDzadYwk7tslHtfcYcI+4iPZWEDCJWyNSFov+b/VhatoATcjU9lh7xCq8Hqy1TR2IGYtkLEg8pMXlAaaJNF0uQvPmcQ3I5/HW5rnyWB95vedlqJwRWu3AbWwtGO7zwxP5xkFUjk9CVM+GyAEvYTp+KU6iPA4D05rswR3a/1Psi4gmHdBVkgemj+PCR0w2xADptqrQpjDMR/JFw+S3pQLBCqrmQ1TxqOyYznNprc9+SCDFBWQewX0CKYShHJZAWuSBK5L83U36xlrBcHZj6UQFqm6y7CL/i7zIfG8DlAsEPlJ1wNot1FnsKHnOZ4+AP3XjCgxsYfh6lc2sF7IQavkuXA/hFlwL8fxmKUP9eGp3FdO8Ycgr5ZP3gtp4kFyF8o0/dspBuqxBqOyCdJw1ZIhhE0pnRItbSxImFq85ZnSyGiHy0UXPx75xFXmCBHS0Db788e1IAph3qx2s3DKT0L3OmZct1qevcWM1L34r35/z/o21bcS5ZeJ8Nnbs/Fa3lOEt4SQ2x2DN5xzvkESPev8iMn8jWK3KtwTdDjKDTNxRFpXqWkOZE9YS6+kVBJM8BrVvgsTkBGeJB7rvr/1x9fyDcbFrRtq943CBtf3eFPwX95+vTcgB15RBVZZ0mI7he2DA0uYayiM+kJF+rYvQyt8oZJHBkKRjv0fxsfPCfSlYd8TNWktrC0SpTZ7wep9lFdxmgH50VuWtYVFSBZefyZKkkcz5/mCYEJ+3NfxzTkNDNJplm1Q8roTNLu1meTjvuYETTWAxzaE18iUsHRKKXZRK6E4qNAM6zjWDiy1aHyiAo3g6TVcw+XHFlN3JgLrgJA9qcLpkdqg7VmlVYlARJzvUvZqllhPtiH+wCJIHtMfGP1TC1ASG4UW/fdL5Y+Rvrz/1Sw2/T9lCL3+/6nsXVzwieZ7+JDFFKy1y6DXf7H8/3Yc+JZWdFJ3gkg0JpVHTM1gJeC0Mt4OAnu4GRCEiwh89uil4QNkZvfPuz1VRa0NhLK0AR5BMzRo2PdS0fvD8F3KKPWKr0pZygnfeDCRFV8DlhkPIuFMlL7dCv0Rj80FP3zocF8CFIYtaQ1nosqOOXA6JfW44e64t7BNsqiRuyGzOf5hPPD4V4tMerF1G8A2bujYON8A0lbe+MxLSyyTq7Q0Z6NabNW3ULe/YmxQhZOgjaDCFeGjGf+2uFs7RLe9okfqxUG3dqjqU27HJl+OK2t6cMKIARB3L+wFwFJJLPA/bJ/w0N+t1ch7j25FAB6ad5U5Kb8iJEP8oY7rtJpV0Vemgg8LIKD4QnopmgygeCsIur72hsFI8apeMq3K3ZtuMk+SQRcloOQCyU6P8SHDKtTGRHuOosMfgRe1rA9ynC+ytJPoyrEoZsjA4LXSn8tmTlQJ4BYScHX0PLARqX9j+cFOjbTjzmG6DfM7FWIWzkTRoV6X42D8fVP54/bo4kWs01GnLdQxxL/QROdEUJWftuVT4Fx68K3InEjXW1cWNvW760qAb29FliAjAbauTrDrvq3SAzQAZvKBNXSPEZYxw/4H+p1wADTj4nRU75krS/hLl7qnRxLiV4NVHfUMAE7HzR9N2LO2SmbyrEl5tl5WVoxaMbFO0Y92zwzuzLR5jedBrom2ToJY+ER3wbYlZaVZunuziDLi0pn7aGeNAVC8xbFtyCUjU9Q/pw6ZI5wcHGficaDurFFdOsWhmau3STOk78mMWbKBTt580n2u0AwzwShgvEsEYtONbUuh5HY6dOzbEcofNGloDCcOVRUVNEWS9ZGI+nZRLbOeiSgmsyYQ7gglHgBfzpF8DV3KAZR3xS9gdTMrYSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAg6bs2/ENrwMyOFjB0S0PSNrZJUNEvVIfL+YAuqhvHZoEG91H7rb3ycGG+JY/dwlUxLzgkuX4ChKVpnqQarPutwPy7+dPPQCuqPu2l8Knkm1werJWyZMMC3IVObyLXMw3yg+39qJyUgFl/CzRC6XUt751Y/Ckgg2GUJh97Fj/vuvHViqYcZK1SIEPXnEgCIZ5Vuhl1Gt/mw2Mk0/tsLaCYktfBipPD2uWICfqu7GqGp49LO8YfGdbnBpNZu/R+f5Bw=="
    },
    {
      "name": "public_get_decimals",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "11795427120478775878": {
            "error_kind": "string",
            "string": "Function public_get_decimals can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgACBAEnAAABBIBFJgAABAMmAgEEACYCAgQAHxgAAgABgEQkAAAARSQAAABGLQQAAYBEJwIAAgSARCYCAwQBOg0AAgADJSQAAACqHgIAAQAeAgACADI4AAEAAgADJgIBAQEjAgADAAAAbyQAAADTHgIAAQkmAgIAAQo4AQIDIwIAAwAAAIskAAAA5SYCAQAKLgwAAQACHAwCAwIcDAMBABwMAQICLAwCASUnAIAEBHgADQAAAIAEgAMjAIADAAAA0ikBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEFo7HGeKIlakY7AQECJS0AGMoYyg==",
      "debug_symbols": "7VbbbsIwDP2XPPchjp2L+ZVpQgUKqlS1qJRJE+LflzAaSheBxmCaxF6quDrOOTnOxTuxKGbb1bSsl81GTF52omrmeVc2tY92+0zM2rKqytV0+FvI8LH6gN+s8zqEmy5vOzEBY1QminoRhlb5GZZlVYiJ8cOvYCl1D5ZKRzAok0ATkT2iibSJaNYJsMM4tUMFQ/BrJpy8g3YXwV78L2q/h+8E0XdzzXfQJqIN2MvaGbkHMyGNtDPeVTvIc+2BwT2awTv2cAqAH1MYlv2OM6zwStVknJml06OqAXx3xSFJwS1JtzAh3ZLEqSRipP6cstaXLUZNPQOaYRVtymNQLl52OEArmTp0Fh0e0ZYkXS6fhXgXWXV+YSR0gEQ8bT5jxtUm+ncm7YyWf9wZe3IG+Iozjvs3ZmAiKv5cqX6WlZrnqOneh295W+azqji2dsttPR90et37uhg1feu2mReLbVuE9u/U+UGwDFWG9vA4hMBlJD2H5/kA",
      "brillig_names": [
        "public_get_decimals"
      ]
    },
    {
      "name": "mint_to_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "random",
        "decompose_hint",
        "field_less_than",
        "lte_hint",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "_finalize_mint_to_private_unsafe",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "error_types": {
          "10536464181608181124": {
            "error_kind": "string",
            "string": "transfer not prepared"
          },
          "11859452850824495745": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ],
            "length": 60
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2186653215069968126": {
            "error_kind": "string",
            "string": "Function _finalize_mint_to_private_unsafe can only be called internally"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "947855837675787227": {
            "error_kind": "string",
            "string": "caller is not minter"
          }
        },
        "parameters": [
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          },
          {
            "name": "hiding_point_slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_finalize_mint_to_private_unsafe"
      ]
    },
    {
      "name": "_store_payload_in_transient_storage_unsafe",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16958085610837407363": {
            "error_kind": "string",
            "string": "Function _store_payload_in_transient_storage_unsafe can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [
          {
            "name": "slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "point",
            "type": {
              "fields": [
                {
                  "name": "x",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "y",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "is_infinite",
                  "type": {
                    "kind": "boolean"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
            },
            "visibility": "private"
          },
          {
            "name": "setup_log",
            "type": {
              "kind": "array",
              "length": 9,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "JgACBAEnAAABBIBRJgAABAMmAgYEDSYCBwQAHxgABwAGgEQdAIBHgEcBLQiARAABLQiARQACLQiARgADLQiARwAEJwIABQSASCYCBwQJLAgBBiYCCAQKABABCAEmAwYEAQAoBgIILQQABYADLQQACIAELQQAB4AFJAAAAJ0sDAYFJAAAAOMkAAAA6ycCAAEEgFEmAgIEADoNAAEAAgEAgAOABYAHLQCAA4AILQCABIAJCwCACIAHgAojAIAKAAAA4i0BgAiABi0CgAaACQEAgAgAAoAIAQCACQACgAkiAAAAsSUnAIBDBAADJSQAAAOCLAgBBwAAAQIBJgIIAQAsDggHLAgBBwAAAQIBJgIIAAAsDggHLAgBBwAAAQIBJgIJAAIsDgkHHgIABwAeAgAJADI4AAcACQAKJgIHAQEjAgAKAAABSiQAAAOrHgIABwEeAgAJAAo4BwkKIwIACgAAAWYkAAADvRwMBAcALAgBBCYCCQQEABABCQEmAwQEAQAoBAIJLAwJCiwOAgoAKAoCCiwOAwoAKAoCCiwOBwomAgIEASYCAwQALAwDBiIAAAGwDSgABoBDAAcjAgAHAAADPyIAAAHFJgIGAAMAOAEGBywIAQEmAgYECgAQAQYBJgMBBAEAKAECBiwMBgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJLAgBBgAAAQIBLA4BBiYCAQQJLAwDBCIAAAJSDDgEAQgjAgAIAAACxyIAAAJkLA0GBSwMAwQiAAACcQw4BAEDIwIAAwAAAoQiAAACgyUcDAQDAAA4BwMGJgIIBAkMOAQICSMCAAkAAAKlJAAAA88AKAUCCAA4CAQJLA0JAy8MAAMABgA4BAIDLAwDBCIAAAJxJgIJBAkMOAQJCiMCAAoAAALeJAAAA88AKAUCCQA4CQQKLA0KCCwNBgkmAgsECQw4BAsMIwIADAAAAwckAAADzy0EAAmAAycAgAQEAAokAAAD4S0IgAUACgAoCgILADgLBAwsDggMLA4KBgA4BAIILAwIBCIAAAJSHAwGBwAAOAEHCSYCCgQDDDgGCgsjAgALAAADYCQAAAPPACgEAgoAOAoGCywNCwcvDAAHAAkAOAYCBywMBwYiAAABsCcAgAQEeAANAAAAgASAAyMAgAMAAAOqKQEAAQX3ofOvpa3UyjsBAQIlKQEAAQW+Hj//PqT2+jsBAQIlKQEAAQXrVzkD6KB2gzsBAQIlKQEAAQXonQn+oREtDjsBAQIlLQGAA4AGCwCABgACgAcjAIAHAAAD/CIAAAQHLQCAA4AFIgAABG4tAAABgAUBAAABgAQAAQEAgAOABIAJLQCAA4AKLQCABYALCwCACoAJgAwjAIAMAAAEWi0BgAqACC0CgAiACwEAgAoAAoAKAQCACwACgAsiAAAEKScBgAUEAAEDAIAGAAKABiIAAARuJS0AGMoYyg==",
      "debug_symbols": "1ZvhTuMwDMffpZ/7IY7t2OZVTic0YKBJ00BjnHRCvPuluy2DbS2ilM79MrWb3fz6T2M7WfNa3c1vXh6uF6v7x+fq6tdrtXy8nW0Wj6t89vpWVzfrxXK5eLh+/3UVmo9IYevw/DRbNefPm9l6U11BSrGu5qu75lBivsT9YjmvrlJ8+11nJ+rjZD2cuE9LrD2cUuzjJD2cpE9Lkno4aZ/OVe7hZH1asq92bn1qHALvjUPkYgwxnbEmItlZE3Eq1sZnjBXLpRUjvDfewtsA8FqMM/148BiGUJ6gKJ8+Ux44FesE0g1vaHtjI6RjeIiDwkP4CL9tQn68icg/3gSGbzdBKe6byIf22UMnsTx0Ksf9ht+/4yHHQJ/Mh9QjOCJjH6ezSSwy2t4rJ0fAbr1EBXfWoordeuVwFMqItsOwy6HujHUeIztjpPjBtqFPOGl6mTL9+fpiMvST1l4nrb1OWnuDSdPzhOkphEnT06Tpbcr0OEzExFToWbvphYn2xkx8VBcSt5QuxFqAGNJRvUZt9donbm2FEpUbai4hA3Ze1LTvj6h6uH2M/zukrfi5HFFbQXNBIncaqTuN1J1GbQXCBYnYGRG3JfILEpE7IvNGBN6yCIN6I4reIiRHbxGS0VuEZEzeiMhdhCR3WYTcRUh2l0XYXYR0Nxdhd3MRFncRUtxFSBt/rFkqs2xLdkyUYPTcn/97KqseQeiEKA4Tswdb9khEowOl0mmSRE+AbHwgxg4gvoBCZZ0tH9oJkDkDSt4UGmjlaEAgcQak3hRSbwoNtGr0JSC0AmSh2xgA6PAWEXzMS1t+ccSfgQTGL6HMDsk4nCRjgeSNKLrTKJo3IiR3RO40IncakY5fiuOBCPWEiL1NDoTFG1Fyp5EEd0TsjUjBHZF6IzJ0R2TOiDSQOyJ3GoG350jBWxZRHOYNvcHWmLTt36WfBOpaY1K6gEJds1+l5AyIvSnE5gyobRXuckDeFBJvComODzTgGpMqOeL//ZbP/szWi9nNcr7bAXv/srp9tyF28/dpfrQ39mn9eDu/e1nPm12yhw2yzSwD1OoIId9ok+Oj1qj5GLY/CdUg1pzC1jLUoDETZIp/",
      "brillig_names": [
        "_store_payload_in_transient_storage_unsafe"
      ]
    },
    {
      "name": "_reduce_total_supply",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "4856349594034274052": {
            "error_kind": "string",
            "string": "Function _reduce_total_supply can only be called internally"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          }
        },
        "parameters": [
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "JgACBAEnAAABBIBGJgAABAMmAgMEAiYCBAQAHxgABAADgEQtCIBEAAEtCIBFAAIkAAAASyQAAABhJwIAAQSARiYCAgQAOg0AAQACKgCAQwAAAAAAAAAAAQAAAAAAAAAAJSQAAAFPHgIAAwAeAgAEADI4AAMABAAFJgIDAQEjAgAFAAAAiiQAAAF4HgIAAwEeAgAEAAo4AwQFIwIABQAAAKYkAAABiiYCAwAELgwAAwAEHAwEBQAqAgAGAP////////////////////8OOAUGByMCAAcAAADdJAAAAZwcDAQGBRwMBgUAAjgEBQYJKAAGgEMABAEwgEMABQAGAjgGAQUcDAUGBRwMBgEACjgFAQYcDAYFAAI4BAIGAjgGBQIcDAIFBRwMBQQACjgEAgUjAgAFAAABOyQAAAGuBSgABIBDAAIAOAECBC8MAAQAAyUnAIAEBHgADQAAAIAEgAMjAIADAAABdykBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEFQ2U4OcmGfwQ7AQECJSkBAAEFWgLkG7UeqZ87AQECJSkBAAEF5wWzRaIcieM7AQECJS0AGMoYyg==",
      "debug_symbols": "7VnbbuIwEP2XPPPg8Xhm7P7KClVcQhUJAeKy0gr139dBZBKSlOy2hkqUF2SjY585x5OxEx+zeT49vL0Wq8V6l738OmbL9WyyL9ar2Du+j7Lptlgui7fX5t+ZKX/A2NOA3WayKvu7/WS7z16A2Y6yfDUvm2LjFItimWcvHJtdsDFUgY0lBYPlHrRzTs5o54gVHagH7FGn9mihCR6PYvCSIHiv4Bj9HYOHFM47UOd5yHkgVjSDXA8+YKjAwaFrB29N0uDBXAZ/oqCbUyDensJ/mcKxrShiMwwlnVhNOi/tdXNfV5zyGXD/6045iPATgxg+M4j7Bll2NpxHxTa5gQwBDJohXINB+h5SQY9ntDjjrrsroMVL7KW7fXEYxDpVmduLIfCj1Mo3qJVaLQw8yMBoNDWpBmNZAXpqhPNaI7hGs+kBk4ZBoYbGgEpfvH360uOLNfj0pdcX//Slzxfgpy99vlh4LF+CHoakcfyLvpzEPlgSXBWLj7Wygk7FOtMR+1grK3pYimJDW6xz/yCWzXWxVJcQYsY2B9nUHNJZNJIkHD4oR+h4xfYOHEl0CFbHaYr51OYQm4YDlIO6HGl0SK3Dc5vD29QcoVP5fBIdHqqCQ952OIK9A0caHaRr7rm95mjs7TnA3IGDPuAQrxxkhjYAtPqSio26+8EG4OsNwHsc2ADI6QZAhAMbQHy90bDNBbpvbhdMNbcL0E6jqOkHW+PDVWv8N1iDrNaQH/jGwnoiEQ5mwEcAV388h0vbx++x93uyLSbTZX6+h1gcVrPGtcT+zyZv3VBstutZPj9s8/KuonlNEW0jGrEZl1/OY4dlxCFyRJ6/",
      "brillig_names": [
        "_reduce_total_supply"
      ]
    },
    {
      "name": "private_get_symbol",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "error_types": {
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18192277837884173995": {
            "error_kind": "string",
            "string": "Function private_get_symbol can only be called statically"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "total_supply",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "9599227760297081764": {
            "error_kind": "string",
            "string": "Function total_supply can only be called statically"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "lo",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "hi",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "std::uint128::U128"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgACBAEnAAABBIBGJgAABAMmAgEEACYCAgQAHxgAAgABgEQkAAAASyQAAABhLQQAAYBELQQAAoBFJwIAAwSARCYCBAQCOg0AAwAEKgCAQwAAAAAAAAAAAQAAAAAAAAAAJSQAAAD1HgIAAQAeAgACADI4AAEAAgADJgIBAQEjAgADAAAAiiQAAAEeHgIAAQkmAgIAAQo4AQIDIwIAAwAAAKYkAAABMCYCAQAELgwAAQACHAwCAQAqAgADAP////////////////////8OOAEDBCMCAAQAAADdJAAAAUIcDAIDBRwMAwEAAjgCAQMJKAADgEMAAiUnAIAEBHgADQAAAIAEgAMjAIADAAABHSkBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEFhTdOygKTe6Q7AQECJSkBAAEFWgLkG7UeqZ87AQECJS0AGMoYyg==",
      "debug_symbols": "7VjbjoIwEP0Xnn3odKbT1l/ZbAwqGhICBnGTjfHftxApCESyrvrA8kIoOdM558xwGc7BNlqf9qs43WXHYPlxDpJsExZxlrrV+bII1nmcJPF+1b4ciPIAQlYBx0OYlutjEeZFsARmuQiidFueaum22MVJFCzZnfbBQqgaLKTyYJA8gCYifUUTKfZoqwbABv3WBiW0wZ8LR14/gbzxYMf+jeThGc4TeOd5zHlQ7NEM+j55i7YGW0LqkpfiqeRB3JKvUqiXp0B8fQrz5xRsRd10bCWO1E34na0wqls3+q3iKsg8EKQeycTwSBAPBSmytWtKybEqAlpfRW66HfTQjaTR4BWtSdD9gmjwDxgtb58CQzwEYtNOzN36afhHWvXbtepGK9gR+ozCN6VqwCjt0IuDydQvDuYGzWIArDwNZRuoI1S6YuTsSs8VKXB2ZcAVM7vSdwV4dqXvioQpueJZk259lDlXKqmTaoC7UnFKVdVIXiqJntQpVVX7TyMn9ea2/ry41VeYx+E6ia7z/e6UblrjfvF9iDqT/yHPNtH2lEflP4D2+O88c5qJqonULRQsFLocLs8P",
      "brillig_names": [
        "total_supply"
      ]
    },
    {
      "name": "public_get_name",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18105278452957613314": {
            "error_kind": "string",
            "string": "Function public_get_name can only be called statically"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "compressed_string::field_compressed_string::FieldCompressedString"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgACBAEnAAABBIBFJgAABAMmAgEEACYCAgQAHxgAAgABgEQkAAAARSQAAABGLQQAAYBEJwIAAgSARCYCAwQBOg0AAgADJSQAAACbHgIAAQAeAgACADI4AAEAAgADJgIBAQEjAgADAAAAbyQAAADEHgIAAQkmAgIAAQo4AQIDIwIAAwAAAIskAAAA1iYCAQAILgwAAQACLAwCASUnAIAEBHgADQAAAIAEgAMjAIADAAAAwykBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEF+0Le07wSjQI7AQECJS0AGMoYyg==",
      "debug_symbols": "7VXBbsIwDP2XnHuIY8dJ+JVpQgUCqlS1qJRJE+LflyAaSheBxmCnXaq4es57eY7jg1j5xX4zr5p1uxOzt4Oo22XZV20TosOxEIuuqutqMx//FjJ+jD7hd9uyieGuL7tezIBZFcI3q7g0KuywrmovZhyW38FS6gEslU5gUJxBE5E5o4k0J7TTGbDFtLVFBWPweyGsfIJ2m8BB/B9qf4bvBMl3vuc7aE5oBnNbu0M3gB0hTbQ7fKp2kNfaI4N9NUNw7OUUAL+mYCeHG8dO4Z2qybSzk1ZPqgbw0xPHJAWPJD3ChPRIksslhTbF1KdO3rYYNQ0MyOMqmpzHoGx67HCEVjLXdAbtIMSQpNvlM5DeIqOuH4yMDpCIl8vHPK020b8zGWeOIfoou6pc1P48HNf7Zjmalf3n1k/G5rZrl36173wcoJfZCXH+KFcgndorBKgLNIEj8HwB",
      "brillig_names": [
        "public_get_name"
      ]
    },
    {
      "name": "set_minter",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "12850931128589648885": {
            "error_kind": "string",
            "string": "caller is not admin"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "minter",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "approve",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "set_minter"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "10055739771636044368": {
            "error_kind": "string",
            "string": "Function get_admin can only be called statically"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10502589790419500451": {
            "error_kind": "string",
            "string": "Function _increase_public_balance can only be called internally"
          },
          "10536464181608181124": {
            "error_kind": "string",
            "string": "transfer not prepared"
          },
          "11795427120478775878": {
            "error_kind": "string",
            "string": "Function public_get_decimals can only be called statically"
          },
          "11859452850824495745": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ],
            "length": 60
          },
          "12850931128589648885": {
            "error_kind": "string",
            "string": "caller is not admin"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15009911310769716579": {
            "error_kind": "string",
            "string": "Function public_get_symbol can only be called statically"
          },
          "16541607464495309456": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 16
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16958085610837407363": {
            "error_kind": "string",
            "string": "Function _store_payload_in_transient_storage_unsafe can only be called internally"
          },
          "17028138060491915576": {
            "error_kind": "string",
            "string": "Function _finalize_transfer_to_private_unsafe can only be called internally"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18105278452957613314": {
            "error_kind": "string",
            "string": "Function public_get_name can only be called statically"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2186653215069968126": {
            "error_kind": "string",
            "string": "Function _finalize_mint_to_private_unsafe can only be called internally"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "364657447181031001": {
            "error_kind": "string",
            "string": "invalid admin"
          },
          "4856349594034274052": {
            "error_kind": "string",
            "string": "Function _reduce_total_supply can only be called internally"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6067862452620309358": {
            "error_kind": "string",
            "string": "Function balance_of_public can only be called statically"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "8359297168692325491": {
            "error_kind": "string",
            "string": "Function is_minter can only be called statically"
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "947855837675787227": {
            "error_kind": "string",
            "string": "caller is not minter"
          },
          "9599227760297081764": {
            "error_kind": "string",
            "string": "Function total_supply can only be called statically"
          }
        },
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "is_minter",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "8359297168692325491": {
            "error_kind": "string",
            "string": "Function is_minter can only be called statically"
          }
        },
        "parameters": [
          {
            "name": "minter",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "is_minter"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": null
      },
      "bytecode": "H4sIAAAAAAAA/7WTyw7CIBBFqcUo0sTEx39MU0y7dOHafyCtLHVRN+766dZkJkyI0QVwEzJMgMNcHoXwKjBKESGCHDEqjAs2Xs7tjDnEqVbBvin5HRijvvhLWH+jkFnk4QPxM50/rJBzmTyfe6F913PTrF8J/z5y+af7y+l//8OzRq9bzCvh/8P4uvfXx/M2ij/SbJGc0ptoOwAqvkT+EvmhJBvn8w+Yb4Svj6KMqNO1tnaNdfZkh8H0dhfwP+KH/QbzqHp4zgQAAA==",
      "debug_symbols": "bY/dCoMwDIXfJde9aJzWn1eRIVWjFEortQ6G+O6LQzb3c3PICV8OOSv01C5jY9zgZ6jqFazvdDTesVs3AW0w1pqxOa9B7oKXJz9P2u12jjpEqLJSCSDXQ6VkyveDscRzsokfFKUsigNGiZi9cFTpXx7z/M2X6oO/bmxvOhjdWjqeHxbXnbrE+0RftabgO+qXQHvBUzfWGjORSI7l6Ac=",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "_recurse_subtract_balance",
      "is_unconstrained": false,
      "custom_attributes": [
        "internal",
        "private"
      ],
      "abi": {
        "error_types": {
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "14111519877593195750": {
            "error_kind": "string",
            "string": "Function _recurse_subtract_balance can only be called internally"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 17
          },
          "15238796416211288225": {
            "error_kind": "string",
            "string": "Balance too low"
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6869395374906889440": {
            "error_kind": "string",
            "string": "Mismatch note header contract address."
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "account",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_notes_internal",
        "get_collapse_hints",
        "decompose_hint",
        "get_public_keys_and_partial_address",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "finalize_mint_to_private",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "10536464181608181124": {
            "error_kind": "string",
            "string": "transfer not prepared"
          },
          "11859452850824495745": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ],
            "length": 60
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "947855837675787227": {
            "error_kind": "string",
            "string": "caller is not minter"
          }
        },
        "parameters": [
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          },
          {
            "name": "hiding_point_slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "JgACBAEnAAABBIBJJgAABAMmAgQEAyYCBQQAHxgABQAEgEYtCIBGAAEtCIBHAAItCIBIAAMkAAAAUSQAAACTJwIAAQSASSYCAgQAOg0AAQACKgCAQwAAAAAAAAAAAQAAAAAAAAAAJwCARAQAAysAgEUAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAlJAAAD8MsCAEFAAABAgEmAgYBACwOBgUsCAEFAAABAgEmAgcAACwOBwUsCAEFAAABAgEmAggAAiwOCAUeAgAFAB4CAAkAMjgABQAJAAomAgUBASMCAAoAAADyJAAAD+weAgAJASwIAQomAgsEAwAQAQsBJgMKBAEAKAoCCywMCwwsDggMACgMAgwsDgkMLAgBCCYCCQQEABABCQEmAwgEAQAoCAIJLAwJCywOBwsAKAsCCywOBwsAKAsCCywOBwssDQgJACgJAgksDgkIKgIACQAAAAAAAAAAAgAAAAAAAAAALAgBCyYCDAQFABABDAEmAwsEAQAoCwIMLAwMDSwOBw0AKA0CDSwOBw0AKA0CDSwOBw0AKA0CDSwOCQ0sDQgJACgJAgksDgkILAgBCQAAAQIBLA4ICSwNCwgAKAgCCCwOCAssCAEIAAABAgEsDgsILAgBCwAAAQIBJgIMBAAsDgwLLAgBDQAAAQIBLA4GDSYCDgQCJgIPBAEsDAwEIgAAAhUMOAQOECMCABAAAA5pIgAAAicsDQ0KCjgKBhAjAgAQAAACQSYCEQQAOwkBESYCCgQQLAgAECwMCREsDAgSLAwLEywMDRQAEAAKACQAAA/+LAQAACwNCQosDQgQLA0LESwOCgksDhAILA4RCywOBQ0AKBACCQA4CQwKLA0KCAo4CAcJCjgJBgojAgAKAAACqSQAABFbLgwACAAJHAwJCgEcDAoIABwMCAkBIwIACQAAAsskAAARbSYCBQAELgwABQAIHAwICQAqAgAKAP////////////////////8OOAkKCyMCAAsAAAMCJAAAEX8cDAgKBRwMCgkAAjgICQoJKAAKgEMACAA4CQEKHAwKCwUcDAsJAAI4CgkLCSgAC4BDAAoAOAgCCwA4CwoIHAwICwUcDAsKAAo4CggLIwIACwAAA1skAAARkQUoAAqAQwAIADgJCAovDAAKAAUmAgUAAwA4AwUIBSgAAoBDAAUAOAEFAiwIAQEmAgUEBAAQAQUBJgMBBAEAKAECBSwMBQksDgcJACgJAgksDgcJACgJAgksDgcJLAgBBQAAAQIBLA4BBSwMDAQiAAADzQ0oAASARAABIwIAAQAADgYiAAAD4iwNBQkAKAkCCgA4CgwLLA0LBQAoCQILADgLDw0sDQ0KACgJAg0AOA0OECwNEAscDAsNARwMDQkAHAwJCwEWDAsJCjgFBw0EOAkNEAo4CgcNBDgQDREKOBEGDSMCAA0AAARJJAAAEaMrAgANAA7bHik8POkb/ATjzqpQ0sVB+p0JHHLrQD77HPosszV/KwIAEAATQdZ1+gMOzjETrVPKNP0TsZtul2IEZzT0FIJMTWreNSwIAREmAhIEBAAQARIBJgMRBAEAKBECEiwMEhMsDg0TACgTAhMsDhATACgTAhMsDgYTHAwCEAUcDBANAAI4Ag0QCSgAEIBDABIcDBITBRwMExAAAjgSEBMJKAATgEMAEgUoABCAQwATADgTDRAFMIBFABIADQA4EA0TCjgCEw0jAgANAAAFIyYCFAQAOwkBFCwIAQ0mAhMEAwAQARMBJgMNBAEAKA0CEywMExQsDhAUACgUAhQsDhIULAgBECYCEgQEABABEgEmAxAEAQAoEQISJgITBAMAKA0CFCYCFQQCACgQAhZC9wASABQAFgATACgQAhEAOBEMEiwNEg0AKBACEgA4Eg8TLA0TEQAoEAITADgTDhQsDRQSHAwSEAEcDBAOABwMDhABCjgNBQ4KOBEKEgQ4DhITFgwSFAQ4DhQSHAwOFAAAOA0UFSwIARQmAhYEBAAQARYBJgMUBAEAKBQCFkE/wAAVABEADgAFAAoACwAWACgUAhYAOBYMFywNFxUAKBQCFwA4Fw8YLA0YFiwIARQAAAECASwIARcAAAECASwIARgAAAECASwOFRQsDhYXLA4OGCwIARkmAhoEBAAQARoBJgMZBAEAKBkCGkE/wAANABEAEAANABEAEAAaACgZAhsAOBsMHCwNHBoAKBkCHAA4HA8dLA0dGyMCABMAAAasIgAABpssDBUBLAwWAywMDgQiAAAGvSwMGgEsDBsDLAwGBCIAAAa9LA4BFCwOAxcsDgQYIwIAEAAABtYiAAAG5ywOBRQsDgoXLA4LGCIAAAbnIwIACwAABvQiAAAHBSwODRQsDhEXLA4QGCIAAAcFFgwQAwQ4AwkEBDgSBAMsDRQELA0XBQQ4EAsGEjgDBgksDgQULA4FFywOCRgxAgAELAgBAyYCBAQKABABBAEmAwMEAQAoAwIELAwEBSwOBwUAKAUCBSwOBwUAKAUCBSwOBwUAKAUCBSwOBwUAKAUCBSwOBwUAKAUCBSwOBwUAKAUCBSwOBwUAKAUCBSwOBwUAKAUCBSwOBwUsCAEEAAABAgEsDgMEJgIDBAksDAwBIgAAB7gMOAEDBSMCAAUAAA2jIgAAB8osDQQFLA0FBAAoBAIELA4EBSwIAQQAAAECASwOBQQsCAEFAAABAgEsDgwFLAgBBiYCCAQKABABCAEmAwYEAQAoBgIILAwICSwOBwkAKAkCCSwOBwkAKAkCCSwOBwkAKAkCCSwOBwkAKAkCCSwOBwkAKAkCCSwOBwkAKAkCCSwOBwkAKAkCCSwOBwkAKAkCCSwOBwksDQYIACgIAggsDggGLAgBCAAAAQIBLA4GCCwMDAEiAAAIgAw4AQMGIwIABgAADQQiAAAIkiwNCAQsDQQFACgFAgUsDgUELAgBBSYCBgQMABABBgEmAwUEAQAoBQIGJgIIBAsAOAgGCCwMBgkMOAkIChYMCgojAgAKAAAI6CwOBwkAKAkCCSIAAAjJLAgBBgAAAQIBLA4FBiYCBQIBJgIIAgAmAgkCCSwIAQomAgsEBgAQAQsBJgMKBAEAKAoCCywMCw0sDggNACgNAg0sDgUNACgNAg0sDggNACgNAg0sDggNACgNAg0sDgkNLAgBBQAAAQIBLA4HBSwIAQgAAAECASYCCQABLA4JCCcCAAkAAQAmAgsEBSwMDAEiAAAJfAw4AQsNIwIADQAADJEiAAAJjiwNBQgsCAEFJgIJBAwAEAEJASYDBQQBACgFAgksDAkKLA4ICgAoCgIKLA4HCgAoCgIKLA4HCgAoCgIKLA4HCgAoCgIKLA4HCgAoCgIKLA4HCgAoCgIKLA4HCgAoCgIKLA4HCgAoCgIKLA4HCgAoCgIKLA4HCgAoCgIKLA4HCiwOBQYsCAEFAAABAgEsDg8FLAwMASIAAAomDDgBAwgjAgAIAAAL/iIAAAo4LA0FBAA4BAMIDjgECAkjAgAJAAAKUyQAABGRLA4IBSwNBgMmAgUECww4CAUJIwIACQAACnIkAAARtS0EAAOAAycAgAQEAAwkAAARxy0IgAUABAAoBAIFADgFCAksDgIJLA4EBiwIAQImAgMEDAAQAQMBJgMCBAEAKAICAyYCBQQLADgFAwUsDAMGDDgGBQgWDAgIIwIACAAACuEsDgcGACgGAgYiAAAKwiwIAQMAAAECASwOAgMmAgIECywMDAEiAAAK/Aw4AQIFIwIABQAAC4YiAAALDiwNAwEmAgUECwYoBQIDJgIHBAMAOAUHBiwIAQQAEAEGASYDBAQBACgEAgYsDgUGACgGAgYsDgUGJgIHBAMAOAQHBgAoAQIHLQQAB4ADLQQABoAELQQABYAFJAAAElUAKAQCBiwNBgUmAgcEAgA4BgcBNg0AAQAFJSYCBgQLDDgBBgcjAgAHAAALnSQAABG1ACgEAgYAOAYBBywNBwUsDQMGJgIIBAsMOAEICSMCAAkAAAvGJAAAEbUtBAAGgAMnAIAEBAAMJAAAEcctCIAFAAcAKAcCCAA4CAEJLA4FCSwOBwMAOAEPBSwMBQEiAAAK/CwNBggsDQUJADgJAQoOOAkKCyMCAAsAAAwdJAAAEZEmAgsECQw4AQsNIwIADQAADDQkAAARtQAoBAILADgLAQ0sDQ0JJgINBAsMOAoNDiMCAA4AAAxZJAAAEbUtBAAIgAMnAIAEBAAMJAAAEcctCIAFAAsAKAsCDQA4DQoOLA4JDiwOCwYAOAEPCCwMCAEiAAAKJgI4CwENAjgNDw4OOA8NECMCABAAAAytJAAAEpssDQUNJgIRBAUMOA4REiMCABIAAAzIJAAAEbUAKAoCEQA4EQ4SLA0SEBwMEA4ALA0IEAQ4DhARADgNEQ4sDg4FBDgQCQ0sDg0IADgBDw0sDA0BIgAACXwsDQgGLA0ECSwNBQomAg0ECQw4Cg0OIwIADgAADSckAAARtQAoCQINADgNCg4sDQ4LADgKDw0OOAoNDiMCAA4AAA1MJAAAEZEsDgkELA4NBSYCCgQJDDgBCg0jAgANAAANayQAABG1LQQABoADJwCABAQACiQAABHHLQiABQAJACgJAgoAOAoBDSwOCw0sDgkIADgBDwYsDAYBIgAACIAsDQQFHAwBBgAAOAgGCS4MAAkABiYCCgQJDDgBCgsjAgALAAANziQAABG1LQQABYADJwCABAQACiQAABHHLQiABQAJACgJAgoAOAoBCywOBgssDgkEADgBDwUsDAUBIgAAB7gsDQUBHAwECQAAOAMJCi4MAAoACSYCCwQDDDgECw0jAgANAAAOMSQAABG1LQQAAYADJwCABAQABCQAABHHLQiABQAKACgKAgsAOAsEDSwOCQ0sDgoFADgEDwEsDAEEIgAAA80jAgAQAAAOdiIAAA+1JgIRBAIMOAQREiMCABIAAA6NJAAAEbUAKAoCEQA4EQQSLA0SECwNCxEsDQ0SCjgSBhMjAgATAAAOuSYCFAQAOwkBFAsoABGARAASIwIAEgAAD0ciAAAOziwNCREsDQgSLA0LEywNDRQmAhYEAww4ExYXIwIAFwAADvUkAAARtS0EABGAAycAgAQEAAQkAAARxy0IgAUAFQAoFQIWADgWExcsDhAXADgTDxAOOBMQESMCABEAAA8yJAAAEZEsDhUJLA4SCCwOEAssDhQNIgAAD7UmAhEEEiwIABIsDAkTLAwIFCwMCxUsDA0WABAAEQAkAAAP/iwEAAAsDQkRLA0IEiwNDRMtBAARgAMnAIAEBAAEJAAAEcctCIAFABQAKBQCFQA4FQwWLA4QFiwOFAksDhIILA4PCywOEw0iAAAPtQA4BA8QLAwQBCIAAAIVJwCABAR4AA0AAACABIADIwCAAwAAD+spAQABBfeh86+lrdTKOwEBAiUpAQABBb4eP/8+pPb6OwEBAiUkAAAPwyYCBgQBJgIHBAAsDAcFIgAAEBYNKAAFgEQAByMCAAcAABCGIgAAECssDQEFLA0CBiwNAwcsDQQIJgIJBAQsCAEKJgILBAUAEAELASYDCgQBACgGAgsmAgwEBAAoCgINPg8ACwANLA0KBgAoBgIGLA4GCiwOBQEsDgoCLA4HAywOCAQlLA0DBww4BQcIADgFBgcjAgAIAAAQoSIAABFSLA0BCCwNAgksDQMKLA0ECyYCDQQEDDgFDQ4jAgAOAAAQyCQAABG1ACgJAg0AOA0FDiwNDgwmAg4EAww4BQ4PIwIADwAAEO0kAAARtQAoCAIOADgOBQ8sDQ8NADgMDQ4mAg0EBAw4BQ0PIwIADwAAERckAAARtS0EAAmAAycAgAQEAAUkAAARxy0IgAUADAAoDAINADgNBQ8sDg4PLA4IASwODAIsDgoDLA4LBCIAABFSLAwHBSIAABAWKQEAAQUC3G4ngHYSnTsBAQIlKQEAAQUNJ3XcxvIT2zsBAQIlKQEAAQVaAuQbtR6pnzsBAQIlKQEAAQVFp8pxGUHkFTsBAQIlKQEAAQWSOQpZPWHthDsBAQIlKQEAAQXonQn+oREtDjsBAQIlLQGAA4AGCwCABgACgAcjAIAHAAAR4iIAABHtLQCAA4AFIgAAElQtAAABgAUBAAABgAQAAQEAgAOABIAJLQCAA4AKLQCABYALCwCACoAJgAwjAIAMAAASQC0BgAqACC0CgAiACwEAgAoAAoAKAQCACwACgAsiAAASDycBgAUEAAEDAIAGAAKABiIAABJUJQEAgAOABYAHLQCAA4AILQCABIAJCwCACIAHgAojAIAKAAASmi0BgAiABi0CgAaACQEAgAgAAoAIAQCACQACgAkiAAASaSUpAQABBSiGkrBH3P1DOwEBAiUtABjKGMo=",
      "debug_symbols": "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",
      "brillig_names": [
        "finalize_mint_to_private"
      ]
    },
    {
      "name": "transfer_to_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "random",
        "decompose_hint",
        "field_less_than",
        "lte_hint",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "AAAAAAAQAAAAAAAAAAAAFAAAAAAAAAAQAAAAAAADKLEBAAAAAAAAAAEAAAACAAAAAwAAAAQAAAAFAAAABgAAAAcAAAAIAAAACQAAAAoAAAALAAAADAAAAA0AAAAOAAAADwAAAAAAAAAAAARXochPPM8n03wmMH1hE9Y4zof7ScQ30Vq66R4xGOpDH0GwaAuigWz/Cw8iBbuBvZOpoQtrbvYr0b/SEJdSyYgIg8iWugYFinUEOgy1UMd0+B5Yvt1gms1Qd7f0xebnRAG1zSGsXSOQhy0+i4wEtbKNZWcLK77zYV2EkgZtYwNbAaPytDcI2mI+bi8nJh6pg68GP1yROEokZ64wJ9oniX4txna3ine1iQ7P7wK1SQW2KgK9hB32r/UXMwAi6LqsVS8UhWI7RIjcmVglsg6+NHcXzwYW83L6ODdgC3RM9pmxFcTuEpmHDJqZglIxVzuMaBpcVR+AyksbyOuUhPNX5NkvBvS2SVv2T9TO8sCU1X84Yrzoa0MUjri8b9aJt3yjoxapY9wTo/zD4MzPZiu5t7qiAGZIzJnggsp0bo2Okox9Gzb/YRmodFCawzyCTIWTJl+JDC+I3XaAtV8sopFT0oAiYXN9rT3LxYfTdPNWdXTOP04bMt13FmhY0jfLkXT9HwRWu3AbWwtGO7zwxP5xkFUjk9CVM+GyAEvYTp+KU6iPA4D05rswR3a/1Psi4gmHdBVkgemj+PCR0w2xADptqrQJPqbOJdIonRs6hBHpdOFjSMYhKPdQWfFZ7mXn2LO8GQ8Ut4va02SrjB4/AwAHrfziVFhqgnJOv+/8Cx2qYlu6HnsIFk4LhQN/9KDiLp1xAcO08AN2KYFDroJmdoh/50QCv/7Kj+53d4sNCWKaPdpWi80Fv+3xxgK+py1loDxO0i3Qj3a/Ec6lqFiaTiDsmj+AbWefL93SlynDB5H09/U5ErQJ2CfdpDgYoXhajumXfLvhic8sHWaDnbPSuRrxIqwiqK5jRLfcyj3wMJ1ZFt5xi0VxMTfBCZ3FJfFu2sH+iCs/CienOOiZMlKXmCowK6x45Ip8641EaoLEyX1dhJPxIz6mrUbvQRcLA2u6Yjq7YVOd6z1Qd5RHCgVFxtt+Jf8V9g0LuMHVhVGBoUhYMAsAciwnAjugpmFz9BEOojXiciofJNJZyKjlwIPGx1Zffgi4TXbZM/q3WFpaJkh8Cg+fFx6v6Y5VBsuNSNhAaYAydP9a3bgf/AVwM3Ln/YJWcT4oVlcszYYrZHWQ83UE7bzF3z1D3CoZlreu0MwVphSl7yKXhr7rAdBus+5WOKGs9++1p456ukUflZUvvJwrjYAhKDdjjbU35M8KfycaTgBaqXpw4o9EqiTN9sH2IY8Pb6AiaIFiah77oV5l1LbY/ywcfM+QOcRkQvVulJLqNt2eKyes5tfXQX9xdhwoH6ZvwbPPYWUGatHl7PgU9tPwsKwaBJgjTwZaWvFPLPwxkpH0PBp/W5dF+G8PtH677YRcBPcichElbvCh8IKUSU2ckrdK5/2ySUtmlJl+jX2BS1z17QgOUDSNpFAaAhrJhR2QRQbJAqsLvjef97vC6qbTP+c7AIzoz+OkbxM2Cb1o5O6oaQoe7dS2nnDKBG3rtvHIdtgmQ/taEC5FD226CwFG5HH1DNkWIm0BFV+ed4yjwHFhugf4bPt+2mzV+2qyY3wv86oC+EEx87x/XtZ7zJNN9HtTFrWYQub6dFa03AHdaqOUb23ixN95xX+IIT4mR+XdtVwCqROZLhql3Y30H+iQwXbhVhu+Zpr3kXPNhOm+/6eeWAGt70ylsQAbva3+caLd1yGrELTo1MJnW8g0GuARu1adB0EEwKS+B8TrLCXiwawXEdlyuoRlP35MeMb3Xyt1DO4wQCJDQkuAnHy15oJAdyTqEht/PIv/Y9h4qnCdnA3gvwepV8KMQH2xt+dpVBzId0PXwNsGiVcUEWe7mwILBZKYDnbOXuX1HoMvB8E8NnsLUG/T149NUcJchJ/tQWCkOBILWg0+wuXyswQ61ZJ/de4iTnuLsHbAHZ0V5pXbSWKEeS9JPkqiXqcfkP+VfiqqnqJkmE8Vy36rLE9ppdgIpW9NDA38Mhan5E5CXO/xhhn0K38P64NkjhGx/g2LxrYMbyELfgcMNa3kSIGrDKvqaUG+P83kxOCBYb55eUgirvuz9hdMTarMb+voLYgxqQRE7xF99hpL8Yp0RrVNjs3Q5SchDT0PcFycO0JuL3hkeQrozxTE8gbrB6Mxl/9c9rusC68HA5vnC1V7bw1NWfsSgKGZWD0KkObVU+S9ZEm1jvUHoQoRhUsNMK6nXa3orpJf7Wy/Be+z4rZbBL3nGjNNL+szAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhTTBZy7NLDkAzWs2Ux6JjIF62CgTSItr49v9SV6GzcxLzwf5LsC5RH6QM0QeKEIY8b+MOgkfQth0VkZLetHpwMPy7+dPPQCuqPu2l8Knkm1werJWyZMMC3IVObyLXMw3yg+39qJyUgFl/CzRC6XUt751Y/Ckgg2GUJh97Fj/vuvHViqYcZK1SIEPXnEgCIZ5Vuhl1Gt/mw2Mk0/tsLaCYktfBipPD2uWICfqu7GqGp49LO8YfGdbnBpNZu/R+f5Bw=="
    },
    {
      "name": "mint_to_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "947855837675787227": {
            "error_kind": "string",
            "string": "caller is not minter"
          }
        },
        "parameters": [
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "mint_to_public"
      ]
    },
    {
      "name": "transfer_in_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          }
        },
        "parameters": [
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "transfer_in_public"
      ]
    },
    {
      "name": "_increase_public_balance",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "error_types": {
          "10502589790419500451": {
            "error_kind": "string",
            "string": "Function _increase_public_balance can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          }
        },
        "parameters": [
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "7Z3dbhsrEIDfxde54GdgoK9SHUVJmlaWrKRK0iMdVXn3s+tmWXthly5lsctwU9kN45n5YJnhZ+Hn7svj/Y9vt/unr8+vu0+ff+4Ozw93b/vnp+7bz/eb3f3L/nDYf7s9/e8d6//hXB0FXr/fPfXfX9/uXt52n7jW4mb3+PSl/4ii+4mv+8Pj7pMW7//cdEI2QUhAilCKJilThDBBCESKUIomxVOEUipXsxShJE1rK/fGL8yYGgozoVxhLnSgNADgR2kApV1pqwKFjXQ/baTgp4V74xEyGG9c4c76ksbnIA/ckdcx8lxpV1pzXDbeSjsUtiBharzBrMZzdm58r8KKrVUIxrZXof5YBWgxqOg+2lijQ+EancFJvQn+5x5nfAZESuQTgqUImQShcBATqoP8IdV9NmaZl9BcDgy6z5p7WkwJLVDEFyjiixJFtOgSWsKhPrsWKKKlSO1jkdrHIrVveBEtRXyxRVqyLdKSbYmWLJkoomWD2kcWSYu4tC4t0mP6yDGUmaI08qM0AoPllAK5y9hRnKcUITuYlGN+pvUkA5FcXD8cHOHwSPrHtWQuoVFjYdnnjYHMEozLLPVYWrNAYeXMUHYs2hl0xIgNYwaMW6SCBDFukesSxKh4w5gD418QfzfEaN1sAZ7Mj3QYezaadhNbZkO63aAExwbYlA2SbjfoctqOjfXY2A3Y6OXiStiBjZJcTk0ycAGTpBTOJBCeSfbqTLIXoYTgTDK+SRehNEbTbhViYhIwvIBJwF3FgdBTkzYZRK4x6WSBZjDpIpSUqzjQnklCXJ9JF6Fkh75eKTaNbCDF1ZkE7PpMUnlMsuBM6taV3s9nzkCxIlqgiBZTQosWRbToElqwSO1jkdrHIrVvZBEtRXyxRVqyLdGSFWNFtEARLRvUvoyN/KRwiwjyZMA1M/Iz48jPGBkZ+SlwIz+lZGTkJ5gcJqUEOysd+u0uhA6/DZZP5xcU143k75I0domk4NdPUmpHUpllkqjdRAdqyyLYOYdxBx0/r6UOjp7ZcsT0uC53MmHAtQkpMYP13I7Gd4t3vzTA5hrs1hrE5j6IzX2Qm/sQXh/LqWFmN3FODbi1hpl9yus0KO26R3GmwS9ruimRj8Kmy2ddadF3Bl5p6X4ZTqJ7cMeqOOkRBRfLhZUzQgk8LXpEohuSCRLNGpIpEtWQTJBgayUektZKpkhMayUeEmhIpkhMQzJBYmVDMkWCDck5EmSiIZkioZnQa7codrLP+wMJpxmEF5HQTNUWkViSSFxZfV60RwI0H5xFJNCQTJG0B2eKRLVW4iFprWSKRLdW4iGhORJeQoI0xziLSGiOhJeQGJpLW4tIaI6El5DYltB7SGiOhBeREEjVOj8NIzDHfPSTQFLV+8kJZEpHPwkEtt5PQSCnOfpJIAQd/SQSV7Js9/sb/CQSV4BIXAECw+reTwrbQI9+EokrFDZsHv2kUp9E8gQkMv5EInmCoVGftp4tRkKOfoKa+pnl1aOr8BP58N6aQCmTCx+hVPMwr4HC9eifNtO9Q1ZW8+RnhALVpNk5oVTTd2aEoqpJ4FdBQRx+mKP1ok89o7ecUKoZGmSEomlGnwiUaiazMkJBmiE5AqV1tD6Uel5czAmltZQAlBaSfSj1vL6YE0oLyR4UzliLySEqrasNUWl9bYAKb51tiArNidoIFVHNXo5VVKw7E5tbEaBCMzJHqMjWVkJUwjPY3AzHRvLTpbSeylFsZjUgKrZaW8B9ZQePhD6phZkLGwasCkZS+Ot2Xzbzyl7Mi5kdDTGxmcuEY2IzFwRHxZK08ZlMLSY2cyhDVAwKtwfUw1GlaM6vNvllj70uewRelz1KXtPzy8OHvV/MHH1VvRtf33Fs23jsdTVmsb6r29YeXc3UgWTOCslhmnMIXc2qecTRehZoYo5WM5MRcbSe4w5jjlKpUUulRm01M0hijLmSqcj4l7nBcueqmVKR9Zw5mJVKPXuC11DhJ5eoK+5R4dWE86xUqokUOanUs9s8KxWaMYhr5fwzfm9bz5F7q6iAu7ap++i3FVXNOmBWKtWs7eSkUs/USVYq1ey6WEVFjTeGKcU8KvVc9ZGVSmsrASr1vAOalQrNLC5CpZ6JpIxUoJ79kFmp0JxfiVCp58S3rFRoZvwRKvXs/MtKhWi/gm6PW7ce71GRRGNQhEprKwEq9dwIkpUKzRnKCBWiM5QxKkTzlWUqRGcoI1SIzsXJcU++lNynQnMuLkaFZgyKUCE6QxmjQjMGRahYmjEoRqX1tj4VxVpkDlFpbSVEpUXmAJV63mPPSqVF5gCVeu5GWUcF0FHRzKdCtK0sU6nnPpKsVIjGoGUqQDRfWaZSzwG1Wam0thKi0vZm+ztLVT1n1Gal0vZmB6jU8xJ0Tir1nMg6T6V3VCsIOYpyeP8QQXoy4QUQC4Miq3w94eWBZZnw5HlEBtfLzE28Lr6Eqa1OkMK5ibuIlEqR4km6eJIukaRLJOmSSbpkUn1Bki5I8mtuG8ey1Nw2h4gUpkhpniSlV/cxGF56tmy4QsiKgMz6fgnDZwcv6wmflLMoY8IbrSMyKkFmfT9rwsd8RWQS9Ij1fbMJHwsYkUnQAwl6wsflWTW0a4veloqZ6zAjMgl6wmfnRWTsehlM0IMJeqK5QEjGrK9TKxNk1uuZudZtWSZ8wEFEZv2zMHMVW0RmfX9g5fr+2objcUQmRU+CP0omyCTUj17ZDt67b//evezv7g+Pr51E/8cfTw9v++enj69v/30f/nL/sj8c9t9uv788Pzx++fHyeHt4fuj/tmMf/3yWFm+Am96W/qu1N5xB/623S3K4kVx3SjvF/wM=",
      "brillig_names": [
        "_increase_public_balance"
      ]
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "364657447181031001": {
            "error_kind": "string",
            "string": "invalid admin"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "admin",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "name",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "symbol",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "decimals",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "JgACBAEnAAABBICFJgAABAMmAgUEQCYCBgQAHxgABgAFgEUdAIBGgEYCHQCAR4BHAh0AgEiASAIdAIBJgEkCHQCASoBKAh0AgEuASwIdAIBMgEwCHQCATYBNAh0AgE6ATgIdAIBPgE8CHQCAUIBQAh0AgFGAUQIdAIBSgFICHQCAU4BTAh0AgFSAVAIdAIBVgFUCHQCAVoBWAh0AgFeAVwIdAIBYgFgCHQCAWYBZAh0AgFqAWgIdAIBbgFsCHQCAXIBcAh0AgF2AXQIdAIBegF4CHQCAX4BfAh0AgGCAYAIdAIBhgGECHQCAYoBiAh0AgGOAYwIdAIBkgGQCHQCAZYBlAh0AgGaAZgIdAIBngGcCHQCAaIBoAh0AgGmAaQIdAIBqgGoCHQCAa4BrAh0AgGyAbAIdAIBtgG0CHQCAboBuAh0AgG+AbwIdAIBwgHACHQCAcYBxAh0AgHKAcgIdAIBzgHMCHQCAdIB0Ah0AgHWAdQIdAIB2gHYCHQCAd4B3Ah0AgHiAeAIdAIB5gHkCHQCAeoB6Ah0AgHuAewIdAIB8gHwCHQCAfYB9Ah0AgH6AfgIdAIB/gH8CHQCAgICAAh0AgIGAgQIdAICCgIICHQCAg4CDAh0AgISAhAItCIBFAAEnAgACBIBGJgIGBB8sCAEFJgIHBCAAEAEHASYDBQQBACgFAgctBAACgAMtBAAHgAQtBAAGgAUkAAACgiwMBQInAgADBIBlJgIGBB8sCAEFJgIHBCAAEAEHASYDBQQBACgFAgctBAADgAMtBAAHgAQtBAAGgAUkAAACgiwMBQMtCICEAAQkAAACyCQAAALZJwIAAQSAhSYCAgQAOg0AAQACAQCAA4AFgActAIADgAgtAIAEgAkLAIAIgAeACiMAgAoAAALHLQGACIAGLQKABoAJAQCACAACgAgBAIAJAAKACSIAAAKWJSgAgEMAO5rKACcAgEQEAAMlJAAAC5csCAEHAAABAgEmAggBACwOCAcsCAEJAAABAgEmAgoAACwOCgksCAELAAABAgEmAgwAAiwODAseAgANADU4AA0ADgAPACYCEAEBIwIADwAAA0EiAAADNCwMCAUsDAoGIgAAA04sDBAFLAwOBiIAAANOIwIABQAAA18mAhEEADsJARE1OAANAAUAEQIjAgARAAADgiIAAAN1LAwIDiwMCg8iAAADjywMEA4sDAUPIgAAA48jAgAOAAADoCYCDQQAOwkBDSYCDQQAJgIOBAEsCAERJgISBAIAEAESASYDEQQBACgRAhIfPAANAA4AEgAoEQITADgTDRQsDRQSHAwSEwQcDBMRACYCEgRALAgBEyYCFARBABABFAEmAxMEAQAoEwIUHzwADgASABQmAhQALCwIARUmAhYEQgAQARYBJgMVBAEAKBUCFiYCFwRBADgXFhcsDBYYDDgYFxkWDBkZIwIAGQAABFEsDhQYACgYAhgiAAAEMiwIARQAAAECASwOFRQsDA0FIgAABGcMOAUSFSMCABUAAAsfIgAABHksDRQSLA0SEwAoEwITLA4TEioCABMAAAAAAAAAAEEAAAAAAAAAACYCGAQZLAgAGSwMExoAEAAYACQAAAvALAQAACwMGhQsDBsVLAwcFiwMHRcsDRQTACgTAhMsDhMULAgBEwAAAQIBLA4UEywNFRQAKBQCFCwOFBUsCAEUAAABAgEsDhUULAgBFQAAAQIBLA4WFSwIARYAAAECASwOFxYmAhcEQSwMDQUiAAAFJgw4BRcYIwIAGAAACq8iAAAFOCYCFwQYLAgAGCwMExksDBQaLAwVGywMFhwAEAAXACQAAAxnLAQAACwMGRImAhMADSwIARQmAhUEBAAQARUBJgMUBAEAKBQCFSwMFRYsDhMWACgWAhYsDhEWACgWAhYsDhIWLA0UEQAoEQIRLA4RFCoCABEAAAAAAAAAAAMAAAAAAAAAACYCFwQYLAgAGCwMERkAEAAXACQAAAvALAQAACwMGRIsDBoTLAwbFSwMHBYsDRIRACgRAhEsDhESLAgBEQAAAQIBLA4SESwNExIAKBICEiwOEhMsCAESAAABAgEsDhMSLAgBEwAAAQIBLA4VEywIARUAAAECASwOFhUsDA0FIgAABj4NKAAFgEQAFiMCABYAAAo/IgAABlMmAhYEFywIABcsDBEYLAwSGSwMExosDBUbABAAFgAkAAAMZywEAAAsDBgUCjgPFBEjAgARAAAGkCQAAAzrCjgGCg8eAgARAQo4BhESEjgPEgYjAgAGAAAGsSQAAAz9CjgBCgYKOAYIDyMCAA8AAAbIJAAADQ8mAgYAAS8MAAEABiwIAQ8mAhEEAwAQAREBJgMPBAEAKA8CESwMERIsDgwSACgSAhIsDgESKgIAAQAAAAAAAAAAAgAAAAAAAAAAJgIUBBUsCAAVLAwBFgAQABQAJAAAC8AsBAAALAwWDCwMFxEsDBgSLAwZEywNDAEAKAECASwOAQwsCAEBAAABAgEsDgwBLA0RDAAoDAIMLA4MESwIAQwAAAECASwOEQwsCAERAAABAgEsDhIRLAgBEgAAAQIBLA4TEiYCEwQCLAwNBSIAAAeYDDgFEw0jAgANAAAJzyIAAAeqJgINBBMsCAATLAwBFCwMDBUsDBEWLAwSFwAQAA0AJAAADGcsBAAALAwUBQo4BQoBCjgBCAwjAgAMAAAH7CQAAA0hLwwABgAFJgIFBBEsCAARLAwCEiwMEBMAEAAFACQAAA0zLAQAACwMEgEmAgIACCYCBQQRLAgAESwMBxIsDAkTLAwLFCwMAhUsDAEWABAABQAkAAAOLCwEAAAmAgIEESwIABEsDAMSLAwQEwAQAAIAJAAADTMsBAAALAwSASYCAgAGJgIDBAwsCAAMLAwHDSwMCQ4sDAsPLAwCECwMAREAEAADACQAAA4sLAQAACgCAAEAO5rKCi4MAAEAAgo4AgoDIwIAAwAACLkkAAAPXicCAAIA3q0vDAACAAEcDAQBACoCAAIAAAAAAAAAAAEAAAAAAAAAACYCBwQILAgACCwMAgkAEAAHACQAAAvALAQAACwMCQMsDAoELAwLBSwMDAYsDQMCACgCAgIsDgIDLAgBAgAAAQIBLA4DAiwNBAMAKAMCAywOAwQsCAEDAAABAgEsDgQDLAgBBAAAAQIBLA4FBCwIAQUAAAECASwOBgUmAgYEBywIAAcsDAIILAwDCSwMBAosDAULLAwBDAAQAAYAJAAAD3AsBAAAJgIHBAgsCAAILAwCCSwMAwosDAQLLAwFDAAQAAcAJAAADGcsBAAALAwJBiYCAgAKLwwAAQACJgIBAAsvDAAGAAEeAgABADMCAAElIwIADQAACdwiAAAKMSYCFAQCDDgFFBUjAgAVAAAJ8yQAABCfACgPAhQAOBQFFSwNFQ0mAhQEFSwIABUsDAEWLAwMFywMERgsDBIZLAwNGgAQABQAJAAAD3AsBAAAIgAACjEAOAUODSwMDQUiAAAHmCMCABYAAApMIgAACqEmAhcEAww4BRcYIwIAGAAACmMkAAAQnwAoFAIXADgXBRgsDRgWJgIXBBgsCAAYLAwRGSwMEhosDBMbLAwVHCwMFh0AEAAXACQAAA9wLAQAACIAAAqhADgFDhYsDBYFIgAABj4jAgAYAAAKvCIAAAsRJgIZBEEMOAUZGiMCABoAAArTJAAAEJ8AKBICGQA4GQUaLA0aGCYCGQQaLAgAGiwMExssDBQcLAwVHSwMFh4sDBgfABAAGQAkAAAPcCwEAAAiAAALEQA4BQ4YLAwYBSIAAAUmLA0UFQA4BQ4WJgIYBEAMOAUYGSMCABkAAAs/JAAAEJ8AKBMCGAA4GAUZLA0ZFyYCGQRBDDgWGRojAgAaAAALZCQAABCfLQQAFYADJwCABAQAQiQAABCxLQiABQAYACgYAhkAOBkWGiwOFxosDhgULAwWBSIAAARnJwCABAR4AA0AAACABIADIwCAAwAAC78pAQABBfeh86+lrdTKOwEBAiUkAAALlyYCAgAALAgBAyYCBAQEABABBAEmAwMEAQAoAwIELAwEBSwOAgUAKAUCBSwOAgUAKAUCBSwOAgUsDQMEACgEAgQsDgQDLAgBBCYCBQQFABABBQEmAwQEAQAoBAIFLAwFBiwOAgYAKAYCBiwOAgYAKAYCBiwOAgYAKAYCBiwOAQYmAgEEACYCAgEALAwCBSwMAQYsDAQCLAwFBCwMAwEsDAYDJSQAAAuXLA0EBSYCBgEACjgFBgcjAgAHAAAMiyYCCAQAOwkBCCYCBQQGLAgABiwMAQcsDAIILAwDCSwMBAoAEAAFACQAABE/LAQAACwNAQUsDQIGLA0DBywOBQEsDgYCLA4HAyYCAQEBLA4BBCYCAQQAACgGAgMAOAMBBCwNBAIsDAIBJSkBAAEF9IABplnTJ0I7AQECJSkBAAEFHwBQEkAkIu47AQECJSkBAAEFBQ+GBCPtFlk7AQECJSkBAAEFAtxuJ4B2Ep07AQECJSQAAAuXLAgBBAAAAQIBJgIFAAAsDgUELAgBBQAAAQIBJgIGAAEsDgYFJgIGBB8mAgcEASYCCAQAJwIACQABACwMCAMiAAANeww4AwYIIwIACAAADZIiAAANjSwNBAElLAgBCAAAAQIBLA4DCCMCAAIAAA2sIgAADdECOAYDCgI4CgcLDjgHCgwjAgAMAAANyCQAABKcLA4LCCIAAA3RLA0ECiwNCAsmAgwEHww4CwwNIwIADQAADfAkAAAQnwAoAQIMADgMCw0sDQ0IHAwICwAsDQUIBDgLCAwAOAoMCywOCwQEOAgJCiwOCgUAOAMHCCwMCAMiAAANeyQAAAuXATCAQwAEAAYuDAAGAAcmAggAAAo4BwgJIwIACQAADlYkAAAPXicCAAcA3q0vDAAHAAYqAgAGAAAAAAAAAAABAAAAAAAAAAAmAgsEDCwIAAwsDAYNABAACwAkAAALwCwEAAAsDA0HLAwOCCwMDwksDBAKLA0HBgAoBgIGLA4GBywIAQYAAAECASwOBwYsDQgHACgHAgcsDgcILAgBBwAAAQIBLA4IBywIAQgAAAECASwOCQgsCAEJAAABAgEsDgoJJgIKBAssCAALLAwGDCwMBw0sDAgOLAwJDywMBRAAEAAKACQAAA9wLAQAACYCCwQMLAgADCwMBg0sDAcOLAwIDywMCRAAEAALACQAAAxnLAQAACwMDQovDAAFAAQmAgUAAQA4BAUGLwwACgAGJSkBAAEFHwotJ9yCh6I7AQECJSQAAAuXLA0DBiwNBAcmAggBAAo4BwgJIwIACQAAD5gmAgoEADsJAQoLKAAGgEQAByYCBgQBIwIABwAAECsiAAAPsiwNAQcsDQIILA0DCSwNBAomAgwEAww4CQwNIwIADQAAD9kkAAAQny0EAAeAAycAgAQEAAQkAAAQsS0IgAUACwAoCwIMADgMCQ0sDgUNADgJBgUOOAkFByMCAAcAABAWJAAAEq4sDgsBLA4IAiwOBQMsDgoEIgAAEJ4mAgcECCwIAAgsDAEJLAwCCiwMAwssDAQMABAABwAkAAARPywEAAAsDQEHLA0CCCwNBAkmAgoEAC0EAAeAAycAgAQEAAQkAAAQsS0IgAUACwAoCwIMADgMCg0sDgUNLA4LASwOCAIsDgYDLA4JBCIAABCeJSkBAAEF6J0J/qERLQ47AQECJS0BgAOABgsAgAYAAoAHIwCABwAAEMwiAAAQ1y0AgAOABSIAABE+LQAAAYAFAQAAAYAEAAEBAIADgASACS0AgAOACi0AgAWACwsAgAqACYAMIwCADAAAESotAYAKgAgtAoAIgAsBAIAKAAKACgEAgAsAAoALIgAAEPknAYAFBAABAwCABgACgAYiAAARPiUkAAALlyYCBgQAJgIHBAEsDAYFIgAAEVcNKAAFgEQABiMCAAYAABHHIgAAEWwsDQEFLA0CBiwNAwcsDQQIJgIJBAQsCAEKJgILBAUAEAELASYDCgQBACgGAgsmAgwEBAAoCgINPg8ACwANLA0KBgAoBgIGLA4GCiwOBQEsDgoCLA4HAywOCAQlLA0DBgw4BQYIADgFBwYjAgAIAAAR4iIAABKTLA0BCCwNAgksDQMKLA0ECyYCDQQEDDgFDQ4jAgAOAAASCSQAABCfACgJAg0AOA0FDiwNDgwmAg4EAww4BQ4PIwIADwAAEi4kAAAQnwAoCAIOADgOBQ8sDQ8NADgMDQ4mAg0EBAw4BQ0PIwIADwAAElgkAAAQny0EAAmAAycAgAQEAAUkAAAQsS0IgAUADAAoDAINADgNBQ8sDg4PLA4IASwODAIsDgoDLA4LBCIAABKTLAwGBSIAABFXKQEAAQUohpKwR9z9QzsBAQIlKQEAAQVFp8pxGUHkFTsBAQIlLQAYyhjK",
      "debug_symbols": "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",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "process_log",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8861757336002045335": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 99
          },
          "9862881900111276825": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 35
          }
        },
        "parameters": [
          {
            "name": "log_plaintext",
            "type": {
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 18,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec"
            },
            "visibility": "private"
          },
          {
            "name": "tx_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "unique_note_hashes_in_tx",
            "type": {
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 64,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec"
            },
            "visibility": "private"
          },
          {
            "name": "first_nullifier_in_tx",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "process_log"
      ]
    },
    {
      "name": "cancel_authwit",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "inner_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "7ZfRjoIwEEX/pc8+zEzbaeuvbDYGFQ0JQYO4ycb471tcWyBWeXDX7Ca8tXK9czntFDiJdb48bhdFtdkdxPztJMrdKmuKXeVnJ4Hy8tthn1Xt9NBkdSPmyEwzkVfrdmjoPBOboszFnP3wRkzE5iomsi6KEVxK7ZS9qiUQjqiRldQxiVKdO1mZckfikAWVjmoJkHKXLIO5Qhio32cC1cTmLhs9sbnLhic2d9mYp9kocEGskGwUO3UpYH+7gHu6AEpQQSxlb3WJU2pAExbAj53sB0ptHetc3DvuJj/BP8+Pyfz+X7GI7wcz0l+AEO6XwJeJcmMTcsvR3BopRxrGqtgwVhk1opY6iBV17ZIkSQYjmUGMJHbTUTdOj4ghOiOw7Ytb5DQhfzVyOSF/NXKVRu606ZAb9xg5o4armtHqx0cd2i6Ph9+do/x90umfCEQ2bAEm5548e/lvJfKTZV2UZbFdDL5q4PJpk1xPchDelXxsGDI/++lHVhfZssxbo/bqsVoFXz9tPvfhSqi8r3erfH2s8zZDr3z7nEWeEXpbb/0F",
      "brillig_names": [
        "notify_created_nullifier_oracle_wrapper"
      ],
      "verification_key": "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"
    },
    {
      "name": "finalize_transfer_to_private",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "10536464181608181124": {
            "error_kind": "string",
            "string": "transfer not prepared"
          },
          "11859452850824495745": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ],
            "length": 60
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          }
        },
        "parameters": [
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          },
          {
            "name": "hiding_point_slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "finalize_transfer_to_private"
      ]
    },
    {
      "name": "burn_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          }
        },
        "parameters": [
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "burn_public"
      ]
    },
    {
      "name": "burn_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 17
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "15238796416211288225": {
            "error_kind": "string",
            "string": "Balance too low"
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6869395374906889440": {
            "error_kind": "string",
            "string": "Mismatch note header contract address."
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "get_notes_internal",
        "get_collapse_hints",
        "decompose_hint",
        "get_public_keys_and_partial_address",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "private_get_name",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "error_types": {
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2111772463301017956": {
            "error_kind": "string",
            "string": "Function private_get_name can only be called statically"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": true
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "minters",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "events": [
        {
          "fields": [
            {
              "name": "from",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "to",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "amount",
              "type": {
                "fields": [
                  {
                    "name": "lo",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "hi",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "std::uint128::U128"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::Transfer"
        }
      ],
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::transfer_to_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::transfer_to_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::private_get_decimals_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            }
          ],
          "kind": "struct",
          "path": "Token::private_get_decimals_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  },
                  {
                    "name": "hiding_point_slot",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::_finalize_transfer_to_private_unsafe_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::_finalize_transfer_to_private_unsafe_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::public_get_decimals_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            }
          ],
          "kind": "struct",
          "path": "Token::public_get_decimals_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "minter",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::is_minter_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::is_minter_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "minter",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "approve",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::set_minter_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::set_minter_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::mint_to_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::mint_to_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::total_supply_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "lo",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "hi",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "std::uint128::U128"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::total_supply_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "new_admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::set_admin_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::set_admin_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::_reduce_total_supply_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::_reduce_total_supply_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::private_get_name_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::private_get_name_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::_increase_public_balance_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::_increase_public_balance_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  },
                  {
                    "name": "hiding_point_slot",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::_finalize_mint_to_private_unsafe_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::_finalize_mint_to_private_unsafe_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "inner_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::cancel_authwit_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::cancel_authwit_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  },
                  {
                    "name": "hiding_point_slot",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::finalize_mint_to_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::finalize_mint_to_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "name",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "symbol",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "decimals",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::public_get_symbol_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::public_get_symbol_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::transfer_in_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::transfer_in_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  },
                  {
                    "name": "hiding_point_slot",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::finalize_transfer_to_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::finalize_transfer_to_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::get_admin_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::get_admin_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::balance_of_public_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "lo",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "hi",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "std::uint128::U128"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::balance_of_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "slot",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "point",
                    "type": {
                      "fields": [
                        {
                          "name": "x",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "y",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "is_infinite",
                          "type": {
                            "kind": "boolean"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                    }
                  },
                  {
                    "name": "setup_log",
                    "type": {
                      "kind": "array",
                      "length": 9,
                      "type": {
                        "kind": "field"
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::_store_payload_in_transient_storage_unsafe_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::_store_payload_in_transient_storage_unsafe_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::mint_to_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::mint_to_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::transfer_to_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::transfer_to_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "account",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::_recurse_subtract_balance_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "lo",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "hi",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "std::uint128::U128"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::_recurse_subtract_balance_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::transfer_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::transfer_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::prepare_private_balance_increase_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::prepare_private_balance_increase_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::public_get_name_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::public_get_name_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::private_get_symbol_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::private_get_symbol_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::burn_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::burn_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::transfer_in_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::transfer_in_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::burn_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::burn_private_abi"
        }
      ]
    }
  },
  "file_map": {
    "101": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/event.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    encrypted_logs::{\n        encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n        log_assembly_strategies::default_aes128::note::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES,\n        },\n    },\n    event::event_interface::EventInterface,\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    oracle::{\n        notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n        random::random,\n    },\n    utils::{bytes::{be_bytes_31_to_fields, get_random_bytes}, point::get_sign_of_point},\n};\nuse dep::protocol_types::{\n    address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS, traits::Serialize,\n};\nuse std::aes128::aes128_encrypt;\n\n/*\n * WHY IS THERE LOTS OF CODE DUPLICATION BETWEEN event.nr and note.nr?\n * It's because there are a few more optimisations that can be done for notes,\n * and so the stuff that looks like duplicated code currently, won't be\n * the same for long.\n * To modularise now feels premature, because we might get that modularisation wrong.\n * Much better (imo) to have a flattened templates for log assembly, because it\n * makes it much easier for us all to follow, it serves as a nice example for the\n * community to follow (if they wish to roll their own log layouts), and it gives\n * us more time to spot common patterns across all kinds of log layouts.\n *\n * There is some minimal de-duplication in common.nr.\n */\n\n/*\n * LOG CONFIGURATION CHOICES:\n *\n * deliver_to: INPUT as recipient: AztecAddress\n * encrypt_with: aes128 CBC (Cipher Block Chaining)\n * shared_secret: ephemeral\n * shared_secret_randomness_extraction_hash: sha256\n * tag: true\n * tag_from: INPUT as sender: AztecAddress\n *\n */\n\n/*\n * LOG LAYOUT CHOICE:\n *\n * As per ./note.nr, but replace `note_bytes` with `event_bytes`.\n */\n\n/// This particular log assembly strategy (AES 128) requires the event (and the\n/// event_type_id) to be converted into bytes, because the aes function\n/// operates on bytes; not fields.\n/// NB: The extra `+ 32` bytes is for the event_type_id:\nfn compute_event_plaintext_for_this_strategy<Event, let N: u32>(event: Event) -> [u8; N * 32 + 32]\nwhere\n    Event: EventInterface<N>,\n{\n    let serialized_event = Serialize::<N>::serialize(event);\n\n    let event_type_id_bytes: [u8; 32] = Event::get_event_type_id().to_field().to_be_bytes();\n\n    let mut plaintext_bytes = [0 as u8; N * 32 + 32];\n\n    for i in 0..32 {\n        plaintext_bytes[i] = event_type_id_bytes[i];\n    }\n\n    for i in 0..serialized_event.len() {\n        let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n        for j in 0..32 {\n            plaintext_bytes[32 + i * 32 + j] = bytes[j];\n        }\n    }\n\n    plaintext_bytes\n}\n\nfn compute_log<Event, let N: u32>(\n    context: PrivateContext,\n    event: Event,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Event: EventInterface<N>,\n{\n    // *****************************************************************************\n    // Compute the shared secret\n    // *****************************************************************************\n\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n    let ciphertext_shared_secret = derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n    // TODO: also use this shared secret for deriving note randomness.\n\n    // *****************************************************************************\n    // Optionally convert some/all of the event to bytes, so that we may then\n    // prepend/append extra bytes, in a tightly-packed way.\n    // *****************************************************************************\n\n    // This includes the note_id and the storage_slot of the note:\n    // TODO: the note_id doesn't need to be a full field; it can be a single byte.\n    let event_bytes = compute_event_plaintext_for_this_strategy(event);\n\n    // *****************************************************************************\n    // Prepend/append extra bytes\n    // *****************************************************************************\n\n    // \"Proper\" meaning the main meaty stuff that we care about.\n    let proper_plaintext = event_bytes;\n    let final_plaintext = proper_plaintext;\n\n    // *****************************************************************************\n    // Convert the plaintext into whatever format the encryption function expects\n    // *****************************************************************************\n\n    // Already done for this strategy: AES expects bytes.\n\n    // *****************************************************************************\n    // Encrypt the plaintext\n    // *****************************************************************************\n\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    let ciphertext_bytes = aes128_encrypt(final_plaintext, iv, sym_key);\n\n    assert(ciphertext_bytes.len() == 16 * (1 + ((N * 32) + 32) / 16));\n\n    // *****************************************************************************\n    // Compute the header ciphertext\n    // *****************************************************************************\n\n    // TODO: this header section will be deleted soon.\n    let contract_address = context.this_address();\n    let contract_address_bytes = contract_address.to_field().to_be_bytes::<32>();\n\n    let mut header_plaintext: [u8; 32 + 2] = [0; 32 + 2];\n    for i in 0..32 {\n        header_plaintext[i] = contract_address_bytes[i];\n    }\n    let offset = 32;\n    let ciphertext_bytes_length = ciphertext_bytes.len();\n    header_plaintext[offset] = (ciphertext_bytes_length >> 8) as u8;\n    header_plaintext[offset + 1] = ciphertext_bytes_length as u8;\n\n    // TODO: this is insecure and wasteful:\n    // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n    // and again for the proper ciphertext) (at least, I never got the\n    // \"go ahead\" that this would be safe, unfortunately).\n    // \"Wasteful\", because the exact same computation is happening further down.\n    // I'm leaving that 2nd computation where it is, because this 1st computation\n    // will be imminently deleted, when the header logic is deleted.\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n    // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n    // bytes larger than the input in this case.\n    let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n    // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n    assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n    // *****************************************************************************\n    // Prepend / append more bytes of data to the ciphertext, before converting back\n    // to fields.\n    // *****************************************************************************\n\n    let mut log_bytes_padding_to_mult_31 =\n        get_arr_of_size__log_bytes_padding__from_PT::<(N * 32) + 32>();\n    log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n    let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<(N * 32) + 32>();\n\n    log_bytes[0] = eph_pk_sign_byte;\n    let mut offset = 1;\n    for i in 0..header_ciphertext_bytes.len() {\n        log_bytes[offset + i] = header_ciphertext_bytes[i];\n    }\n    offset += header_ciphertext_bytes.len();\n\n    for i in 0..ciphertext_bytes.len() {\n        log_bytes[offset + i] = ciphertext_bytes[i];\n    }\n    offset += ciphertext_bytes.len();\n\n    for i in 0..log_bytes_padding_to_mult_31.len() {\n        log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n    }\n\n    // *****************************************************************************\n    // Convert bytes back to fields\n    // *****************************************************************************\n\n    let log_bytes_as_fields = be_bytes_31_to_fields(log_bytes);\n\n    // *****************************************************************************\n    // Prepend / append fields, to create the final log\n    // *****************************************************************************\n\n    // In this strategy, we prepend [tag, eph_pk.x]\n\n    // We assume that the sender wants for the recipient to find the tagged note,\n    // and therefore that they will cooperate and use the correct tag. Usage of a bad\n    // tag will result in the recipient not being able to find the note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut final_log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS] = [0; PRIVATE_LOG_SIZE_IN_FIELDS];\n\n    final_log[0] = tag;\n    final_log[1] = eph_pk.x;\n\n    let mut offset = 2;\n    for i in 0..log_bytes_as_fields.len() {\n        final_log[offset + i] = log_bytes_as_fields[i];\n    }\n    offset += log_bytes_as_fields.len();\n\n    for i in offset..PRIVATE_LOG_SIZE_IN_FIELDS {\n        final_log[i] = unsafe { random() };\n    }\n\n    final_log\n}\n\nunconstrained fn compute_log_unconstrained<Event, let N: u32>(\n    context: PrivateContext,\n    event: Event,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Event: EventInterface<N>,\n{\n    compute_log(context, event, recipient, sender)\n}\n\npub fn encode_and_encrypt_event<Event, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](Event) -> ()\nwhere\n    Event: EventInterface<N>,\n{\n    |e: Event| {\n        let encrypted_log = compute_log(*context, e, recipient, sender);\n        context.emit_private_log(encrypted_log);\n    }\n}\n\n// Important note: this function -- although called \"unconstrained\" -- the\n// function is not labelled as `unconstrained`, because we pass a reference to the\n// context.\npub fn encode_and_encrypt_event_unconstrained<Event, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](Event) -> ()\nwhere\n    Event: EventInterface<N>,\n{\n    |e: Event| {\n        // Unconstrained logs have both their content and encryption unconstrained - it could occur that the\n        // recipient is unable to decrypt the payload.\n        let encrypted_log = unsafe { compute_log_unconstrained(*context, e, recipient, sender) };\n        context.emit_private_log(encrypted_log);\n    }\n}\n"
    },
    "103": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/note.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    encrypted_logs::encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    oracle::{\n        notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n        random::random,\n    },\n    utils::{bytes::{be_bytes_31_to_fields, get_random_bytes}, point::get_sign_of_point},\n};\nuse dep::protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n};\nuse std::aes128::aes128_encrypt;\n\npub(crate) global HEADER_CIPHERTEXT_SIZE_IN_BYTES: u32 = 48; // contract_address (32) + ciphertext_length (2) + 16 bytes pkcs#7 AES padding.\n\n/*\n * WHY IS THERE LOTS OF CODE DUPLICATION BETWEEN event.nr and note.nr?\n * It's because there are a few more optimisations that can be done for notes,\n * and so the stuff that looks like duplicated code currently, won't be\n * the same for long.\n * To modularise now feels premature, because we might get that modularisation wrong.\n * Much better (imo) to have a flattened templates for log assembly, because it\n * makes it much easier for us all to follow, it serves as a nice example for the\n * community to follow (if they wish to roll their own log layouts), and it gives\n * us more time to spot common patterns across all kinds of log layouts.\n */\n\n/*\n * LOG CONFIGURATION CHOICES:\n *\n * deliver_to: INPUT as recipient: AztecAddress\n * encrypt_with: aes128 CBC (Cipher Block Chaining)\n * shared_secret: ephemeral\n * shared_secret_randomness_extraction_hash: sha256\n * tag: true\n * tag_from: INPUT as sender: AztecAddress\n *\n * Note-specific:\n * derive_note_randomness_from_shared_secret: false\n *\n */\n\n/*\n * LOG LAYOUT CHOICE:\n *\n * Short explanation:\n * log = [tag, epk, header_ct=[[contract_address, ct_len], pkcs7_pad], ct=[[pt], pkcs7_pad], some bytes padding, some fields padding]\n *\n * Long explanation:\n * tag: Field\n * epk: [Field, u8]\n * header_ct: [[u8; 32], [u8; 2], [u8; 16]]\n * ct: [[u8; 2], [u8; x], [u8; y]]\n *\n * More precisely (in pseudocode):\n *\n * log = [\n *     tag: Field,\n *     Epk: Field,\n *\n *     le_bytes_31_to_fields(\n *\n *         log_bytes: [\n *             eph_pk_sign: [u8; 1],\n *\n *             header_ciphertext: aes_encrypt(\n *                 contract_address: [u8; 32],\n *                 ct_length: [u8; 2],\n *\n *                 // the aes128_encrypt fn automatically inserts padding:\n *                 header_pt_aes_padding: [u8; 14], // `16 - (input.len() % 16)`\n\n *             ): [u8; 48],\n *\n *             ciphertext: aes_encrypt(\n *                 final_pt: [\n *                     pt: {\n *                         note_bytes: {\n *                             storage_slot: [u8; 32],\n *                             note_type_id: [u8; 32],\n *                             ...note: [u8; N * 32],\n *                         }: [u8; N * 32 + 64],\n *                     }: [u8; N * 32 + 64],\n\n *                 ]: [u8; N * 32 + 64],\n *\n *                 // the aes128_encrypt fn automatically inserts padding:\n *                 pt_aes_padding: [u8; 16 - ( (|pt_length| + |pt|) % 16 )]\n *\n *             ): [u8; |pt| + |pt_aes_padding|]\n *                [u8; |ct|]\n *\n *             log_bytes_padding_to_mult_31: [u8; 31 * ceil((1 + 48 + |ct|)/31) - (1 + 48 + |ct|)],\n *                                           [u8; p]\n *\n *         ]: [u8; 1 + 48 + |ct| + p]\n *\n *     ): [Field; (1 + 48 + |ct| + p) / 31]\n *\n *     log_fields_padding: [Field; PRIVATE_LOG_SIZE_IN_FIELDS - 2 - (1 + 48 + |ct| + p) / 31],\n *\n * ]: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\n *\n *\n */\n\n/********************************************************/\n// Disgusting arithmetic on generics\n/********************************************************/\n\n// In this section, instead of initialising arrays with very complicated generic\n// arithmetic, such as:\n// let my_arr: [u8; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))] = [0; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))];\n//... we instead do the arithmetic a little bit at a time, so that the computation\n// can be audited and understood. Now, we can't do arithmetic on generics in the body\n// of a function, so we abusing functions in the following way:\n\n// |full_pt| = |pt| = (N * 32) + 64\nfn get_arr_of_size__full_plaintext<let PT: u32>() -> [u8; PT] {\n    [0; PT]\n}\n\n// |pt_aes_padding| = 16 - (|full_pt| % 16)\nfn get_arr_of_size__plaintext_aes_padding<let FULL_PT: u32>(\n    _full_pt: [u8; FULL_PT],\n) -> [u8; 16 - (FULL_PT % 16)] {\n    [0; 16 - (FULL_PT % 16)]\n}\n\n// |ct| = |full_pt| + |pt_aes_padding|\nfn get_arr_of_size__ciphertext<let FULL_PT: u32, let PT_AES_PADDING: u32>(\n    _full_pt: [u8; FULL_PT],\n    _pt_aes_padding: [u8; PT_AES_PADDING],\n) -> [u8; FULL_PT + PT_AES_PADDING] {\n    [0; FULL_PT + PT_AES_PADDING]\n}\n\n// Ok, so we have the following bytes:\n// eph_pk_sign, header_ciphertext, ciphertext:\n// Let lbwop = 1 + 48 + |ct| // aka log bytes without padding\nfn get_arr_of_size__log_bytes_without_padding<let CT: u32>(_ct: [u8; CT]) -> [u8; 1 + 48 + CT] {\n    [0; 1 + 48 + CT]\n}\n\n// Recall:\n//   lbwop := 1 + 48 + |ct| // aka log bytes without padding\n// We now want to pad b to the next multiple of 31, so as to \"fill\" fields.\n// Let p be that padding.\n// p = 31 * ceil(lbwop / 31) - lbwop\n//   = 31 * ((lbwop + 30) // 31) - lbwop\n//     (because ceil(x / y) = (x + y - 1) // y ).\nfn get_arr_of_size__log_bytes_padding<let LBWOP: u32>(\n    _lbwop: [u8; LBWOP],\n) -> [u8; (31 * ((LBWOP + 30) / 31)) - LBWOP] {\n    [0; (31 * ((LBWOP + 30) / 31)) - LBWOP]\n}\n\n// |log_bytes| = 1 + 48 + |ct| + p // aka log bytes (with padding)\n// Recall:\n//   lbwop := 1 + 48 + |ct|\n//   p is the padding\nfn get_arr_of_size__log_bytes<let LBWOP: u32, let P: u32>(\n    _lbwop: [u8; LBWOP],\n    _p: [u8; P],\n) -> [u8; LBWOP + P] {\n    [0; LBWOP + P]\n}\n\n// The return type is pasted from the LSP's expectation, because it was too difficult\n// to match its weird way of doing algebra. It doesn't know all rules of arithmetic.\n// PT is the plaintext length.\npub(crate) fn get_arr_of_size__log_bytes_padding__from_PT<let PT: u32>() -> [u8; ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49))] {\n    let full_pt = get_arr_of_size__full_plaintext::<PT>();\n    let pt_aes_padding = get_arr_of_size__plaintext_aes_padding(full_pt);\n    let ct = get_arr_of_size__ciphertext(full_pt, pt_aes_padding);\n    let lbwop = get_arr_of_size__log_bytes_without_padding(ct);\n    let p = get_arr_of_size__log_bytes_padding(lbwop);\n    p\n}\n\n// The return type is pasted from the LSP's expectation, because it was too difficult\n// to match its weird way of doing algebra. It doesn't know all rules of arithmetic.\npub(crate) fn get_arr_of_size__log_bytes__from_PT<let PT: u32>() -> [u8; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))] {\n    let full_pt = get_arr_of_size__full_plaintext::<PT>();\n    let pt_aes_padding = get_arr_of_size__plaintext_aes_padding(full_pt);\n    let ct = get_arr_of_size__ciphertext(full_pt, pt_aes_padding);\n    let lbwop = get_arr_of_size__log_bytes_without_padding(ct);\n    let p = get_arr_of_size__log_bytes_padding(lbwop);\n    let log_bytes = get_arr_of_size__log_bytes(lbwop, p);\n    log_bytes\n}\n\n/********************************************************/\n// End of disgusting arithmetic on generics\n/********************************************************/\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<Note, let N: u32>(context: PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\n/// This particular log assembly strategy (AES 128) requires the note (and the\n/// note_id and the storage_slot) to be converted into bytes, because the aes function\n/// operates on bytes; not fields.\n/// NB: The extra `+ 64` bytes is for the note_id and the storage_slot of the note:\nfn compute_note_plaintext_for_this_strategy<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n) -> [u8; N * 32 + 64]\nwhere\n    Note: NoteInterface<N>,\n{\n    let packed_note = note.pack_content();\n\n    let note_header = note.get_header();\n    let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n\n    // TODO(#10952): The following can be reduced to 7 bits\n    let note_type_id_bytes: [u8; 32] = Note::get_note_type_id().to_be_bytes();\n\n    // We combine all the bytes into plaintext_bytes:\n    let mut plaintext_bytes: [u8; N * 32 + 64] = [0; N * 32 + 64];\n    for i in 0..32 {\n        plaintext_bytes[i] = storage_slot_bytes[i];\n        plaintext_bytes[32 + i] = note_type_id_bytes[i];\n    }\n\n    for i in 0..packed_note.len() {\n        let bytes: [u8; 32] = packed_note[i].to_be_bytes();\n        for j in 0..32 {\n            plaintext_bytes[64 + i * 32 + j] = bytes[j];\n        }\n    }\n\n    plaintext_bytes\n}\n\nfn compute_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteInterface<N>,\n{\n    // *****************************************************************************\n    // Compute the shared secret\n    // *****************************************************************************\n\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n    let ciphertext_shared_secret = derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient); // not to be confused with the tagging shared secret\n\n    // TODO: also use this shared secret for deriving note randomness.\n\n    // *****************************************************************************\n    // Compute the plaintext\n    // *****************************************************************************\n\n    let final_plaintext_bytes = compute_note_plaintext_for_this_strategy(note, storage_slot);\n\n    // *****************************************************************************\n    // Convert the plaintext into whatever format the encryption function expects\n    // *****************************************************************************\n\n    // Already done for this strategy: AES expects bytes.\n\n    // *****************************************************************************\n    // Encrypt the plaintext\n    // *****************************************************************************\n\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    let ciphertext_bytes = aes128_encrypt(final_plaintext_bytes, iv, sym_key);\n\n    // |full_pt| = |pt_length| + |pt|\n    // |pt_aes_padding| = 16 - (|full_pt| % 16)\n    // or... since a % b is the same as a - b * (a // b) (integer division), so:\n    // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n    // |ct| = |full_pt| + |pt_aes_padding|\n    //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n    //      = 16 + 16 * (|full_pt| // 16)\n    //      = 16 * (1 + |full_pt| // 16)\n    assert(ciphertext_bytes.len() == 16 * (1 + ((N * 32) + 64) / 16));\n\n    // *****************************************************************************\n    // Compute the header ciphertext\n    // *****************************************************************************\n\n    let contract_address = context.this_address();\n    let contract_address_bytes = contract_address.to_field().to_be_bytes::<32>();\n\n    let mut header_plaintext: [u8; 32 + 2] = [0; 32 + 2];\n    for i in 0..32 {\n        header_plaintext[i] = contract_address_bytes[i];\n    }\n    let offset = 32;\n    let ciphertext_bytes_length = ciphertext_bytes.len();\n    header_plaintext[offset] = (ciphertext_bytes_length >> 8) as u8;\n    header_plaintext[offset + 1] = ciphertext_bytes_length as u8;\n\n    // TODO: this is insecure and wasteful:\n    // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n    // and again for the proper ciphertext) (at least, I never got the\n    // \"go ahead\" that this would be safe, unfortunately).\n    // \"Wasteful\", because the exact same computation is happening further down.\n    // I'm leaving that 2nd computation where it is, because this 1st computation\n    // will be imminently deleted, when the header logic is deleted.\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n    // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n    // bytes larger than the input in this case.\n    let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n    // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n    assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n    // *****************************************************************************\n    // Prepend / append more bytes of data to the ciphertext, before converting back\n    // to fields.\n    // *****************************************************************************\n\n    let mut log_bytes_padding_to_mult_31 =\n        get_arr_of_size__log_bytes_padding__from_PT::<(N * 32) + 64>();\n    /// Safety: this randomness won't be constrained to be random. It's in the\n    /// interest of the executor of this fn to encrypt with random bytes.\n    log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n    let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<(N * 32) + 64>();\n\n    assert(\n        log_bytes.len() % 31 == 0,\n        \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n    );\n\n    log_bytes[0] = eph_pk_sign_byte;\n    let mut offset = 1;\n    for i in 0..header_ciphertext_bytes.len() {\n        log_bytes[offset + i] = header_ciphertext_bytes[i];\n    }\n    offset += header_ciphertext_bytes.len();\n\n    for i in 0..ciphertext_bytes.len() {\n        log_bytes[offset + i] = ciphertext_bytes[i];\n    }\n    offset += ciphertext_bytes.len();\n\n    for i in 0..log_bytes_padding_to_mult_31.len() {\n        log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n    }\n\n    assert(\n        offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n        \"Something has gone wrong\",\n    );\n\n    // *****************************************************************************\n    // Convert bytes back to fields\n    // *****************************************************************************\n\n    let log_bytes_as_fields = be_bytes_31_to_fields(log_bytes);\n\n    // *****************************************************************************\n    // Prepend / append fields, to create the final log\n    // *****************************************************************************\n\n    // In this strategy, we prepend [tag, eph_pk.x]\n\n    // We assume that the sender wants for the recipient to find the tagged note,\n    // and therefore that they will cooperate and use the correct tag. Usage of a bad\n    // tag will result in the recipient not being able to find the note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut final_log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS] = [0; PRIVATE_LOG_SIZE_IN_FIELDS];\n\n    final_log[0] = tag;\n    final_log[1] = eph_pk.x;\n\n    let mut offset = 2;\n    for i in 0..log_bytes_as_fields.len() {\n        final_log[offset + i] = log_bytes_as_fields[i];\n    }\n    offset += log_bytes_as_fields.len();\n\n    for i in offset..PRIVATE_LOG_SIZE_IN_FIELDS {\n        /// Safety: randomness cannot be constrained.\n        final_log[i] = unsafe { random() };\n    }\n\n    final_log\n}\n\nunconstrained fn compute_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteInterface<N>,\n{\n    compute_log(context, note, storage_slot, recipient, sender)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        assert_note_exists(*context, note);\n\n        let note_hash_counter = note.get_header().note_hash_counter;\n\n        let encrypted_log = compute_log(*context, note, storage_slot, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n// Important note: this function -- although called \"unconstrained\" -- the\n// function is not labelled as `unconstrained`, because we pass a reference to the\n// context.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        assert_note_exists(*context, note);\n\n        let note_hash_counter = note.get_header().note_hash_counter;\n\n        //   Unconstrained logs have both their content and encryption unconstrained - it could occur that the\n        // recipient is unable to decrypt the payload.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        //   It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        let encrypted_log =\n            unsafe { compute_log_unconstrained(*context, note, storage_slot, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\nmod test {\n    use crate::test::{helpers::test_environment::TestEnvironment, mocks::mock_note::MockNote};\n    use dep::protocol_types::address::AztecAddress;\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n        let mut context = env.private();\n\n        // I'm not sure how to initialise an `env` or `context` with a consistent contract address for every run of this test; the value kept changing each time. So I'm going to overwrite it now:\n        context.inputs.call_context.contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        ); // This is an address copied to match the typescript one.\n\n        let storage_slot = 42;\n        let note = MockNote::new(1234).contract_address(context.this_address()).build();\n        let contract_address = context.this_address();\n\n        // All the values in this test were copied over from `encrypted_log_payload.test.ts`\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n\n        let plaintext = super::compute_note_plaintext_for_this_strategy(note, storage_slot);\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let sender = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns([69420, 1337]);\n\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let payload = super::compute_log(context, note, storage_slot, recipient, sender);\n\n        // The following value was generated by `encrypted_log_payload.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let private_log_payload_from_typescript = [\n            0x0e9cffc3ddd746affb02410d8f0a823e89939785bcc8e88ee4f3cae05e737c36,\n            0x0d460c0e434d846ec1ea286e4090eb56376ff27bddc1aacae1d856549f701fa7,\n            0x000194e6d7872db8f61e8e59f23580f4db45d13677f873ec473a409cf61fd04d,\n            0x00334e5fb6083721f3eb4eef500876af3c9acfab0a1cb1804b930606fdb0b283,\n            0x00af91db798fa320746831a59b74362dfd0cf9e7c239f6aad11a4b47d0d870ee,\n            0x00d25a054613a83be7be8512f2c09664bc4f7ab60a127b06584f476918581b8a,\n            0x003840d100d8c1d78d4b68b787ed353ebfb8cd2987503d3b472f614f25799a18,\n            0x003f38322629d401010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n        ];\n\n        assert_eq(payload, private_log_payload_from_typescript);\n    }\n}\n"
    },
    "104": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/partial_note.nr",
      "source": "// THIS FILE WILL GO AWAY WHEN WE REFACTOR PARTIAL NOTES, SO I DON'T FEEL TOO\n// GUILTY ABOUT THE OBVIOUS CODE DUPLICATION VS note.nr & event.nr.\n\nuse crate::{\n    encrypted_logs::{\n        encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n        log_assembly_strategies::default_aes128::note::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES,\n        },\n    },\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    utils::{bytes::{be_bytes_31_to_fields, get_random_bytes}, point::get_sign_of_point},\n};\nuse dep::protocol_types::{address::{aztec_address::ToField, AztecAddress}, hash::poseidon2_hash};\nuse std::aes128::aes128_encrypt;\n\npub fn compute_partial_public_log_payload<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    plaintext: [u8; N],\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; M] {\n    // *****************************************************************************\n    // Compute the shared secret\n    // *****************************************************************************\n\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n    let ciphertext_shared_secret = derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient); // not to be confused with the tagging shared secret\n\n    // TODO: also use this shared secret for deriving note randomness.\n\n    // *****************************************************************************\n    // Prepend/append extra bytes\n    // *****************************************************************************\n\n    // \"Proper\" meaning the main meaty stuff that we care about.\n    let proper_plaintext: [u8; N] = plaintext;\n    let final_plaintext = proper_plaintext;\n\n    // *****************************************************************************\n    // Convert the plaintext into whatever format the encryption function expects\n    // *****************************************************************************\n\n    // Already done for this strategy: AES expects bytes.\n\n    // *****************************************************************************\n    // Encrypt\n    // *****************************************************************************\n\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    let ciphertext_bytes = aes128_encrypt(final_plaintext, iv, sym_key);\n\n    assert(ciphertext_bytes.len() == 16 * (1 + (2 + N) / 16));\n\n    // *****************************************************************************\n    // Compute the header ciphertext\n    // *****************************************************************************\n\n    let contract_address_bytes = contract_address.to_field().to_be_bytes::<32>();\n\n    let mut header_plaintext: [u8; 32 + 2] = [0; 32 + 2];\n    for i in 0..32 {\n        header_plaintext[i] = contract_address_bytes[i];\n    }\n    let offset = contract_address_bytes.len();\n\n    let ciphertext_bytes_length = ciphertext_bytes.len();\n    header_plaintext[offset] = (ciphertext_bytes_length >> 8) as u8;\n    header_plaintext[offset + 1] = ciphertext_bytes_length as u8;\n\n    // TODO: this is insecure and wasteful:\n    // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n    // and again for the proper ciphertext) (at least, I never got the\n    // \"go ahead\" that this would be safe, unfortunately).\n    // \"Wasteful\", because the exact same computation is happening further down.\n    // I'm leaving that 2nd computation where it is, because this 1st computation\n    // will be imminently deleted, when the header logic is deleted.\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n    // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n    // bytes larger than the input in this case.\n    let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n    // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n    assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n    // *****************************************************************************\n    // Prepend / append more bytes of data to the ciphertext, before converting back\n    // to fields.\n    // *****************************************************************************\n\n    let mut log_bytes_padding_to_mult_31 = get_arr_of_size__log_bytes_padding__from_PT::<2 + N>();\n    log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n    let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<2 + N>();\n\n    log_bytes[0] = eph_pk_sign_byte;\n    let mut offset = 1;\n    for i in 0..header_ciphertext_bytes.len() {\n        log_bytes[offset + i] = header_ciphertext_bytes[i];\n    }\n    offset += header_ciphertext_bytes.len();\n\n    for i in 0..ciphertext_bytes.len() {\n        log_bytes[offset + i] = ciphertext_bytes[i];\n    }\n    offset += ciphertext_bytes.len();\n\n    for i in 0..log_bytes_padding_to_mult_31.len() {\n        log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n    }\n\n    // *****************************************************************************\n    // Convert bytes back to fields\n    // *****************************************************************************\n\n    let log_bytes_as_fields = be_bytes_31_to_fields(log_bytes);\n\n    // *****************************************************************************\n    // Prepend / append fields, to create the final log\n    // *****************************************************************************\n\n    // We don't add any extra random padding.\n    // Whilst we do this in note.nr, we won't do it for this partial_note log, because it's going to get stored in public, and so:\n    // - The nature of the tx is going to be leaked.\n    // - We therefore don't care if it's padded to obscure the length of the actual ciphertext.\n    // Note: partial logs are going to be greatly refactored, soon.\n\n    // We assume that the sender wants for the recipient to find the tagged note, and therefore that they will cooperate\n    // and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the note\n    // automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    // Silo the tag with contract address.\n    // This is done by the kernel circuit to the private logs, but since the partial log will be finalized and emitted\n    // in public as unencrypted log, its tag is not siloed at the moment.\n    // To avoid querying logs using two types of tags, we silo the tag manually here.\n    // TODO(#10273) This should be done by the AVM when it's processing the raw logs instead of their hashes.\n    let siloed_tag = poseidon2_hash([contract_address.to_field(), tag]);\n\n    // Temporary hack so that the partial public log remains the same format.\n    // It should return field array and make the tag the first field as compute_private_log_payload does.\n\n    let mut final_log: [Field; M] = [0; M];\n\n    final_log[0] = siloed_tag;\n    final_log[1] = eph_pk.x;\n\n    let mut offset = 2;\n    for i in 0..log_bytes_as_fields.len() {\n        final_log[offset + i] = log_bytes_as_fields[i];\n    }\n\n    final_log\n}\n"
    },
    "109": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::Hash,\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "116": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        /// Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "118": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr",
      "source": "use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::embedded_curve_ops::multi_scalar_mul;\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n"
    },
    "119": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr",
      "source": "use std::{\n    embedded_curve_ops::fixed_base_scalar_mul, field::bn254::decompose,\n    hash::from_field_unsafe as fr_to_fq_unsafe,\n};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n"
    },
    "120": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    /// Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "126": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "135": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/note/discovery/mod.nr",
      "source": "use std::static_assert;\n\nuse crate::{\n    context::unconstrained_context::UnconstrainedContext, note::note_header::NoteHeader,\n    oracle::note_discovery::deliver_note, utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PRIVATE_LOG_SIZE_IN_FIELDS},\n    hash::compute_note_hash_nonce,\n};\n\n// We reserve two fields in the note log that are not part of the note content: one for the storage slot, and one for\n// the note type id.\nglobal NOTE_LOG_RESERVED_FIELDS: u32 = 2;\npub global MAX_NOTE_SERIALIZED_LEN: u32 = PRIVATE_LOG_SIZE_IN_FIELDS - NOTE_LOG_RESERVED_FIELDS;\n\npub struct NoteHashesAndNullifier {\n    pub note_hash: Field,\n    pub unique_note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Processes a log given its plaintext by trying to find notes encoded in it. This process involves the discovery of\n/// the nonce of any such notes, which requires knowledge of the transaction hash in which the notes would've been\n/// created, along with the list of unique note hashes in said transaction.\n///\n/// Additionally, this requires a `compute_note_hash_and_nullifier` lambda that is able to compute these values for any\n/// note in the contract given their contents. A typical implementation of such a function would look like this:\n///\n/// ```\n/// |packed_note_content, note_header, note_type_id| {\n///     let hashes = if note_type_id == MyNoteType::get_note_type_id() {\n///         assert(packed_note_content.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///         dep::aztec::note::utils::compute_note_hash_and_optionally_a_nullifier(\n///             MyNoteType::unpack_content,\n///             note_header,\n///             true,\n///             storage_slot,\n///             packed_note_content.storage(),\n///         )\n///     } else {\n///         panic(f\"Unknown note type id {note_type_id}\")\n///     };\n///\n///     Option::some(dep::aztec::oracle::management::NoteHashesAndNullifier {\n///         note_hash: hashes[0],\n///         unique_note_hash: hashes[1],\n///         inner_nullifier: hashes[3],\n///     })\n/// }\n/// ```\npub unconstrained fn do_process_log<Env>(\n    context: UnconstrainedContext,\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: fn[Env](BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>, NoteHeader, Field, Field) -> Option<NoteHashesAndNullifier>,\n) {\n    let (storage_slot, note_type_id, packed_note_content) =\n        destructure_log_plaintext(log_plaintext);\n\n    // We need to find the note's nonce, which is the one that results in one of the unique note hashes from tx_hash\n    for_each_in_bounded_vec(\n        unique_note_hashes_in_tx,\n        |expected_unique_note_hash, i| {\n            let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n            let header = NoteHeader::new(context.this_address(), candidate_nonce);\n\n            // TODO(#11157): handle failed note_hash_and_nullifier computation\n            let hashes = compute_note_hash_and_nullifier(\n                packed_note_content,\n                header,\n                storage_slot,\n                note_type_id,\n            )\n                .unwrap();\n\n            if hashes.unique_note_hash == expected_unique_note_hash {\n                // TODO(#10726): push these into a vec to deliver all at once instead of having one oracle call per note\n\n                assert(\n                    deliver_note(\n                        context.this_address(), // TODO(#10727): allow other contracts to deliver notes\n                        storage_slot,\n                        candidate_nonce,\n                        packed_note_content,\n                        hashes.note_hash,\n                        hashes.inner_nullifier,\n                        tx_hash,\n                        recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n\n                // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n                // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n                // notes containing random values in order to hide their contents.\n            }\n        },\n    );\n}\n\nunconstrained fn destructure_log_plaintext(\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>) {\n    assert(log_plaintext.len() >= NOTE_LOG_RESERVED_FIELDS);\n\n    // If NOTE_LOG_RESERVED_FIELDS is changed, causing the assertion below to fail, then the declarations for\n    // `storage_slot` and `note_type_id` must be updated as well.\n    static_assert(\n        NOTE_LOG_RESERVED_FIELDS == 2,\n        \"unepxected value for NOTE_LOG_RESERVED_FIELDS\",\n    );\n    let storage_slot = log_plaintext.get(0);\n    let note_type_id = log_plaintext.get(1);\n\n    let packed_note_content = array::subbvec(log_plaintext, NOTE_LOG_RESERVED_FIELDS);\n\n    (storage_slot, note_type_id, packed_note_content)\n}\n\nfn for_each_in_bounded_vec<T, let MaxLen: u32, Env>(\n    vec: BoundedVec<T, MaxLen>,\n    f: fn[Env](T, u32) -> (),\n) {\n    for i in 0..MaxLen {\n        if i < vec.len() {\n            f(vec.get_unchecked(i), i);\n        }\n    }\n}\n"
    },
    "136": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
      "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_header::NoteHeader,\n    note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_nullify_internal, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note_content = Note::pack_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        packed_note_content,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note, storage_slot)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note, storage_slot: Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note, storage_slot);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"
    },
    "138": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/note/note_emission.nr",
      "source": "/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field) -> Self {\n        Self { note, storage_slot }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"
    },
    "140": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\nuse dep::protocol_types::constants::{\n    GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note_content: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note_content[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(context: PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n}\n\nfn check_note_content<let N: u32>(\n    packed_note_content: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note_content, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (Note, Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    /// Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    /// is check that the metadata is correct, and that the note exists.\n    let note = unsafe { get_note_internal(storage_slot) };\n    check_note_header(*context, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    /// Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::array::collapse(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\n        BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.pack_content();\n            check_note_header(*context, note);\n            check_note_content(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\nwhere\n    Note: NoteInterface<N>,\n{\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length,\n    )[0]\n        .expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteInterface<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteInterface<N>,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
    },
    "145": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr",
      "source": "use crate::note::constants::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{NoteStatus, PropertySelector, Select, Sort};\nuse crate::note::note_interface::NoteInterface;\nuse dep::protocol_types::traits::ToField;\nuse std::option::Option;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    pub selects: BoundedVec<Option<Select>, N>,\n    pub sorts: BoundedVec<Option<Sort>, N>,\n    pub limit: u32,\n    pub offset: u32,\n    pub status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N>\n    where\n        Note: NoteInterface<N>,\n    {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE,\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T,\n    ) -> Self\n    where\n        T: ToField,\n    {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        if !dep::std::runtime::is_unconstrained() {\n            assert_constant(limit);\n        }\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"
    },
    "146": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\n    utils::array,\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    compute_unique_note_hash,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header, storage_slot);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash(storage_slot);\n    let header = note.get_header();\n    let nonce = header.nonce;\n    let counter = header.note_hash_counter;\n\n    // If same tx note, read request always uses the normal note hash\n    if counter != 0 {\n        note_hash\n    } else {\n        // If the note comes from a different tx, we need to compute the note hash that reached the tree\n        compute_unique_note_hash(\n            nonce,\n            compute_siloed_note_hash(header.contract_address, note_hash),\n        )\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if (header.note_hash_counter != 0) & (header.nonce != 0) {\n        // Non-revertible note, nullified by a revertible nullifier, we need to nullify the note hash that will reach the tree\n        let siloed_note_hash =\n            compute_siloed_note_hash(header.contract_address, note_hash_for_read_request);\n\n        compute_unique_note_hash(header.nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note, storage_slot: Field) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note, storage_slot);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    unpack_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    storage_slot: Field,\n    packed_note_content: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = unpack_content(array::subarray(packed_note_content, 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash(storage_slot);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, note_hash);\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context(storage_slot)\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"
    },
    "149": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "151": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "152": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "153": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field]) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values) };\n}\n\npub unconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field]) {\n    let _ = store_in_execution_cache_oracle(values);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field]) -> Field {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "154": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, constants::CONTRACT_INSTANCE_LENGTH, contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    /// Safety: The to_address function combines all values in the instance object to produce an address,\n    /// so by checking that we get the expected address we validate the entire struct.\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "158": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use crate::utils::array;\nuse dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage {\n            slot: fields[1],\n            value: fields[2],\n            next_index: fields[3] as u32,\n            next_slot: fields[4],\n        },\n        path: array::subarray(fields, 1 + LEAF_PREIMAGE_LENGTH),\n    }\n}\n"
    },
    "159": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use dep::protocol_types::abis::validation_requests::{\n    key_validation_request::KEY_VALIDATION_REQUEST_LENGTH, KeyValidationRequest,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"
    },
    "160": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "163": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/oracle/note_discovery.nr",
      "source": "use crate::note::discovery::MAX_NOTE_SERIALIZED_LEN;\nuse dep::protocol_types::address::AztecAddress;\n\n/// Informs PXE of a note's existence so that it can later retrieved by the `getNotes` oracle. The note will be scoped\n/// to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The note's `content` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value is\n/// typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are the\n/// inner hashes, i.e. the raw hashes returned by `NoteInterface::compute_note_hash` and\n/// `NullifiableNote::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree at\n/// `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was sucessfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    content: BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        content,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    content: BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n"
    },
    "164": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note_content,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        packed_note_content,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note_content: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    let _ = notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    sync_notes_oracle_wrapper();\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let note_content = array::subarray(fields, read_offset + 2);\n\n            let mut note = Note::unpack_content(note_content);\n            note.set_header(NoteHeader { contract_address, nonce, note_hash_counter });\n\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\n}\n\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\n/// Includes the last known index used to send a note tagged with this secret.\n/// For this to work, PXE must know the ivsk_m of the sender.\n/// For the recipient's side, only the address is needed.\npub unconstrained fn get_indexed_tagging_secret_as_sender(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> IndexedTaggingSecret {\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\n    IndexedTaggingSecret::deserialize(result)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\n/// for later querying via the `get_notes` oracle.\npub fn sync_notes() {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        sync_notes_oracle_wrapper();\n    }\n}\n\nunconstrained fn sync_notes_oracle_wrapper() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n"
    },
    "165": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
      "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
    },
    "166": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::Packable};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "168": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "17": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"
    },
    "173": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr",
      "source": "use crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // TODO: This function is still around because of a stale blacklist token. It should most likely be nuked. If you\n    // need this functionality use partial notes instead.\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"
    },
    "175": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: U128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    // docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read(self) -> T {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub unconstrained fn read(self) -> T {\n        WithHash::unconstrained_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PrivateContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub fn read(self) -> T {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "176": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "18": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    /// Safety: borrow is enforced to be boolean due to its type.\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        /// Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            /// Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        /// Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "19": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "195": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr",
      "source": "/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    /// Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n"
    },
    "197": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "198": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    vec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(vec.storage(), offset), vec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "199": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/utils/bytes.nr",
      "source": "use crate::oracle::random::random;\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole bytes.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted into a Field. If the last chunk\n/// is less than 31 bytes long, then only the relevant bytes are considered.\n/// For example, [1, 10, 3] is encoded as [1 * 256^2 + 10 * 256 + 3]\n/// Note: ceil(N / 31) = (N + 30) / 31\npub fn be_bytes_31_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = [0; (N + 30) / 31];\n\n    // There are N / 31 whole fields that can be populated.\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    // Note: if 31 divides N, then this loop does not execute.\n    // ceil(N/31) - floor(N/31) = 1, unless 31 divides N, in which case it's 0.\n    for _ in 0..((N + 30) / 31) - (N / 31) {\n        let mut final_field = 0;\n        let final_field_idx = fields.len() - 1;\n        let final_offset = final_field_idx * 31;\n        // N - ((N / 31) * 31) = N - floor(N/31) * 31 = the number of bytes to go in the final field.\n        for j in 0..N - ((N / 31) * 31) {\n            // Shift the existing value left by 8 bits and add the new byte\n            final_field = final_field * 256 + bytes[final_offset + j] as Field;\n        }\n\n        fields[final_field_idx] = final_field;\n    }\n\n    fields\n}\n\npub fn le_bytes_31_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = [0; (N + 30) / 31];\n\n    // There are N / 31 whole fields that can be populated.\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            let k = 31 - j - 1; // iterate in reverse.\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + k] as Field;\n        }\n        fields[i] = field;\n    }\n\n    // Note: if 31 divides N, then this loop does not execute.\n    // ceil(N/31) - floor(N/31) = 1, unless 31 divides N, in which case it's 0.\n    for _ in 0..((N + 30) / 31) - (N / 31) {\n        let mut final_field = 0;\n        let final_field_idx = fields.len() - 1;\n        let final_offset = final_field_idx * 31;\n        // N - ((N / 31) * 31) = N - floor(N/31) * 31 = the number of bytes to go in the final field.\n        for j in 0..N - ((N / 31) * 31) {\n            let k = (N - ((N / 31) * 31)) - j - 1; // iterate in reverse.\n            // Shift the existing value left by 8 bits and add the new byte\n            final_field = final_field * 256 + bytes[final_offset + k] as Field;\n        }\n        fields[final_field_idx] = final_field;\n    }\n\n    fields\n}\n\n/// Converts an input array of fields into a single array of bytes.\n/// Each input field must contain only 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte\n/// chunks are concatenated back together in the order of the original fields.\n///\n/// It appears that the original author of this function wants to give the caller some control\n/// over the number of bytes that are returned: the final field can be mapped to fewer than 31 bytes,\n/// based on the caller's choice of M.\n/// Given the input is N fields, and each field (except the last) is mapped to 31 bytes,\n/// we definitely need M > (N - 1) * 31 to cover those first (N - 1) fields. Hence the static assertion.\n/// TODO: this is the same as the \"le\" version of this function, save for the `field.to_be_bytes()` calls. I tried passing the conversion function in as a parameter, to reduce code duplication, but couldn't get it to work.\npub fn fields_to_be_bytes_31<let N: u32, let M: u32>(fields: [Field; N]) -> [u8; M] {\n    let mut bytes = [0; M];\n\n    std::static_assert(M > (N - 1) * 31, \"Not enough output bytes specified\");\n    // We make this assertion to keep the logic simpler:\n    std::static_assert(N * 31 >= M, \"Too many output bytes specified.\");\n\n    for i in 0..N - 1 {\n        let field = fields[i];\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes[i * 31 + j] = field_as_bytes[j];\n        }\n    }\n\n    let final_field = fields[N - 1];\n    final_field.assert_max_bit_size::<8 * (M - ((N - 1) * 31))>();\n\n    let final_field_as_bytes: [u8; M - ((N - 1) * 31)] = final_field.to_be_bytes();\n\n    let start_index = (N - 1) * 31;\n    for j in 0..M - ((N - 1) * 31) {\n        bytes[start_index + j] = final_field_as_bytes[j];\n    }\n\n    bytes\n}\n\n/// Converts an input array of fields into a single array of bytes.\n/// Each input field must contain only 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 little-endian bytes, and the resulting 31-byte\n/// chunks are concatenated back together in the order of the original fields. You'll\n/// end up with quite a strange ordering of bytes if you use this particular function.\npub fn fields_to_le_bytes_31<let N: u32, let M: u32>(fields: [Field; N]) -> [u8; M] {\n    let mut bytes = [0; M];\n\n    std::static_assert(M > (N - 1) * 31, \"Not enough output bytes specified\");\n    // We make this assertion to keep the logic simpler:\n    std::static_assert(N * 31 >= M, \"Too many output bytes specified.\");\n\n    for i in 0..N - 1 {\n        let field = fields[i];\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_le_bytes();\n\n        for j in 0..31 {\n            bytes[i * 31 + j] = field_as_bytes[j];\n        }\n    }\n\n    let final_field = fields[N - 1];\n    final_field.assert_max_bit_size::<8 * (M - ((N - 1) * 31))>();\n\n    let final_field_as_bytes: [u8; M - ((N - 1) * 31)] = final_field.to_le_bytes();\n\n    let start_index = (N - 1) * 31;\n    for j in 0..M - ((N - 1) * 31) {\n        bytes[start_index + j] = final_field_as_bytes[j];\n    }\n\n    bytes\n}\n\n/// Converts an input array of fields into a single array of bytes.\n/// Each field is converted to a 32-byte big-endian array.\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end,\n/// every 32 bytes. Be careful that such a gap doesn't leak information!\npub fn fields_to_be_bytes_32<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field = fields[i];\n        let field_as_bytes: [u8; 32] = field.to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\nunconstrained fn byte_to_bits(byte: u8) -> [u1; 8] {\n    let mut mut_byte = byte;\n    let mut bits: [u1; 8] = [0; 8];\n    for i in 0..8 {\n        bits[i] = (mut_byte & 1) as u1;\n        mut_byte >>= 1;\n    }\n    bits\n}\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n\n/// Returns as many random bits as specified through N.\nunconstrained fn get_random_bits<let N: u32>() -> [u1; N] {\n    // Note: (N + 7) / 8 = ceil(N / 8)\n    let bytes = get_random_bytes::<(N + 7) / 8>();\n    let mut bits: [u1; N] = [0; N];\n    for i in 0..bytes.len() - 1 {\n        let mut byte = bytes[i];\n        for j in 0..8 {\n            let bit_idx = i * 8 + j;\n            bits[bit_idx] = (byte & 1) as u1;\n            byte >>= 1;\n        }\n    }\n\n    // N - ((N / 8) * 8) = N - floor(N/8) * 8 = the number of bits remaining.\n    let byte_idx = bytes.len() - 1;\n    let mut byte = bytes[byte_idx];\n    for j in 0..N - ((N / 8) * 8) {\n        let bit_idx = (byte_idx) * 8 + j;\n        bits[bit_idx] = (byte & 1) as u1;\n        byte >>= 1;\n    }\n\n    bits\n}\n\n/// Returns random bits, in chunks, according to the provided numeric generics.\nunconstrained fn get_chunks_of_random_bits<let NUM_CHUNKS: u32, let NUM_BITS: u32>() -> [[u1; NUM_BITS]; NUM_CHUNKS] {\n    let random_bits = get_random_bits::<NUM_CHUNKS * NUM_BITS>();\n    let mut chunks: [[u1; NUM_BITS]; NUM_CHUNKS] = [[0; NUM_BITS]; NUM_CHUNKS];\n    for i in 0..NUM_CHUNKS {\n        let mut chunk: [u1; NUM_BITS] = [0; NUM_BITS];\n        for j in 0..NUM_BITS {\n            chunk[j] = random_bits[i * NUM_BITS + j];\n        }\n        chunks[i] = chunk;\n    }\n    chunks\n}\n\n/**\n * Helper fn for be/le_bytes_to_padded_fields() fns.\n */\nfn pad_31_byte_fields_with_random_bits<let N: u32>(input: [Field; N]) -> [Field; N] {\n    /// Safety: we can't constrain whether or not the returned bits are actually random;\n    /// we can only rely on it being in the caller's best interest.\n    let chunks_of_random_bits = unsafe { get_chunks_of_random_bits::<((N + 30) / 31), 6>() };\n    let mut fields = input;\n    // We push the random bits to the \"big end\" of each field\n    let TWO_POW_248 = 0x100000000000000000000000000000000000000000000000000000000000000;\n    for i in 0..fields.len() {\n        let mut shift = TWO_POW_248;\n        for j in 0..5 {\n            fields[i] += shift * chunks_of_random_bits[i][j] as Field;\n            shift *= 2;\n        }\n\n        // This might overflow the field modulus, so we need to be careful.\n        // By this point, shift = 2 ^ 253, so will populate the 254th bit (counting from 1)\n        let field_with_254th_bit = fields[i] + shift * chunks_of_random_bits[i][6 - 1] as Field;\n\n        // Expensive comparison (one for each field), but it's important -- if we want to hide that we were\n        // working with bytes -- that we include the 254th random bit when it fits.\n        fields[i] = if (fields[i].lt(field_with_254th_bit)) {\n            field_with_254th_bit\n        } else {\n            fields[i]\n        };\n    }\n    fields\n}\n\n/**\n * The above functions be_bytes_31_to_fields and le_bytes_31_to_fields have a privacy-leakage problem:\n * they result in fields which are all 248-bits instead of 254-bits.\n * That means if the above functions are used to convert a ciphertext from bytes to\n * fields, it leaks (with very high probability) to all observers of the log that the\n * ciphertext was created with a \"bit twiddly\" encryption scheme like AES.\n * This reduces privacy sets for all apps.\n *\n * This function seeks to \"pad\" those remaining 6 bits with randomness, so that all\n * encrypted logs look even more similar (full fields of 254-bits of random-looking\n * information). Of course, this adds some extra constraints, unfortunately.\n */\npub fn le_bytes_to_padded_fields<let N: u32>(input: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = le_bytes_31_to_fields(input);\n    pad_31_byte_fields_with_random_bits(fields)\n}\n\npub fn be_bytes_to_padded_fields<let N: u32>(input: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = be_bytes_31_to_fields(input);\n    pad_31_byte_fields_with_random_bits(fields)\n}\n\nmod test {\n    use crate::utils::bytes::{\n        be_bytes_31_to_fields, fields_to_be_bytes_31, fields_to_le_bytes_31, le_bytes_31_to_fields,\n    };\n\n    // BE BYTES\n\n    #[test]\n    fn test_be_bytes_31_to_1_field() {\n        let input = [\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31,\n        ];\n        let output = be_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n    }\n\n    #[test]\n    fn test_1_field_to_be_bytes_31() {\n        let input = [0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f];\n        let output: [u8; 31] = fields_to_be_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n                24, 25, 26, 27, 28, 29, 30, 31,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_be_bytes_31() {\n        let input = [1, 2, 3];\n        let output: [u8; 93] = fields_to_be_bytes_31(input);\n\n        // Each field should occupy 31 bytes with the non-zero value being placed in the last one.\n        assert_eq(\n            output,\n            [\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_fewer_be_bytes() {\n        let input = [1, 2, 3];\n        let output: [u8; 63] = fields_to_be_bytes_31(input);\n        println(f\"output: {output}\");\n\n        // First 2 fields should occupy 31 bytes with the non-zero value being placed in the last one while the last\n        // field should occupy 1 byte. There is not information destruction here because the last field fits into\n        // 1 byte.\n        assert_eq(\n            output,\n            [\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 2, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_be_bytes_31_to_2_fields() {\n        let input = [\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\n            47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        ];\n        let output = be_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n        assert_eq(output[1], 0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b);\n    }\n\n    #[test]\n    fn test_2_fields_to_be_bytes_31() {\n        let input = [\n            0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,\n            0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b,\n        ];\n        let output: [u8; 62] = fields_to_be_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n                24, 25, 26, 27, 28, 29, 30, 31, 0, 0, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\n                43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_large_random_be_bytes_31_input_to_fields_and_back(input: [u8; 128]) {\n        let output = be_bytes_31_to_fields(input);\n        let input_back: [u8; 128] = fields_to_be_bytes_31(output);\n\n        assert_eq(input, input_back);\n    }\n\n    // I need to get an array of random values lower than 2^248 on input and since there is no u248 type and modulo\n    // operation is not supported on a Field (to do field % 2^248), I will take multiple smaller values and combine\n    // them to get a value lower than 2^248.\n    #[test]\n    fn test_large_random_input_to_be_bytes_31_and_back(\n        input1: [u64; 5],\n        input2: [u64; 5],\n        input3: [u64; 5],\n        input4: [u32; 5],\n        input5: [u16; 5],\n        input6: [u8; 5],\n    ) {\n        let mut input = [0; 5];\n        for i in 0..5 {\n            input[i] = (input1[i] as Field * 2.pow_32(184))\n                + (input2[i] as Field * 2.pow_32(120))\n                + (input3[i] as Field * 2.pow_32(56))\n                + (input4[i] as Field * 2.pow_32(24))\n                + (input5[i] as Field * 2.pow_32(8))\n                + input6[i] as Field;\n        }\n\n        let output: [u8; 155] = fields_to_be_bytes_31(input);\n        let input_back = be_bytes_31_to_fields(output);\n\n        assert_eq(input, input_back);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_too_few_destination_be_bytes() {\n        // We should get an error here because first field gets converted to 31 bytes and the second field needs\n        // at least 2 bytes but we provide it with 1.\n        let input = [1, 256];\n        let _ignored_result: [u8; 32] = fields_to_be_bytes_31(input);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_fields_to_be_bytes_31_value_too_large() {\n        let input = [2.pow_32(248)]; // this number is 1 bit larger than 31 bytes.\n        let _ignored_result: [u8; 31] = fields_to_be_bytes_31(input);\n    }\n\n    #[test]\n    fn test_fields_to_be_bytes_31_max_value() {\n        let input = [2.pow_32(248) - 1];\n        let result: [u8; 31] = fields_to_be_bytes_31(input);\n\n        // We check that all the bytes were set to max value (255)\n        for i in 0..31 {\n            assert_eq(result[i], 255);\n        }\n    }\n\n    // LE BYTES\n\n    #[test]\n    fn test_le_bytes_31_to_1_field() {\n        let input = [\n            31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,\n            9, 8, 7, 6, 5, 4, 3, 2, 1,\n        ];\n        let output = le_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n    }\n\n    #[test]\n    fn test_1_field_to_le_bytes_31() {\n        let input = [0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f];\n        let output: [u8; 31] = fields_to_le_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11,\n                10, 9, 8, 7, 6, 5, 4, 3, 2, 1,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_le_bytes_31() {\n        let input = [1, 2, 3];\n        let output: [u8; 93] = fields_to_le_bytes_31(input);\n\n        // Each field should occupy 31 bytes with the non-zero value being placed in the last one.\n        assert_eq(\n            output,\n            [\n                1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_fewer_le_bytes() {\n        let input = [1, 2, 3];\n        let output: [u8; 63] = fields_to_le_bytes_31(input);\n\n        // First 2 fields should occupy 31 bytes with the non-zero value being placed in the last one while the last\n        // field should occupy 1 byte. There is not information destruction here because the last field fits into\n        // 1 byte.\n        assert_eq(\n            output,\n            [\n                1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_le_bytes_31_to_2_fields() {\n        let input = [\n            59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38,\n            37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,\n            15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1,\n        ];\n        let output = le_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b);\n        assert_eq(output[1], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c);\n    }\n\n    #[test]\n    fn test_2_fields_to_le_bytes_31() {\n        let input = [\n            0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,\n            0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b,\n        ];\n        let output: [u8; 62] = fields_to_le_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11,\n                10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47,\n                46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 0, 0, 0,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_large_random_le_bytes_input_to_fields_and_back(input: [u8; 128]) {\n        let output = le_bytes_31_to_fields(input);\n        let input_back: [u8; 128] = fields_to_le_bytes_31(output);\n\n        assert_eq(input, input_back);\n    }\n\n    // I need to get an array of random values lower than 2^248 on input and since there is no u248 type and modulo\n    // operation is not supported on a Field (to do field % 2^248), I will take multiple smaller values and combine\n    // them to get a value lower than 2^248.\n    #[test]\n    fn test_large_random_input_to_le_bytes_and_back(\n        input1: [u64; 5],\n        input2: [u64; 5],\n        input3: [u64; 5],\n        input4: [u32; 5],\n        input5: [u16; 5],\n        input6: [u8; 5],\n    ) {\n        let mut input = [0; 5];\n        for i in 0..5 {\n            input[i] = (input1[i] as Field * 2.pow_32(184))\n                + (input2[i] as Field * 2.pow_32(120))\n                + (input3[i] as Field * 2.pow_32(56))\n                + (input4[i] as Field * 2.pow_32(24))\n                + (input5[i] as Field * 2.pow_32(8))\n                + input6[i] as Field;\n        }\n\n        let output: [u8; 155] = fields_to_le_bytes_31(input);\n        let input_back = le_bytes_31_to_fields(output);\n\n        assert_eq(input, input_back);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_too_few_destination_le_bytes() {\n        // We should get an error here because first field gets converted to 31 bytes and the second field needs\n        // at least 2 bytes but we provide it with 1.\n        let input = [1, 256];\n        let _ignored_result: [u8; 32] = fields_to_le_bytes_31(input);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_fields_to_le_bytes_31_value_too_large() {\n        let input = [2.pow_32(248)];\n        let _ignored_result: [u8; 31] = fields_to_le_bytes_31(input);\n    }\n\n    #[test]\n    fn test_fields_to_le_bytes_31_max_value() {\n        let input = [2.pow_32(248) - 1];\n        let result: [u8; 31] = fields_to_le_bytes_31(input);\n\n        // We check that all the bytes were set to max value (255)\n        for i in 0..31 {\n            assert_eq(result[i], 255);\n        }\n    }\n}\n"
    },
    "203": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::point_to_bytes;\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n"
    },
    "206": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UnconstrainedContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn unconstrained_public_storage_read(\n        context: UnconstrainedContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            /// Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "21": {
      "path": "std/hash/mod.nr",
      "source": "pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    /// Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"
    },
    "221": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "223": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "259": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr",
      "source": "use crate::{point::Point, traits::{Deserialize, Empty, Serialize}};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pub pk_m: Point,\n    pub sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"
    },
    "26": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "266": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        MAX_FIELD_VALUE,\n    },\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse ec::{pow, sqrt};\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        function_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            function_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "27": {
      "path": "std/hash/sha256.nr",
      "source": "use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// docs:start:sha256\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        /// Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        /// Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    /// Safety: the msg_len is checked below in verify_msg_len\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n\n        /// Safety: testing context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 0) };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        /// Safety: test context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 64) };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        /// Safety: testing context\n        let msg_block = unsafe { attach_len_to_msg_block(input, 1, 448) };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n"
    },
    "281": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "282": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "283": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash},\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::{constants::TWO_POW_64, utils::{arrays::array_concat, field::field_from_bytes}};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_contract_class_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_contract_class_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; N * 32];\n    for offset in 0..N {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "284": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr",
      "source": "use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n"
    },
    "293": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "299": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "3": {
      "path": "std/array/mod.nr",
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        /// Safety: `sorted` array is checked to be:\n        /// a. a permutation of `input`'s elements\n        /// b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n"
    },
    "300": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "309": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "312": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "325": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "329": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::{Packable, ToField};\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for U128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self.to_field()]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "330": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 2;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        // We use little-endian ordering to match the order in which U128 defines its limbs.\n        // This is necessary because of how Noir handles serialization:\n        // - When calling a contract function from TypeScript, the serialization in encoder.ts gets used and then Noir\n        //   deserializes using its intrinsic serialization logic (based on the limb order in the struct).\n        // - When calling a contract function from another function, the `serialize` method is invoked on the type\n        //   first.\n        // For this reason if we didn't use the ordering of U128 limbs here and in encoder.ts we would get an arguments\n        // hash mismatch.\n        // The below warning is due to visibility in noir stdlib.\n        [self.lo, self.hi]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_u64s_le(fields[0] as u64, fields[1] as u64)\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "346": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    /// Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    /// of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    /// Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "347": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "349": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "354": {
      "path": "/mnt/user-data/alexg/nargo/github.com/noir-lang/ec/v0.1.2/src/lib.nr",
      "source": "// Elliptic curve implementation\n// Overview\n// ========\n// The following three elliptic curve representations are admissible:\npub mod tecurve; // Twisted Edwards curves\npub mod swcurve; // Elliptic curves in Short Weierstrass form\npub mod montcurve; // Montgomery curves\npub mod consts; // Commonly used curve presets\n//\n// Note that Twisted Edwards and Montgomery curves are (birationally) equivalent, so that\n// they may be freely converted between one another, whereas Short Weierstrass curves are\n// more general. Diagramatically:\n//\n// tecurve == montcurve `subset` swcurve\n//\n// Each module is further divided into two submodules, 'affine' and 'curvegroup', depending\n// on the preferred coordinate representation. Affine coordinates are none other than the usual\n// two-dimensional Cartesian coordinates used in the definitions of these curves, whereas\n// 'CurveGroup' coordinates (terminology borrowed from Arkworks, whose conventions we try\n// to follow) are special coordinate systems with respect to which the group operations may be\n// implemented more efficiently, usually by means of an appropriate choice of projective coordinates.\n//\n// In each of these submodules, there is a Point struct and a Curve struct, the former\n// representing a point in the coordinate system and the latter a curve configuration.\n//\n// Points\n// ======\n// Points may be instantiated using the associated function `new`, which takes coordinates\n// as its arguments. For instance,\n//\n// `let p = swcurve::Point::new(1,1);`\n//\n// The additive identity may be constructed by a call to the associated function `zero` of no\n// arguments:\n//\n// `let zero = swcurve::Point::zero();`\n//\n// Points may be tested for equality by calling the method `eq`:\n//\n// `let pred = p.eq(zero);`\n//\n// There is also the method `is_zero` to explicitly check whether a point is the additive identity:\n//\n// `constrain pred == p.is_zero();`\n//\n// Points may be negated by calling the `negate` method and converted to CurveGroup (or affine)\n// coordinates by calling the `into_group` (resp. `into_affine`) method on them. Finally,\n// Points may be freely mapped between their respective Twisted Edwards and Montgomery\n// representations by calling the `into_montcurve` or `into_tecurve` methods. For mappings\n// between Twisted Edwards/Montgomery curves and Short Weierstrass curves, see the Curve section\n// below, as the underlying mappings are those of curves rather than ambient spaces.\n// As a rule, Points in affine (or CurveGroup) coordinates are mapped to Points in affine\n// (resp. CurveGroup) coordinates.\n//\n// Curves\n// ======\n// A curve configuration (Curve) is completely determined by the Field coefficients of its defining\n// equation (a and b in the case of swcurve, a and d in the case of tecurve, and j and k in\n// the case of montcurve) together with a generator (`gen`) in the corresponding coordinate system.\n// For example, the Baby Jubjub curve configuration as defined in ERC-2494 may be instantiated as a Twisted\n// Edwards curve in affine coordinates as follows:\n//\n// `let bjj_affine = tecurve::Curve::new(168700, 168696, tecurve::Point::new(995203441582195749578291179787384436505546430278305826713579947235728471134,5472060717959818805561601436314318772137091100104008585924551046643952123905));`\n//\n// The `contains` method may be used to check whether a Point lies on a given curve:\n//\n// `constrain bjj_affine.contains(tecurve::Point::zero());`\n//\n// The elliptic curve group's addition operation is exposed as the `add` method, e.g.\n//\n// `let p = bjj_affine.add(bjj_affine.gen, bjj_affine.gen);`\n//\n// subtraction as the `subtract` method, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.subtract(bjj_affine.gen, bjj_affine.gen));`\n//\n// scalar multiplication as the `mul` method, where the scalar is assumed to be a Field* element, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.mul(2, tecurve::Point::zero());`\n//\n// There is a scalar multiplication method (`bit_mul`) provided where the scalar input is expected to be\n// an array of bits (little-endian convention), as well as a multi-scalar multiplication method** (`msm`)\n// which takes an array of Field elements and an array of elliptic curve points as arguments, both assumed\n// to be of the same length.\n//\n// Curve configurations may be converted between different coordinate representations by calling the `into_group`\n// and `into_affine` methods on them, e.g.\n//\n// `let bjj_curvegroup = bjj_affine.into_group();`\n//\n// Curve configurations may also be converted between different curve representations by calling the `into_swcurve`,\n// `into_montcurve` and `into_tecurve` methods subject to the relation between the curve representations mentioned\n// above. Note that it is possible to map Points from a Twisted Edwards/Montgomery curve to the corresponding\n// Short Weierstrass representation and back, and the methods to do so are exposed as `map_into_swcurve` and\n// `map_from_swcurve`, which each take one argument, the point to be mapped.\n//\n// Curve maps\n// ==========\n// There are a few different ways of mapping Field elements to elliptic curves. Here we provide the simplified\n// Shallue-van de Woestijne-Ulas and Elligator 2 methods, the former being applicable to all curve types\n// provided above subject to the constraint that the coefficients of the corresponding Short Weierstrass curve satisfies\n// a*b != 0 and the latter being applicable to Montgomery and Twisted Edwards curves subject to the constraint that\n// the coefficients of the corresponding Montgomery curve satisfy j*k != 0 and (j^2 - 4)/k^2 is non-square.\n//\n// The simplified Shallue-van de Woestijne-Ulas method is exposed as the method `swu_map` on the Curve configuration and\n// depends on two parameters, a Field element z != -1 for which g(x) - z is irreducible over Field and g(b/(z*a)) is\n// square, where g(x) = x^3 + a*x + b is the right-hand side of the defining equation of the corresponding Short\n// Weierstrass curve, and a Field element u to be mapped onto the curve. For example, in the case of bjj_affine above,\n// it may be determined using the scripts provided at <https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve> that z = 5.\n//\n// The Elligator 2 method is exposed as the method `elligator2_map` on the Curve configurations of Montgomery and\n// Twisted Edwards curves. Like the simplified SWU method above, it depends on a certain non-square element of Field,\n// but this element need not satisfy any further conditions, so it is included as the (Field-dependent) constant\n//`ZETA` below. Thus, the `elligator2_map` method depends only on one parameter, the Field element to be mapped onto\n// the curve.\n//\n// For details on all of the above in the context of hashing to elliptic curves, see <https://datatracker.ietf.org/doc/id/draft-irtf-cfrg-hash-to-curve-06.html>.\n//\n//\n// *TODO: Replace Field with Bigint.\n// **TODO: Support arrays of structs to make this work.\n// Field-dependent constant ZETA = a non-square element of Field\n// Required for Elligator 2 map\n// TODO: Replace with built-in constant.\nglobal ZETA: Field = 5;\n// Field-dependent constants for Tonelli-Shanks algorithm (see sqrt function below)\n// TODO: Possibly make this built-in.\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n// Higher-order version of scalar multiplication\n// TODO: Make this work so that the submodules' bit_mul may be defined in terms of it.\n//fn bit_mul<T,N>(add: fn(T,T) -> T, e: T, bits: [u1; N], p: T) -> T {\n//    let mut out = e;\n//    let n = bits.len();\n//\n//    for i in 0..n {\n//        out = add(\n//            add(out, out),\n//            if(bits[n - i - 1] == 0) {e} else {p});\n//    }\n//\n//    out\n//}\n// TODO: Make this built-in.\npub fn safe_inverse(x: Field) -> Field {\n    if x == 0 {\n        0\n    } else {\n        1 / x\n    }\n}\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\npub fn is_square(x: Field) -> bool {\n    let v = pow(x, 0 - 1 / 2);\n\n    v * (v - 1) == 0\n}\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\nmod tests {\n    use crate::montcurve::affine::Point as MGaffine;\n    use crate::montcurve::curvegroup::Point as MG;\n    use crate::swcurve::affine::Point as SWGaffine;\n    use crate::swcurve::curvegroup::Point as SWG;\n    use crate::tecurve::affine::Curve as AffineCurve;\n    use crate::tecurve::affine::Point as Gaffine;\n    use crate::tecurve::curvegroup::Point as G;\n\n    #[test]\n    fn smoke_test() {\n        // Tests may be checked against https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/tree/main/poc\n        // Define Baby Jubjub (ERC-2494) parameters in affine representation\n        let bjj_affine = AffineCurve::new(\n            168700,\n            168696,\n            Gaffine::new(\n                995203441582195749578291179787384436505546430278305826713579947235728471134,\n                5472060717959818805561601436314318772137091100104008585924551046643952123905,\n            ),\n        );\n        // Test addition\n        let p1_affine = Gaffine::new(\n            17777552123799933955779906779655732241715742912184938656739573121738514868268,\n            2626589144620713026669568689430873010625803728049924121243784502389097019475,\n        );\n        let p2_affine = Gaffine::new(\n            16540640123574156134436876038791482806971768689494387082833631921987005038935,\n            20819045374670962167435360035096875258406992893633759881276124905556507972311,\n        );\n\n        let p3_affine = bjj_affine.add(p1_affine, p2_affine);\n        assert(p3_affine.eq(Gaffine::new(\n            7916061937171219682591368294088513039687205273691143098332585753343424131937,\n            14035240266687799601661095864649209771790948434046947201833777492504781204499,\n        )));\n        // Test scalar multiplication\n        let p4_affine = bjj_affine.mul(2, p1_affine);\n        assert(p4_affine.eq(Gaffine::new(\n            6890855772600357754907169075114257697580319025794532037257385534741338397365,\n            4338620300185947561074059802482547481416142213883829469920100239455078257889,\n        )));\n        assert(p4_affine.eq(bjj_affine.bit_mul([0, 1], p1_affine)));\n        // Test subtraction\n        let p5_affine = bjj_affine.subtract(p3_affine, p3_affine);\n        assert(p5_affine.eq(Gaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_affine.contains(bjj_affine.gen)\n                & bjj_affine.contains(p1_affine)\n                & bjj_affine.contains(p2_affine)\n                & bjj_affine.contains(p3_affine)\n                & bjj_affine.contains(p4_affine)\n                & bjj_affine.contains(p5_affine),\n        );\n        // Test CurveGroup equivalents\n        let bjj = bjj_affine.into_group(); // Baby Jubjub\n        let p1 = p1_affine.into_group();\n        let p2 = p2_affine.into_group();\n        let p3 = p3_affine.into_group();\n        let p4 = p4_affine.into_group();\n        let p5 = p5_affine.into_group();\n        // Test addition\n        assert(p3.eq(bjj.add(p1, p2)));\n        // Test scalar multiplication\n        assert(p4.eq(bjj.mul(2, p1)));\n        assert(p4.eq(bjj.bit_mul([0, 1], p1)));\n        // Test subtraction\n        assert(G::zero().eq(bjj.subtract(p3, p3)));\n        assert(p5.eq(G::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj.contains(bjj.gen)\n                & bjj.contains(p1)\n                & bjj.contains(p2)\n                & bjj.contains(p3)\n                & bjj.contains(p4)\n                & bjj.contains(p5),\n        );\n        // Test SWCurve equivalents of the above\n        // First the affine representation\n        let bjj_swcurve_affine = bjj_affine.into_swcurve();\n\n        let p1_swcurve_affine = bjj_affine.map_into_swcurve(p1_affine);\n        let p2_swcurve_affine = bjj_affine.map_into_swcurve(p2_affine);\n        let p3_swcurve_affine = bjj_affine.map_into_swcurve(p3_affine);\n        let p4_swcurve_affine = bjj_affine.map_into_swcurve(p4_affine);\n        let p5_swcurve_affine = bjj_affine.map_into_swcurve(p5_affine);\n        // Addition\n        assert(p3_swcurve_affine.eq(bjj_swcurve_affine.add(p1_swcurve_affine, p2_swcurve_affine)));\n        // Doubling\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.mul(2, p1_swcurve_affine)));\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.bit_mul([0, 1], p1_swcurve_affine)));\n        // Subtraction\n        assert(SWGaffine::zero().eq(bjj_swcurve_affine.subtract(\n            p3_swcurve_affine,\n            p3_swcurve_affine,\n        )));\n        assert(p5_swcurve_affine.eq(SWGaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_swcurve_affine.contains(bjj_swcurve_affine.gen)\n                & bjj_swcurve_affine.contains(p1_swcurve_affine)\n                & bjj_swcurve_affine.contains(p2_swcurve_affine)\n                & bjj_swcurve_affine.contains(p3_swcurve_affine)\n                & bjj_swcurve_affine.contains(p4_swcurve_affine)\n                & bjj_swcurve_affine.contains(p5_swcurve_affine),\n        );\n        // Then the CurveGroup representation\n        let bjj_swcurve = bjj.into_swcurve();\n\n        let p1_swcurve = bjj.map_into_swcurve(p1);\n        let p2_swcurve = bjj.map_into_swcurve(p2);\n        let p3_swcurve = bjj.map_into_swcurve(p3);\n        let p4_swcurve = bjj.map_into_swcurve(p4);\n        let p5_swcurve = bjj.map_into_swcurve(p5);\n        // Addition\n        assert(p3_swcurve.eq(bjj_swcurve.add(p1_swcurve, p2_swcurve)));\n        // Doubling\n        assert(p4_swcurve.eq(bjj_swcurve.mul(2, p1_swcurve)));\n        assert(p4_swcurve.eq(bjj_swcurve.bit_mul([0, 1], p1_swcurve)));\n        // Subtraction\n        assert(SWG::zero().eq(bjj_swcurve.subtract(p3_swcurve, p3_swcurve)));\n        assert(p5_swcurve.eq(SWG::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_swcurve.contains(bjj_swcurve.gen)\n                & bjj_swcurve.contains(p1_swcurve)\n                & bjj_swcurve.contains(p2_swcurve)\n                & bjj_swcurve.contains(p3_swcurve)\n                & bjj_swcurve.contains(p4_swcurve)\n                & bjj_swcurve.contains(p5_swcurve),\n        );\n        // Test MontCurve conversions\n        // First the affine representation\n        let bjj_montcurve_affine = bjj_affine.into_montcurve();\n\n        let p1_montcurve_affine = p1_affine.into_montcurve();\n        let p2_montcurve_affine = p2_affine.into_montcurve();\n        let p3_montcurve_affine = p3_affine.into_montcurve();\n        let p4_montcurve_affine = p4_affine.into_montcurve();\n        let p5_montcurve_affine = p5_affine.into_montcurve();\n        // Addition\n        assert(p3_montcurve_affine.eq(bjj_montcurve_affine.add(\n            p1_montcurve_affine,\n            p2_montcurve_affine,\n        )));\n        // Doubling\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.mul(2, p1_montcurve_affine)));\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.bit_mul([0, 1], p1_montcurve_affine)));\n        // Subtraction\n        assert(MGaffine::zero().eq(bjj_montcurve_affine.subtract(\n            p3_montcurve_affine,\n            p3_montcurve_affine,\n        )));\n        assert(p5_montcurve_affine.eq(MGaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_montcurve_affine.contains(bjj_montcurve_affine.gen)\n                & bjj_montcurve_affine.contains(p1_montcurve_affine)\n                & bjj_montcurve_affine.contains(p2_montcurve_affine)\n                & bjj_montcurve_affine.contains(p3_montcurve_affine)\n                & bjj_montcurve_affine.contains(p4_montcurve_affine)\n                & bjj_montcurve_affine.contains(p5_montcurve_affine),\n        );\n        // Then the CurveGroup representation\n        let bjj_montcurve = bjj.into_montcurve();\n\n        let p1_montcurve = p1_montcurve_affine.into_group();\n        let p2_montcurve = p2_montcurve_affine.into_group();\n        let p3_montcurve = p3_montcurve_affine.into_group();\n        let p4_montcurve = p4_montcurve_affine.into_group();\n        let p5_montcurve = p5_montcurve_affine.into_group();\n        // Addition\n        assert(p3_montcurve.eq(bjj_montcurve.add(p1_montcurve, p2_montcurve)));\n        // Doubling\n        assert(p4_montcurve.eq(bjj_montcurve.mul(2, p1_montcurve)));\n        assert(p4_montcurve.eq(bjj_montcurve.bit_mul([0, 1], p1_montcurve)));\n        // Subtraction\n        assert(MG::zero().eq(bjj_montcurve.subtract(p3_montcurve, p3_montcurve)));\n        assert(p5_montcurve.eq(MG::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_montcurve.contains(bjj_montcurve.gen)\n                & bjj_montcurve.contains(p1_montcurve)\n                & bjj_montcurve.contains(p2_montcurve)\n                & bjj_montcurve.contains(p3_montcurve)\n                & bjj_montcurve.contains(p4_montcurve)\n                & bjj_montcurve.contains(p5_montcurve),\n        );\n        // Elligator 2 map-to-curve\n        let ell2_pt_map = bjj_affine.elligator2_map(27);\n\n        assert(ell2_pt_map.eq(MGaffine::new(\n            7972459279704486422145701269802978968072470631857513331988813812334797879121,\n            8142420778878030219043334189293412482212146646099536952861607542822144507872,\n        )\n            .into_tecurve()));\n        // SWU map-to-curve\n        let swu_pt_map = bjj_affine.swu_map(5, 27);\n\n        assert(swu_pt_map.eq(bjj_affine.map_from_swcurve(SWGaffine::new(\n            2162719247815120009132293839392097468339661471129795280520343931405114293888,\n            5341392251743377373758788728206293080122949448990104760111875914082289313973,\n        ))));\n    }\n\n}\n"
    },
    "363": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/compressed-string/src/field_compressed_string.nr",
      "source": "use dep::aztec::protocol_types::{\n    traits::{Deserialize, Packable, Serialize},\n    utils::field::field_from_bytes,\n};\nuse std::meta::derive;\n\n// A Fixedsize Compressed String.\n// Essentially a special version of Compressed String for practical use.\n#[derive(Deserialize, Eq, Packable, Serialize)]\npub struct FieldCompressedString {\n    value: Field,\n}\n\nimpl FieldCompressedString {\n    pub fn is_eq(self, other: FieldCompressedString) -> bool {\n        self.value == other.value\n    }\n\n    pub fn from_field(input_field: Field) -> Self {\n        Self { value: input_field }\n    }\n\n    pub fn from_string(input_string: str<31>) -> Self {\n        Self { value: field_from_bytes(input_string.as_bytes(), true) }\n    }\n\n    pub fn to_bytes(self) -> [u8; 31] {\n        self.value.to_be_bytes()\n    }\n}\n"
    },
    "366": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::partial_note,\n    note::utils::compute_note_hash_for_nullify,\n    oracle::random::random,\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{\n        address::AztecAddress,\n        constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator,\n        traits::{Packable, Serialize},\n    },\n};\n\n// docs:start:UintNote\n#[partial_note(quote {value})]\n#[derive(Serialize)]\npub struct UintNote {\n    // The amount of tokens in the note\n    value: U128,\n    owner: AztecAddress,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:UintNote\n\nimpl NullifiableNote for UintNote {\n    // docs:start:nullifier\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self, storage_slot: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self, storage_slot);\n        let owner_npk_m_hash = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl Eq for UintNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: U128, owner: AztecAddress) -> Self {\n        /// Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        /// so a malicious sender could use non-random values to make the note less private. But they already know\n        /// the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        /// information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_value(self) -> U128 {\n        self.value\n    }\n}\n"
    },
    "51": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "52": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "6": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "60": {
      "path": "std/uint128.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::ops::{Add, BitAnd, BitOr, BitXor, Div, Mul, Not, Rem, Shl, Shr, Sub};\nuse crate::static_assert;\nuse super::{convert::AsPrimitive, default::Default};\n\nglobal pow64: Field = 18446744073709551616; //2^64;\nglobal pow63: Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    pub(crate) lo: Field,\n    pub(crate) hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i + 8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i + 8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        static_assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N - i]) * base;\n                base = base * 16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn unconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (\n            if ascii < 58 {\n                ascii - 48\n            } else {\n                /// Safety: optionally adds 32 and then check (below) the result is in 'a..f' range\n                let ascii =\n                    ascii + 32 * (unsafe { U128::unconstrained_check_is_upper_ascii(ascii) as u8 });\n                assert(ascii >= 97); // enforce >= 'a'\n                assert(ascii <= 102); // enforce <= 'f'\n                ascii - 87\n            }\n        ) as Field\n    }\n\n    // TODO: Replace with a faster version.\n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q, r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128\n    where\n        T: AsPrimitive<Field>,\n    {\n        let f = i.as_();\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size::<128>();\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T\n    where\n        Field: AsPrimitive<T>,\n    {\n        AsPrimitive::as_(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        /// Safety: euclidian division is asserted to be correct: assert(a == b * q + r); and assert(r < b);\n        /// Furthermore, U128 addition and multiplication ensures that b * q + r does not overflow\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        /// Safety: cf div() above\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nimpl Default for U128 {\n    fn default() -> Self {\n        U128::zero()\n    }\n}\n\nmod tests {\n    use crate::default::Default;\n    use crate::ops::Not;\n    use crate::uint128::{pow63, pow64, U128};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a = a.to_le_bytes();\n        let be_bytes_a = a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b = U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c = U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d = U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e = U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f = U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded = U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b: Field = a.to_integer();\n        let c: [u8; 17] = b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a = U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b = U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c = U128::one();\n        let d = U128::from_u64s_le(0x0, 0x1);\n        /// Safety: testing context\n        unsafe {\n            let (q, r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start: Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start: Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start: Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start: Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(),\n            U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(\n                U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff),\n            ),\n        );\n    }\n\n    #[test]\n    fn test_default() {\n        assert_eq(U128::default(), U128::zero());\n    }\n}\n"
    },
    "62": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-contracts/contracts/token_contract/src/main.nr",
      "source": "// docs:start:token_all\n// docs:start:imports\nmod types;\nmod test;\n\nuse dep::aztec::macros::aztec;\n\n// Minimal token implementation that supports `AuthWit` accounts.\n// The auth message follows a similar pattern to the cross-chain message and includes a designated caller.\n// The designated caller is ALWAYS used here, and not based on a flag as cross-chain.\n// message hash = H([caller, contract, selector, ...args])\n// To be read as `caller` calls function at `contract` defined by `selector` with `args`\n// Including a nonce in the message hash ensures that the message can only be used once.\n#[aztec]\npub contract Token {\n    // Libs\n    use std::meta::derive;\n\n    use dep::compressed_string::FieldCompressedString;\n\n    use dep::aztec::{\n        context::{PrivateCallInterface, PrivateContext},\n        encrypted_logs::log_assembly_strategies::default_aes128::{\n            event::encode_and_encrypt_event_unconstrained,\n            note::{encode_and_encrypt_note, encode_and_encrypt_note_unconstrained},\n        },\n        macros::{\n            events::event,\n            functions::{initializer, internal, private, public, view},\n            storage::storage,\n        },\n        oracle::random::random,\n        prelude::{\n            AztecAddress, FunctionSelector, Map, PublicContext, PublicImmutable, PublicMutable,\n        },\n        protocol_types::{point::Point, traits::Serialize},\n    };\n\n    use dep::uint_note::uint_note::UintNote;\n\n    // docs:start:import_authwit\n    use dep::authwit::auth::{\n        assert_current_call_valid_authwit, assert_current_call_valid_authwit_public,\n        compute_authwit_nullifier,\n    };\n    // docs:end:import_authwit\n\n    use crate::types::balance_set::BalanceSet;\n\n    // docs:end::imports\n\n    // In the first transfer iteration we are computing a lot of additional information (validating inputs, retrieving\n    // keys, etc.), so the gate count is already relatively high. We therefore only read a few notes to keep the happy\n    // case with few constraints.\n    global INITIAL_TRANSFER_CALL_MAX_NOTES: u32 = 2;\n    // All the recursive call does is nullify notes, meaning the gate count is low, but it is all constant overhead. We\n    // therefore read more notes than in the base case to increase the efficiency of the overhead, since this results in\n    // an overall small circuit regardless.\n    global RECURSIVE_TRANSFER_CALL_MAX_NOTES: u32 = 8;\n\n    #[derive(Serialize)]\n    #[event]\n    struct Transfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: U128,\n    }\n\n    // docs:start:storage_struct\n    #[storage]\n    struct Storage<Context> {\n        // docs:start:storage_admin\n        admin: PublicMutable<AztecAddress, Context>,\n        // docs:end:storage_admin\n        // docs:start:storage_minters\n        minters: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n        // docs:end:storage_minters\n        // docs:start:storage_balances\n        balances: Map<AztecAddress, BalanceSet<Context>, Context>,\n        // docs:end:storage_balances\n        total_supply: PublicMutable<U128, Context>,\n        public_balances: Map<AztecAddress, PublicMutable<U128, Context>, Context>,\n        symbol: PublicImmutable<FieldCompressedString, Context>,\n        name: PublicImmutable<FieldCompressedString, Context>,\n        // docs:start:storage_decimals\n        decimals: PublicImmutable<u8, Context>,\n        // docs:end:storage_decimals\n    }\n    // docs:end:storage_struct\n\n    // docs:start:constructor\n    #[public]\n    #[initializer]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>, decimals: u8) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.minters.at(admin).write(true);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n        // docs:start:initialize_decimals\n        storage.decimals.initialize(decimals);\n        // docs:end:initialize_decimals\n    }\n    // docs:end:constructor\n\n    // docs:start:set_admin\n    #[public]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:start:write_admin\n        storage.admin.write(new_admin);\n        // docs:end:write_admin\n    }\n    // docs:end:set_admin\n\n    #[public]\n    #[view]\n    fn public_get_name() -> FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_name() -> FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_decimals() -> pub u8 {\n        storage.decimals.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_decimals() -> pub u8 {\n        storage.decimals.read()\n    }\n\n    // docs:start:admin\n    #[public]\n    #[view]\n    fn get_admin() -> Field {\n        storage.admin.read().to_field()\n    }\n    // docs:end:admin\n\n    // docs:start:is_minter\n    #[public]\n    #[view]\n    fn is_minter(minter: AztecAddress) -> bool {\n        storage.minters.at(minter).read()\n    }\n    // docs:end:is_minter\n\n    // docs:start:total_supply\n    #[public]\n    #[view]\n    fn total_supply() -> U128 {\n        storage.total_supply.read()\n    }\n    // docs:end:total_supply\n\n    // docs:start:balance_of_public\n    #[public]\n    #[view]\n    fn balance_of_public(owner: AztecAddress) -> U128 {\n        storage.public_balances.at(owner).read()\n    }\n    // docs:end:balance_of_public\n\n    // docs:start:set_minter\n    #[public]\n    fn set_minter(minter: AztecAddress, approve: bool) {\n        // docs:start:read_admin\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:end:read_admin\n        // docs:start:write_minter\n        storage.minters.at(minter).write(approve);\n        // docs:end:write_minter\n    }\n    // docs:end:set_minter\n\n    // docs:start:mint_to_public\n    #[public]\n    fn mint_to_public(to: AztecAddress, amount: U128) {\n        // docs:start:read_minter\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        // docs:end:read_minter\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        let supply = storage.total_supply.read().add(amount);\n        storage.public_balances.at(to).write(new_balance);\n        storage.total_supply.write(supply);\n    }\n    // docs:end:mint_to_public\n\n    // docs:start:transfer_in_public\n    #[public]\n    fn transfer_in_public(from: AztecAddress, to: AztecAddress, amount: U128, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n        let to_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(to_balance);\n    }\n    // docs:end:transfer_in_public\n\n    // docs:start:burn_public\n    #[public]\n    fn burn_public(from: AztecAddress, amount: U128, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit_public\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit_public\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:burn_public\n\n    // docs:start:transfer_to_public\n    #[private]\n    fn transfer_to_public(from: AztecAddress, to: AztecAddress, amount: U128, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        storage.balances.at(from).sub(from, amount).emit(encode_and_encrypt_note(\n            &mut context,\n            from,\n            from,\n        ));\n        Token::at(context.this_address())._increase_public_balance(to, amount).enqueue(&mut context);\n    }\n    // docs:end:transfer_to_public\n\n    // docs:start:transfer\n    #[private]\n    fn transfer(to: AztecAddress, amount: U128) {\n        let from = context.msg_sender();\n\n        // We reduce `from`'s balance by amount by recursively removing notes over potentially multiple calls. This\n        // method keeps the gate count for each individual call low - reading too many notes at once could result in\n        // circuits in which proving is not feasible.\n        // Since the sum of the amounts in the notes we nullified was potentially larger than amount, we create a new\n        // note for `from` with the change amount, e.g. if `amount` is 10 and two notes are nullified with amounts 8 and\n        // 5, then the change will be 3 (since 8 + 5 - 10 = 3).\n        let change = subtract_balance(\n            &mut context,\n            storage,\n            from,\n            amount,\n            INITIAL_TRANSFER_CALL_MAX_NOTES,\n        );\n        storage.balances.at(from).add(from, change).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            from,\n            from,\n        ));\n        storage.balances.at(to).add(to, amount).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            to,\n            from,\n        ));\n        // We don't constrain encryption of the note log in `transfer` (unlike in `transfer_in_private`) because the transfer\n        // function is only designed to be used in situations where the event is not strictly necessary (e.g. payment to\n        // another person where the payment is considered to be successful when the other party successfully decrypts a\n        // note).\n        Transfer { from, to, amount }.emit(encode_and_encrypt_event_unconstrained(\n            &mut context,\n            to,\n            from,\n        ));\n    }\n    // docs:end:transfer\n\n    #[contract_library_method]\n    fn subtract_balance(\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n        account: AztecAddress,\n        amount: U128,\n        max_notes: u32,\n    ) -> U128 {\n        let subtracted = storage.balances.at(account).try_sub(amount, max_notes);\n        // Failing to subtract any amount means that the owner was unable to produce more notes that could be nullified.\n        // We could in some cases fail early inside try_sub if we detected that fewer notes than the maximum were\n        // returned and we were still unable to reach the target amount, but that'd make the code more complicated, and\n        // optimizing for the failure scenario is not as important.\n        assert(subtracted > U128::zero(), \"Balance too low\");\n        if subtracted >= amount {\n            // We have achieved our goal of nullifying notes that add up to more than amount, so we return the change\n            subtracted - amount\n        } else {\n            // try_sub failed to nullify enough notes to reach the target amount, so we compute the amount remaining\n            // and try again.\n            let remaining = amount - subtracted;\n            compute_recurse_subtract_balance_call(*context, account, remaining).call(context)\n        }\n    }\n\n    // TODO(#7729): apply no_predicates to the contract interface method directly instead of having to use a wrapper\n    // like we do here.\n    #[no_predicates]\n    #[contract_library_method]\n    fn compute_recurse_subtract_balance_call(\n        context: PrivateContext,\n        account: AztecAddress,\n        remaining: U128,\n    ) -> PrivateCallInterface<25, U128> {\n        Token::at(context.this_address())._recurse_subtract_balance(account, remaining)\n    }\n\n    #[internal]\n    #[private]\n    fn _recurse_subtract_balance(account: AztecAddress, amount: U128) -> U128 {\n        subtract_balance(\n            &mut context,\n            storage,\n            account,\n            amount,\n            RECURSIVE_TRANSFER_CALL_MAX_NOTES,\n        )\n    }\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    // docs:start:cancel_authwit\n    #[private]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n    // docs:end:cancel_authwit\n\n    // docs:start:transfer_in_private\n    #[private]\n    fn transfer_in_private(from: AztecAddress, to: AztecAddress, amount: U128, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit\n\n        // docs:start:increase_private_balance\n        // docs:start:encrypted\n        storage.balances.at(from).sub(from, amount).emit(encode_and_encrypt_note(\n            &mut context,\n            from,\n            from,\n        ));\n        // docs:end:encrypted\n        // docs:end:increase_private_balance\n        storage.balances.at(to).add(to, amount).emit(encode_and_encrypt_note(&mut context, to, from));\n    }\n    // docs:end:transfer_in_private\n\n    // docs:start:burn_private\n    #[private]\n    fn burn_private(from: AztecAddress, amount: U128, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        storage.balances.at(from).sub(from, amount).emit(encode_and_encrypt_note(\n            &mut context,\n            from,\n            from,\n        ));\n        Token::at(context.this_address())._reduce_total_supply(amount).enqueue(&mut context);\n    }\n    // docs:end:burn_private\n\n    // docs:start:transfer_to_private\n    // Transfers token `amount` from public balance of message sender to a private balance of `to`.\n    #[private]\n    fn transfer_to_private(to: AztecAddress, amount: U128) {\n        // `from` is the owner of the public balance from which we'll subtract the `amount`.\n        let from = context.msg_sender();\n        let token = Token::at(context.this_address());\n\n        // We prepare the private balance increase (the partial note).\n        let hiding_point_slot = _prepare_private_balance_increase(from, to, &mut context, storage);\n\n        // At last we finalize the transfer. Usage of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that he can transfer only his own tokens.\n        token._finalize_transfer_to_private_unsafe(from, amount, hiding_point_slot).enqueue(\n            &mut context,\n        );\n    }\n    // docs:end:transfer_to_private\n\n    // docs:start:prepare_private_balance_increase\n    /// Prepares an increase of private balance of `to` (partial note). The increase needs to be finalized by calling\n    /// some of the finalization functions (`finalize_transfer_to_private`, `finalize_mint_to_private`).\n    /// Returns a hiding point slot.\n    #[private]\n    fn prepare_private_balance_increase(to: AztecAddress, from: AztecAddress) -> Field {\n        // TODO(#9887): ideally we'd not have `from` here, but we do need a `from` address to produce a tagging secret\n        // with `to`.\n        _prepare_private_balance_increase(from, to, &mut context, storage)\n    }\n    // docs:end:prepare_private_balance_increase\n\n    /// This function exists separately from `prepare_private_balance_increase` solely as an optimization as it allows\n    /// us to have it inlined in the `transfer_to_private` function which results in one less kernel iteration.\n    ///\n    /// TODO(#9180): Consider adding macro support for functions callable both as an entrypoint and as an internal\n    /// function.\n    #[contract_library_method]\n    fn _prepare_private_balance_increase(\n        from: AztecAddress, // sender of the tag: TODO(#9887): this is not great?\n        to: AztecAddress,\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) -> Field {\n        let to_note_slot = storage.balances.at(to).set.storage_slot;\n\n        // We create a setup payload with unpopulated/zero `amount` for 'to'\n        // TODO(#7775): Manually fetching the randomness here is not great. If we decide to include randomness in all\n        // notes we could just inject it in macros.\n\n        /// Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        /// so a malicious sender could use non-random values to make the note less private. But they already know\n        /// the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        /// information. We can therefore assume that the sender will cooperate in the random value generation.\n        let note_randomness = unsafe { random() };\n        let note_setup_payload = UintNote::setup_payload().new(to, note_randomness, to_note_slot);\n\n        // We get the keys and encrypt the log of the note\n        let setup_log = note_setup_payload.encrypt_log(context, to, from);\n\n        // Using the x-coordinate as a hiding point slot is safe against someone else interfering with it because\n        // we have a guarantee that the public functions of the transaction are executed right after the private ones\n        // and for this reason the protocol guarantees that nobody can front-run us in consuming the hiding point.\n        // This guarantee would break if `finalize_transfer_to_private` was not called in the same transaction. This\n        // however is not the flow we are currently concerned with. To support the multi-transaction flow we could\n        // introduce a `from` function argument, hash the x-coordinate with it and then repeat the hashing in\n        // `finalize_transfer_to_private`.\n        //\n        // We can also be sure that the `hiding_point_slot` will not overwrite any other value in the storage because\n        // in our state variables we derive slots using a different hash function from multi scalar multiplication\n        // (MSM).\n        let hiding_point_slot = note_setup_payload.hiding_point.x;\n\n        // We don't need to perform a check that the value overwritten by `_store_point_in_transient_storage_unsafe`\n        // is zero because the slot is the x-coordinate of the hiding point and hence we could only overwrite\n        // the value in the slot with the same value. This makes usage of the `unsafe` method safe.\n        Token::at(context.this_address())\n            ._store_payload_in_transient_storage_unsafe(\n                hiding_point_slot,\n                note_setup_payload.hiding_point,\n                setup_log,\n            )\n            .enqueue(context);\n\n        hiding_point_slot\n    }\n\n    // docs:start:finalize_transfer_to_private\n    /// Finalizes a transfer of token `amount` from public balance of `from` to a private balance of `to`.\n    /// The transfer must be prepared by calling `prepare_private_balance_increase` first and the resulting\n    /// `hiding_point_slot` must be passed as an argument to this function.\n    #[public]\n    fn finalize_transfer_to_private(amount: U128, hiding_point_slot: Field) {\n        let from = context.msg_sender();\n        _finalize_transfer_to_private(from, amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_transfer_to_private\n\n    // docs:start:finalize_transfer_to_private_unsafe\n    /// This is a wrapper around `_finalize_transfer_to_private` placed here so that a call\n    /// to `_finalize_transfer_to_private` can be enqueued. Called unsafe as it does not check `from` (this has to be\n    /// done in the calling function).\n    #[public]\n    #[internal]\n    fn _finalize_transfer_to_private_unsafe(\n        from: AztecAddress,\n        amount: U128,\n        hiding_point_slot: Field,\n    ) {\n        _finalize_transfer_to_private(from, amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_transfer_to_private_unsafe\n\n    #[contract_library_method]\n    fn _finalize_transfer_to_private(\n        from: AztecAddress,\n        amount: U128,\n        hiding_point_slot: Field,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        // First we subtract the `amount` from the public balance of `from`\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        // Then we finalize the partial note with the `amount`\n        let finalization_payload =\n            UintNote::finalization_payload().new(context, hiding_point_slot, amount);\n\n        // At last we emit the note hash and the final log\n        finalization_payload.emit();\n    }\n\n    // docs:start:mint_to_private\n    /// Mints token `amount` to a private balance of `to`. Message sender has to have minter permissions (checked\n    /// in the enqueued call).\n    #[private]\n    fn mint_to_private(\n        from: AztecAddress, // sender of the tag: TODO(#9887): this is not great?\n        to: AztecAddress,\n        amount: U128,\n    ) {\n        let token = Token::at(context.this_address());\n\n        // We prepare the partial note to which we'll \"send\" the minted amount.\n        let hiding_point_slot = _prepare_private_balance_increase(from, to, &mut context, storage);\n\n        // At last we finalize the mint. Usage of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that only a message sender with minter permissions\n        // can successfully execute the function.\n        token\n            ._finalize_mint_to_private_unsafe(context.msg_sender(), amount, hiding_point_slot)\n            .enqueue(&mut context);\n    }\n    // docs:end:mint_to_private\n\n    // docs:start:finalize_mint_to_private\n    /// Finalizes a mint of token `amount` to a private balance of `to`. The mint must be prepared by calling\n    /// `prepare_private_balance_increase` first and the resulting\n    /// `hiding_point_slot` must be passed as an argument to this function.\n    ///\n    /// Note: This function is only an optimization as it could be replaced by a combination of `mint_to_public`\n    /// and `finalize_transfer_to_private`. It is however used very commonly so it makes sense to optimize it\n    /// (e.g. used during token bridging, in AMM liquidity token etc.).\n    #[public]\n    fn finalize_mint_to_private(amount: U128, hiding_point_slot: Field) {\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n\n        _finalize_mint_to_private(amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_mint_to_private\n\n    // docs:start:finalize_mint_to_private_unsafe\n    #[public]\n    #[internal]\n    fn _finalize_mint_to_private_unsafe(\n        from: AztecAddress,\n        amount: U128,\n        hiding_point_slot: Field,\n    ) {\n        // We check the minter permissions as it was not done in `mint_to_private` function.\n        assert(storage.minters.at(from).read(), \"caller is not minter\");\n        _finalize_mint_to_private(amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_mint_to_private_unsafe\n\n    #[contract_library_method]\n    fn _finalize_mint_to_private(\n        amount: U128,\n        hiding_point_slot: Field,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        // First we increase the total supply by the `amount`\n        let supply = storage.total_supply.read().add(amount);\n        storage.total_supply.write(supply);\n\n        // Then we finalize the partial note with the `amount`\n        let finalization_payload =\n            UintNote::finalization_payload().new(context, hiding_point_slot, amount);\n\n        // At last we emit the note hash and the final log\n        finalization_payload.emit();\n    }\n\n    // TODO(#9375): Having to define the note log length here is very unfortunate as it's basically impossible for\n    // users to derive manually. This will however go away once we have a real transient storage since we will not need\n    // the public call and instead we would do something like `context.transient_storage_write(slot, payload)` and that\n    // will allow us to use generics and hence user will not need to define it explicitly. We cannot use generics here\n    // as it is an entrypoint function.\n    #[public]\n    #[internal]\n    fn _store_payload_in_transient_storage_unsafe(\n        slot: Field,\n        point: Point,\n        setup_log: [Field; 9],\n    ) {\n        context.storage_write(slot, point);\n        context.storage_write(slot + aztec::protocol_types::point::POINT_LENGTH as Field, setup_log);\n    }\n\n    /// Internal ///\n    // docs:start:increase_public_balance\n    /// TODO(#9180): Consider adding macro support for functions callable both as an entrypoint and as an internal\n    /// function.\n    #[public]\n    #[internal]\n    fn _increase_public_balance(to: AztecAddress, amount: U128) {\n        _increase_public_balance_inner(to, amount, storage);\n    }\n    // docs:end:increase_public_balance\n\n    #[contract_library_method]\n    fn _increase_public_balance_inner(\n        to: AztecAddress,\n        amount: U128,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(new_balance);\n    }\n\n    // docs:start:reduce_total_supply\n    #[public]\n    #[internal]\n    fn _reduce_total_supply(amount: U128) {\n        // Only to be called from burn.\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:reduce_total_supply\n\n    /// Unconstrained ///\n    // docs:start:balance_of_private\n    pub(crate) unconstrained fn balance_of_private(owner: AztecAddress) -> pub U128 {\n        storage.balances.at(owner).balance_of()\n    }\n    // docs:end:balance_of_private\n}\n\n// docs:end:token_all\n"
    },
    "7": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "75": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/noir-contracts/contracts/token_contract/src/types/balance_set.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, UnconstrainedContext},\n    note::note_emission::OuterNoteEmission,\n    protocol_types::{address::AztecAddress, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n};\nuse dep::aztec::prelude::{NoteGetterOptions, NoteViewerOptions, PrivateSet};\nuse dep::uint_note::uint_note::UintNote;\n\npub struct BalanceSet<Context> {\n    pub set: PrivateSet<UintNote, Context>,\n}\n\nimpl<Context> BalanceSet<Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { set: PrivateSet::new(context, storage_slot) }\n    }\n}\n\nimpl BalanceSet<UnconstrainedContext> {\n    pub unconstrained fn balance_of(self: Self) -> U128 {\n        self.balance_of_with_offset(0)\n    }\n\n    pub unconstrained fn balance_of_with_offset(self: Self, offset: u32) -> U128 {\n        let mut balance = U128::from_integer(0);\n        // docs:start:view_notes\n        let mut options = NoteViewerOptions::new();\n        let notes = self.set.view_notes(options.set_offset(offset));\n        // docs:end:view_notes\n        for i in 0..options.limit {\n            if i < notes.len() {\n                balance = balance + notes.get_unchecked(i).get_value();\n            }\n        }\n        if (notes.len() == options.limit) {\n            balance = balance + self.balance_of_with_offset(offset + options.limit);\n        }\n\n        balance\n    }\n}\n\nimpl BalanceSet<&mut PrivateContext> {\n    pub fn add(self: Self, owner: AztecAddress, addend: U128) -> OuterNoteEmission<UintNote> {\n        if addend == U128::from_integer(0) {\n            OuterNoteEmission::new(Option::none())\n        } else {\n            // We fetch the nullifier public key hash from the registry / from our PXE\n            let mut addend_note = UintNote::new(addend, owner);\n\n            // docs:start:insert\n            OuterNoteEmission::new(Option::some(self.set.insert(&mut addend_note)))\n            // docs:end:insert\n        }\n    }\n\n    pub fn sub(self: Self, owner: AztecAddress, amount: U128) -> OuterNoteEmission<UintNote> {\n        let subtracted = self.try_sub(amount, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL);\n\n        // try_sub may have substracted more or less than amount. We must ensure that we subtracted at least as much as\n        // we needed, and then create a new note for the owner for the change (if any).\n        assert(subtracted >= amount, \"Balance too low\");\n        self.add(owner, subtracted - amount)\n    }\n\n    // Attempts to remove 'target_amount' from the owner's balance. try_sub returns how much was actually subtracted\n    // (i.e. the sum of the value of nullified notes), but this subtracted amount may be more or less than the target\n    // amount.\n    // This may seem odd, but is unfortunately unavoidable due to the number of notes available and their amounts being\n    // unknown. What try_sub does is a best-effort attempt to consume as few notes as possible that add up to more than\n    // `target_amount`.\n    // The `max_notes` parameter is used to fine-tune the number of constraints created by this function. The gate count\n    // scales relatively linearly with `max_notes`, but a lower `max_notes` parameter increases the likelihood of\n    // `try_sub` subtracting an amount smaller than `target_amount`.\n    pub fn try_sub(self: Self, target_amount: U128, max_notes: u32) -> U128 {\n        // We are using a preprocessor here (filter applied in an unconstrained context) instead of a filter because\n        // we do not need to prove correct execution of the preprocessor.\n        // Because the `min_sum` notes is not constrained, users could choose to e.g. not call it. However, all this\n        // might result in is simply higher DA costs due to more nullifiers being emitted. Since we don't care\n        // about proving optimal note usage, we can save these constraints and make the circuit smaller.\n        let options = NoteGetterOptions::with_preprocessor(preprocess_notes_min_sum, target_amount)\n            .set_limit(max_notes);\n        let notes = self.set.pop_notes(options);\n\n        let mut subtracted = U128::from_integer(0);\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                subtracted = subtracted + note.get_value();\n            }\n        }\n\n        subtracted\n    }\n}\n\n// Computes the partial sum of the notes array, stopping once 'min_sum' is reached. This can be used to minimize the\n// number of notes read that add to some value, e.g. when transferring some amount of tokens.\n// The preprocessor (a filter applied in an unconstrained context) does not check if total sum is larger or equal to\n// 'min_sum' - all it does is remove extra notes if it does reach that value.\n// Note that proper usage of this preprocessor requires for notes to be sorted in descending order.\npub fn preprocess_notes_min_sum(\n    notes: [Option<UintNote>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    min_sum: U128,\n) -> [Option<UintNote>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let mut sum = U128::from_integer(0);\n    for i in 0..notes.len() {\n        // Because we process notes in retrieved order, notes need to be sorted in descending amount order for this\n        // filter to be useful. Consider a 'min_sum' of 4, and a set of notes with amounts [3, 2, 1, 1, 1, 1, 1]. If\n        // sorted in descending order, the filter will only choose the notes with values 3 and 2, but if sorted in\n        // ascending order it will choose 4 notes of value 1.\n        if notes[i].is_some() & sum < min_sum {\n            let note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(note);\n            sum = sum.add(note.get_value());\n        }\n    }\n    selected\n}\n"
    },
    "78": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/authwit/src/auth.nr",
      "source": "use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\nuse dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\nglobal IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n"
    },
    "87": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::hash_args;\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\npub struct PrivateCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub gas_opts: GasOpts,\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n"
    },
    "94": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS, PUBLIC_DISPATCH_SELECTOR,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        execution_cache::store(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            /// Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            /// for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        /// Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        /// execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        /// the number of side effects that took place), along with the hash of the return values. We validate these\n        /// by requesting a private kernel iteration in which the return values are constrained to hash\n        /// to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        /// WARNING: This is insecure and should be temporary!\n        /// The oracle hashes the arguments and returns a new args_hash.\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        /// We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        /// b) this is only temporary.\n        let args_hash = unsafe {\n            enqueue_public_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.set_public_teardown_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        /// WARNING: This is insecure and should be temporary!\n        /// The oracle hashes the arguments and returns a new args_hash.\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        /// We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        /// b) this is only temporary.\n        let args_hash = unsafe {\n            set_public_teardown_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "95": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, Packable, Serialize};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call_static(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_opcode(gas, address, args)\n}\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "96": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        /// Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "97": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "99": {
      "path": "/mnt/user-data/alexg/code/aztec-packages/beta/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypt/aes128.nr",
      "source": "use std::hash::{from_field_unsafe as fr_to_fq_unsafe, sha256};\n\nuse dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::utils::point::point_to_bytes;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n"
    }
  }
}
