{
  "transpiled": true,
  "noir_version": "1.0.0-beta.1+dec21f055eaccab1",
  "name": "NFT",
  "functions": [
    {
      "name": "get_private_nfts",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "owner",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "page_index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "kind": "array",
                "length": 10,
                "type": {
                  "kind": "field"
                }
              },
              {
                "kind": "boolean"
              }
            ],
            "kind": "tuple"
          },
          "visibility": "public"
        }
      },
      "bytecode": "H4sIAAAAAAAA/+1dW4gj2XkutVTqltRqqbune2Z2bpqZnV1DTCz1qG+QkI69ExMT1skGTPxgSE93z9o43oGdcYyNY8SCyQUTs4aASWDzGEgCfkvyFgiEvCWELLEx++IHG7/ZGL8Yg3FXT/2tT19/dao0qiN1e6tASKrz13/5znfup6pKwbNj8fhTin9X4u+54OxhMnvxd3eyo5ejrq5PP0s5+jkHPtYB63KMfXj8qR5/5o8/C8efWizXgLw6vYgDDkAwq9JFoeed6rPvGtkqxTr3cgK2Rnbz1L/T3bxfC0aPnP0/0W86PejfMP0VP/q787Ge3xmM6g/Irp376GCI5Ufpmmb8G7loei0NOWvXR3xcD4a/XwD76I/5wTZMp0+sdrr9HdMfetB/fOw3LcbBqH7DLzoqkFahtBDSQsDzWnVU7jWQY+x88Bix88Tjh6tBMnetDvjIwIvtfdP/CujPscE4rSMf+PH/fiPmyUsxT6L2YCnW/frR0w//yeODz776+c89PHoTSx3nZkA5y0ekdWWo9SOP33j65v7B098+PHzz6MkT1hAKzUGC1jpo/fT+Z9743UPWVn0+bZ84evPJZx6/wdrmM2ozHizE/6095nrQeGllpA7X51nXmz/Gpwr4Uxf+hCT/MsVl/YYy6FkQeky+Iewugk7DJCR5sxvp/mB1FKs58mkvJ6xqFHvOHcou53WeupuEH/pfE7jnx7He/RLZC4LROjkg+3XyNe/+JXPV/GF8jEeGXVP42hZpyA9MQztNYUfpmit0jaWrnqOuIh+LfCzyMZ98bAVn25gG2VH18aLDDl5vck1xHbdz6F+O7Vw3aztn9usCEx/tXDMjrobdkvC1LdK4XC0JO0vCjtI1V+gaS1eBfYH9RdNlbYDqRz9vW4PXNx12GhPaaQg7TXFdKeHb7PA5V9vZIDuNHOxYG4j5k+d8gsLLbFm+tCCN879FcfA5V/6bXFNcN2m+KJ9dfY3ntYPxLJGddo52UJfNyZid5RztLDviWcnRDup6ZfDs27i+Cml78Xd3sqNvMVwSMZjdNTif59xsFozQfp18zdmf037mGvnD+HA/c1342hZpq/Ab09DOurCjdJXIB8SQ82/VD179rPln9uvkq6/8WxW4qjJn2K0JX9sijcfyiidrws60dLUCzTP8rbBZddhR+ZhjfbTBJzhPguAsn7Ec5Mifzax8Nvv1wGv92HPVE4obht1l4WtbpDEHLws7l4Wdi6TLODqtstEU15USvs0On2M7yueW8GGN5NhOKcXOmrDjal+eNx7ls6vcP68djIf7bOs52sH6yMbUVlchF33snbniR3+vCToZw2iZ8l04H31stTwMhlzDay9DOsr/fzjU+e34XItkGONSMFxDR5mKyIeQ5N+Lvw2/qh/8uiugNyBbfveL9HYt764GZw9Lw31IXHddC0axxrTrkMZl9wakYX7xwTsoEItoHfxDtKcnELoUR7iuD0UcllYVcaj6tkJpmJ8hpWF9w3nNdcte/N2d7Oi5xgYl8iU6yuR7dPAc2byQR7x4HgTzAK9FO6GQrSf4WRHXqzJt8j+NvyPu/Gl11De8nufVMKYGpeE+mBalIT8WKQ3Hpm1KQ35Y/aDmy5hXOAdVpTScz5mnNJyD4XFNG9IuURrOdSxQGtZrXP7zmNdTMXP/dvprYtnHuud9TawlfFVc4jph3PlM37p8z1mPsw6L/s2Cc2Z/WpxT+efi3LLwVdU1zJNlYWdZ2JmWrvMwH18T/s2Cc2Z/WpxT+efi3IrwVbVhzJMVYWdF2JmWLt9rGeNwDv2bBefM/rQ4p/LPxbl14avqn3O/d5J1AB+6fK5rjcs5T3O9mTnHc72+Oafyz8W5q8LXtkjjuumqsHNV2JmWLt/zcoah3z3i3a2aiDHPNQrT/4If/f20eb+Pl4bno4/NFSXN+1UhHeU/AfN+r8U6zTbOTXB94Gm+LnN9YPbr5Kuv+iDr3I2au+O5AkzjMnxN2Lkm7ExLVzM4G/+k9QFyJyQ7Ls6hf7PgnNmfFudU/rk4d1342hZpzJPrws51YWdaurgMWbr6Njt8zsXtcTiH/s2Cc2Z/WpxT+efi3A3ha1ukMU9uCDs3hJ1p6eIyZOnq2+zwORe3x+Ec+jcLzpn9aXFO5Z+LczeFr22Rxjy5KezcFHampatJ/y1dfZsdPsd20E/mXFJf8mul4Xm8LqkvuQrpKP+TylDn12Odav3HtcbDa0O4/sDrPzhPvExpOJ+3Qmk477JOaTg+rlIa9luuURquRV2nNBz/zFEa5hfiwLwoi3Oc9/MZ7TQmtNPIaKc5oZ1mRjutCe20MtpZntDOckY7KxPaWclopzqhnWpGO6sT2lnNaGd9QjtFOS3KaVFOL2Y5dfWl/M4fbPZKZM/iwHNovy4wmdb8gcJ13PkDvl9xkjF/vdD1K6FrKUddBb8KXQW/Cl3T1FXwq9BV8KvQdVF1FfwqdBX8KnRdVF0FvwpdBb8KXRdVV8GvQtc0+OXaG+d3z9ph5ueymP06+ZqvP+49a2qfq9/9VYf9EulHf9Q+ObWfCfMu+tyK/+NeHLX/aY7k8bddj+feikFR+5OYt1n3OkXrjF+O/7REPHOkd9zygNczhnhdKeHb7PA5V7mztOg+BauXn3zxjYNXHz89ehKkHGrxkx/qMO7ip9qkrV5UMC1izwtfXcRpOORvCfmmQ74j5FsO+dtCftkhf0fIrzjk7wr5qkP+RSG/6pC/J+TXHfIvCXlVMVohehnSuFH5AJyfRaNi9uvkq69G5QPBWexeFthFFYM9nOH1o6cn9QL6jbreFXFh3CjThnORTIX+80NVboCveP5mwvlbCec7CedvJ5y/k3D+bsL5FxPO36PzlsYPxFyg//ygqqQyoHANSJbzw/6zr3mlBx51550eCHl1rZ13cVttCuYX/+AG8LI4x+0iXs9lQ928pcqyyY/74B20N0/XzSf4VU7QrWzjdXzjnctnV4wLQh59vUIxol27tiauy7Eu3knbuP7PczomtXE9OvilUyb/W7Bx/VvUgUXb1wkTfnAY+oL1dVmcY/7i9fjSPb7OypTfFwX2t0tkLwh0u2z26wmY7OXiz7BdDjPiyjcu4rVqY2TSQ7DQjurLFbrOl66l90GMha6CE4WughOFroITha6CE4Wu6eoqOFHoKjhR6ErTVXCi0FVwotCVpsu1nlAhO+Oui6iH+LseQsTfZofPsR3ls2v++nntYDyGm+eHEm7zzeVoO7L5++Xh+eij1iFwT0fSOsTfloc6/zD+rfaQGNZqjaJCaYgX6uB8ybJGMSfszG6NovswC4fQ/nldo1BrhG2RxnWOWvNT+3EKXYWuWemaVluj6rs2+YD2sP7+AtXfFgfW3yVhMyT5r0D9/SWqv0vCLztv8VWCs+vWeK3SZVg0xvCfdau9ACh/JSHetyDeb1K8Sfseoo9tpJxLsGftuLUfDfJ9L/7fnejob5ndRYEXbsJvUPwm/xdxzBF+X6yOxtgQmGIfgNviRSGPcZs/hi+W1cWp4NXdd+FVyoDX1wVetr+zPBhePw/xREdl4CWeh5EfXwY/EOcT/8FuUp6i/Lh5api1SR7zV9V5ZhPLnarjFkDuCwl9VCyD6D/mgT9ObXbNH+MBcmoBbDKnTP7vxyyDZTjH+aVe4oRxmz9WBrGO4IeoKdsYj9Wpfl9eNMR3GfBTsbUgHeX/wYGvegGRC1/18hiMmx8Mqh7wmRVfe9Gl3xf1DPFdAfwUvog/yn/Lga/Cy4WvelEKxs34qoekZsE3Oh4Mnn37fSnNEF986KzCF/FH+X914KvwcuGrXkyMcTO+iD0/XC+Nv/ZiCb8vjx/iewnwU/jyQ39N/t8d+Cq8XPheEvIYN+OL2F8iXWn42otBauJ6H/iuAX4KX8Qf5f/Lga/Cy4Wverk9xs34Ivb8Uuo0fLlP6ufl7EN81wE/hS/ij/L/48BX4eXC1/WCeIUvYs8PxUzDl8dI5xXfb88QX8Rrnfyzvtt7MIb9jcro9di/4zlXjJ3n6F1lPTp4/tfkvwdYfSMBq7lA48988HPT7XDMfF3EiHmBLyRC+R9kHAPiC9yjozLwEs+2GgMiz0Kwi3EFwTBu1z14rpuTETN18ymPKWpCF2LOYwo/dcKQA+qlUzURG7906icZObAO8URHZeAlHskBHAsyB1S95bpPVXEG88biU/f48kOz1ZgLMZ82B1S7gD4ntQu/yMiBJsQTHZWBl3i2x50LUhxwzQWltV38Ql7sD/DYV81TIObMAT9j3yEHVHunxu7c3tXjhvM8twVY3pgDrvmM6MjS/8a84ReBqxfVu9oCxHzaHFDzH1gvJc1/rGfkQAviiY7KwEs8Y7cFigOutiBtjobbAsx3nkMYty2YBQewXkriwJ2MHDivbYHigKstSOMAtwWueY7z1hYoDrjaApP/9fdZW5DGAW4LkAMLpEut3+LY8ArJ4/qRa52Dx8q7kEd/Ux31D9enmL8VoRvH26445kQcaj8W6s2yH6sM14YUr8l/GO4L/1GCr3MJOnl+EctAfjztns7PWP7hHoKm8Cck+Y9RXMbBcuCeN+U2CO1yHYN2W2Q30v3BDOt2l0En89/irCbIJ60dvir47De/hs9SwvU2VQabCbi9JupJV1vgegaE6j80BW5qPo3HpWlrp1cSbFfHjP+Tjjzz07YN8+x527ZPOfJMtRuuPMvabrjW+Fx9DsPOFR/qaAnbJUjPwo3LFKPZycoNk39dcMNVp6BfDwbpPqiywT581uGDWoOfEzpVnR4EZ/OsRj6Y/GPw4ZsXpIw8mWEZUevILttXhC62XU2QT4r/S456zc/a7zDP1NqvWrvmtd+vOPJMrf268ixt7Zdf8OoaE6k8wzqG88zsJPUfOM9M/qsXMM/+coZ5hrhfojT0nR+Cugr2VV+b96rNYi1UrZXznPc3Mo5xlyGe6KgMvMTTU2NczNMQ7GJcQXB2/0B0jDvnbZipOe8S/VZlGjGfzrqHmwPI4SQOvJORA5cgnuioDLzEIzmA9UAWDrieWZrGAcNMcSCpP4S6EHPmwHnd0/OPGTmwCvFER2XgJR7JASxvzAFV77ueo5t131GWdQ/Vt1PjzFnum1Nz9twO/8sFaAuwvDEHVF/B9WzntL6CYdYOzvKD+2tqPImYMwdmsTe1KWLj/uN/ZORAA+KJjsrASzxj1wOucVZ0jLt/lue8kR9V0uUaz58XDmTZn/zfF6AecK1/Kg641j+z7qFWHHjedY9Z3gOAPieN/b97rtY/x28LVN/c1Rakzc8YZmrti/daqrbAdZ/NLDiQZf7rBxegLcDyloUDKJ/n+ievL+J8Aa4D/ijD+iLOI/D6YjlBrz132vLQ1g9/Cnn4dzS3EgIOWdYL8YUsOa4XPjJ/1ItlcA33ZjAao8n/zDF/pN734Xo/iHrfB8bNe67xJTq3gnTbGA/XAx1I84Hv7WCIn4qtA+koX4qdVvh2RIwufG8L+Q7ImD+GL2J6m3Sl4cv32+H1PvC9EwzxU/gi/ihfc+Cr8HLhe0fIY9yMbwfS7pAuF77R8WAQ+y+u94Hv3VhfEr6IP8ovO/BVeLnwvSvkMW7GF7G/S7rS+Mv3251XfK/OEF/E6y75Z3XzzVjo5BlG4ej1WH/z/Sqe8L7vwhvb3yS87wq8Vb/sBsQTHZWBl3j6ql+G3A7BbhIn1MvbsnLCMGsHZ8vZLUrDMTtzCblg9zvUgrPtkA8uqLajLOLgtqN7wbng6m9FR5b2jfMmOtrBWZ50KA3vaXFxwfry0+JCx7AKsnHB5H/zfcaFjpB3caEDabcpDcdrLi6YD+edCx8ruJCZCyGloW6ziX2HEl2HNrOO3UPQ+7XSs998T+IfQR7y2P0a4KBs873ufl4w29soEU7IU6xfbwSjMZr8pxx9R/VuT8ScOaD606pNVy+CvRmk28Z4eOzupx4Y4tsJhvip2JLqgSMHvqqMufDtCHmM2/wxfNXcQlZ8eeyO1/vA93asLwnfDqSj/OfGnBtx4XtbyHdAhvF1zY248I2OB4Nn337nRob4qv7tDeE/928/P+bciAvftLkRxrcDaTw3ksbf6Yzdh/jeDYb4KXyTxpJ/NubY3YVv2jiN8UXseW4kDV+emz6v+H51hvgiXjw3Ym3fX8HcyP/R3Ih67oPqEzcy+GT5Yvn1Ip3fi/93JztO+833IF7l14uEh8m/nbHfjGPC6KgMvMQj+83IgxDsYlxBMIwb5ZlT94Q85o1h1iZ5bN8tDdcUzabiEt43zWXfBxcwrxUXuGyY/DsXgAuuMZSqL1xjKBd3FBeQJzzPhvfg8HgauYB7SFCPLy6oevyOiIPr8X+64FwYdzytuIN5w1xAnnQoDdfQXVyw9fRZzq24uGDy//Y+40JHyLu40IG0a5SGeyaYC9hfwecsoawvLqi9B2rdifce/GdGLuB6QnRUBl7ikVzA530xF9ScCcqPuz+CuaDGqGpfPd9fg2NVO4djglcGo2l2fVXIoz7u//4v5B8/P6Ahrsd+svJ13HlA1Pvx0qiPtq/sO9BHv0L3dOH6Z448Oh33VAE3FVsYjPps8u85xj1q3tR1z05VyHPc0aHet1ClNLxujdJwbZDv+7E1a6U7+s33vZr892ODll9Xye+9+H93wgPr1UDYQn8rQeDcz8F5aT+irx/SGBHxtH2xCs8SpeG7GDgf0G9uB/w8Q3LYDqhnSKKvSfXIjzO2AyHEEx2VgZd4ZDtgc1In/oPdpDoM5blMpj1D0jBT62u8X1a98wkx5+c04NqJkud3oZj8zx11Pe7pfoF8xzJVpbQ1YVe1b1fB5+nU4b3dJtnGgzmBGFga5meJ0jA/1ygN213EgI8y/Ucsojz6EJWjQOjKsx5aD0btnZdyi/nH5RbLaFnIc7l1lfPot72DSO2RYH5jmblKaVnLzBVKQ75Y3mCZcdUZWftcFdD7LpyPjvnBqN6Tbzhn+BtHFlCe0mqQVhmM2qnH/60tZl3mR0jy92IcTp9VA9fY9W1hv0r2R/wW55A3rKsszpl85N7N2Meo/+yzvGzvPHvW1IlPsf4wOFuvoP2Q5H8t9hXfXWTflQn8fLS933t0f//R/ub+4WH/YJ/7Z4hZw4P9rf5Wb2dnf+dg6+DRbv/gYZr9qN55idolrDdzrON6pn/ej/6ulXlsE7Au6VNdot5N5uoXm/zvQb94G8ol2+Y2B3GdozTGBNPwHiKrwwzLGl23F//vTnb0DUvjZwDxeH6312aJ7AXBaD0ekP06+Zo3b0tkz/zBPI0O3iO26ClvzB91v1ld+BPNwy4FZ/MM/TNd2Efn97whfyd95zBez/0EzGPXHi1+LxlyhMch6rmPjcBd/kokr+oJvhb/BwnyOLeC+v8A6pWnVK/w/aaYhnUA1ytcJjBNvTfC8zMiT7m7lIIpP1fN5D8Z45L1mYOuZ98uCXmMOyS8sLzw+56X/OB1Oj/RSsFrifAy+T924KXiX3DgpZ7RuOTAC7HEa9l2Ul00LS6mYZv0/MdPC2xn95zg7qYaQ+J7H0Owm1ReUD5L/qvyotaCeXyJdTzfY412FykN62au/7GOt7oN69Ks/cO8++TdjcODraON42HL9lZvY/dw2mOCo53dw+7uo6P9Xq+3cdg9SrOvxpjI5+iwcSqOY1He9IUkP4A27i0qM6GwF4m87ZArJXyf6BDnKoPRc2p8i+N+kzfb9cFZHy2tAWlY1qJjMf6PeKEu8yMk+b+mcT+O1e36trC/QPZH/BbneNzfEPINIR+59+dUbjD2vPvhJzZJP55j396GOYm8y1X/eLC/9Wi7u7lx2D/aOJz6WL+/ub99sL/d6+32e0f93ua07e9vH+32t+5vHNx/tLu/092Zer32sL+7/XD3YLN7XL31du+n2f8l4PX7kf4PAQA=",
      "debug_symbols": "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mDer3kTzZtWbZN6seiPmzao3p+tfd/TmdL3ujt5YX7zujfXFq95U64vXvbG+eN0b64vXvbG+eN2bZN6semN98bo31heve2N98bo31heve2N98ao3zfridW+sL173xvridW+sL173Jpk3q95YX7zujfXF695YX7zujfXF695YX7zmTXTWF697Y33xujfWF697Y33xujfJvFn1xvridW+sL173xvriVW88QX8T/eRNii+uf9JA0IdkN2kodUEDQb+gaiDguqqBgL+qBgJOqhoIeKZqIOCOqoHgfRNVA8H7G5qGQMBpVcMJOB1OwOlwAk4fMNP2vRp8CqMGn92CBnxO6xrwOa1rwOe0rgGf07oGfE6rGiI+p3UN+JzWNeBzWteAz2ldwwk4HU/A6XgCTkd8Tocgo4aw9F5lxOe0rgGf06qGhM9pXQM+p3UN+JzWNeBzWteAz2ldAz6ndQ34nNY1nIDT6QScTifgtOBzOro6ari8x72gAZ/TugZ8Tusa8Dmta8DntK4Bn9O6BnxO6xrwOa1rwOe0rgGf06qGfAJO5xNwOp+Acfgzba9zWW+lXOctKde/PuM14s+03VkvfGa/V+9+n8fFn2l7nDf4M20P9AaeXQd6A793PdAb+H7hQG+SebPqDfwe/kBvTte/7ujN6XrdHb2xvnjdG+uLV73Bn2l7oDfWF697Y33xujfWF697k8ybVW+sL173xvridW+sL173xvridW+sL171Bn+m7YHeWF+87o31xeveWF+87k0yb1a9sb543Rvri9e9sb543Rvri9e9sb54zZuEP9P2QG+sL173xvridW+sL173Jpk3q95YX7zujfXF695YX7zujfXF695YX7zqDf4s5AO9sb543Rvri9e9sb543Ztk3qx6Y33xujcE/U0b5zr46F5686SBoA/RNODPZL6eLZ401LCgAZ/rMeRJg+QFDfj81TXgc1LXgM8zXQM+d3QN+O+b6Brw39/QNeBzWteAz2lVA/5M5jdoOAGn8Wcyv0HDCTiNP5P52tONGpIs9K34M5nfoAGf07oGfE7rGvA5rWvA57SqAX8m8xs04HNa14DPaV0DPqd1DSfgNP5M5jdoOAGn8Wcye/HTe5UvvvqoAZ/TugZ8Tqsa8Gcyv0EDPqd1Dfic1jXgc1rXgM9pXQM+p3UN+JzWNZyA0/gzmd+g4QScxp/J7LOf3qvMaaFvxZ/J/AYN+JzWNeBzWteAz2ldAz6ndQ34nNY14HNa14DPaV0DPqdVDQRzrXUNJ+A0wZxoXQMBp5sbNZSF3/+QCOYu6xoIOK1qIOC0qoGA06oGAk6rGgg4rWkgmLOrayDgtKqBgNOqhhNwmmAOrK4Bn9OlpEnDN9c/acDntK4Bn9O6BnxO6xrwOa1qIJhtqWt4w2taanpdg3c5jrfxz367srSlq+W2twzPzInOLVxb0/gh43rZr41Xh7J49nH8yilMWkNeuDREN1bx/FfHXS5+8qWYL4u+VPNl0Zdmviz4Im+ZAfeQvnjzZdGXYL4s+hIf1JfQwuiLk9cv9m76qILLdW5iMhO3myhmom6ij5M+8XMTH7Xt3tXER+3RdzXxURv6XU181O7/fSbmadBNnYPFP2rr9y4TkxvfaU5u/iR66xN3MDGZidtNtD5xBxOtT3yDiRJGfSJubqL1iTuYaH3iDiZan7jdxPCobynvauKjvv+8q4m2Y9nBRNux7GBiMhO3m2g7lh1MtB3LDibajuUtJpZxGI20MDfRdiw7mGg7lu0mRtux7GCi7Vh2MNF2LDuYaDuWHUxMZuJ2E63ZfoOJ0Y8mxjj/GUu0ZnsHE63Z3sFEa7a3m5is2d7BRGu2dzDRmu0dTLRmewcTk5m43UT78cAOJtqOZQcTbceyg4m2Y3mLiamMbuT5D6qS7Vi2myi2Y9nBRNux7GCi7Vh2MNF2LDuYmMzE7SbajmX7EQyxHcsOJtqOZQcTbcey3cRszfa3Jg6+LA+VK/E2C6KkOFuzPACtpduNmszv00LHmtixJnWsWealMhBjZYSatqp0rapdq1rHqrwyuklb5btWha5VsWtV6lolXaty16rStap2rep6NnzXs7F8wv/VjMnLB9qbu801bGFhzftf+3n5kKhyn9qxpr1/zfKJN2XN+7M5h9CxJnas6fj+LB/OUNbkjjWlY83ycyC357qVMF/T3r9m+XPEyhrfsSZ0rIkda1LHGu05WFrT8RzEjudg+UNQypr2/jXLH3FR1nTkQerIg9SRB6kjD1JHHqSO5yB1PAep4zlIHc+BvPM5+Ofyt//94cvHH3789MsflxXX//nXbz/9+fHzb1//+uf//X77Pz9++fjp08dfv//9y+effvn5ry+/fP/p80/X//fBff3Pv33O7jufq79Uc/22XzY68TsvJV6rGy6Qkq7/0K7/4IcVNVxXpEstl3r+Hw==",
      "brillig_names": [
        "get_private_nfts"
      ]
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "364657447181031001": {
            "error_kind": "string",
            "string": "invalid admin"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "admin",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "name",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "symbol",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "7V3bTh07D34XrrnIyXHcV9n6VdGWXSEhqCj9pa2q775nwZrMwCQrjDGbDOMbxIJ8y87nHBzn4N9n3y6//Pr++erm79ufZ5/++n12ffv14v7q9mb49PvP+dmXu6vr66vvn+d/PjOHH+jsA+Dnj4ubw+ef9xd392efbIzu/Ozy5tvhV3TDV/x9dX159im6P/87H0DAAHnDAbEkEQMUPAeUGCDgSAJkgCLHuDEyQMiRhGuNe74sDEhjYSDKha3FQukQAh5LhwAxl05QKJy8gWPh5J2dFz4on8zrlY9uKhyhobzzyR9Lu+BnpYMvfTdiHL87ufik9KB+8l5W/VnhsvoYR+0HzXJZsA/aBNuVNrEnbUCgoaHJjQGjaWjjrbPH0t6m0GhozrqxBzpLZtHQKAmrj68gk0zsSRtru9JGYDhOzudRxzeHY3LjCBsohNPDsTUO8ncbR+HZgEzObFv9jbNPm1bfh22rv232w7bZD9tmf/XS4vXqp1F9MMY81ye6zvTpjB+0/7k+ECd97OnmFmlUA83U1AYv8VH3uF3dkwTvYdI9hobuYH1uBzY2dF+nR2tMSHE/dSWzo7rCbupqh6FzT5Xdk2Xtnixr04eprEMcC7snc/fBy1mUHjQd5+4UZ6Elh7Y002OO1wa0Ux29D488Oq88ivCIyqMEj94pjyI8ansU4TFoe5ThUdujCI+g7VGGR22PIjzGjxP/eV8eP05s6V15xI+zCH5fHnV9LcJj0vlahkedr0V4JG2PMjzqfC3B4xDIVR4leLRBeXwRj5QPOyOlJY8af3wZj8mMB1xDcq7Ao46PSx4fmAm6Qqkx83F2a6WZod0yQ5kZ9L4xKqXgcumAoVHa50NQwc04jyWlLYVR6cPJp1nhB/vsOOqwDfvsd2TZhn10fOvaPmm/p0S2YZ/9Rms3YR/S/tO3ffYbXd6CfdyOo4TbsI/6133bR/3rru1j1T/o2z7qH3RtH7ffXZtt2Ge/u0GbsI/X+HXf9lH/um/7qH/dtX2C+td920fj113bZ8e3jrZhH/Wvu7bPjm9JbcM+6l/3bR/1r7u2Dwa1T9f2Uf+6a/vs+JbgNuyj+z8928fr+YN3to/zk30CLOyz41fG+rAP2pyP4Ikao33UP+jaPju+lbgN+2j8rWv77PjO5TbsE9Q+XdtH/YOu7QPqX/dtH+0/Xdsnqn/dt30kMtQRTPZp5YTzxkzp/lyrtOzbKV4il82Gagt7qq1EhtQN1XZXtqVd2Zb2ZVvaUW2D8buqbdpTba3bVW1xT7V12/UcH/Xf7pzyoL/frgfwqH/oXP8tnEYI0Hsr3gSLsfe+tA0WtUdLsNi7h7gJFrH3VcU2WNS2KMBi6n0VtA0We4/Lb4LF7uOG22AxKIsCLOrs8noWwejsIsFi77G7TbBoe48JboNFjekIsOjU05FgMSiLAiyqpyPAoteYjgSL6ukIsBjU05FgUWM6AiyCejoSLAZlUYDF3s+ubYLFqJ6OBIvq6QiwiBpfFGCx+9PpW3jbIxr1F19/wylqlFaERe3REiyqvyjAolN/UYJF9RcFWPQ6u0iwqJ6OAIsapRVhUT0dCRYl3pVOZixMNj7h5UGGRAyzJUPk/YqWDIGZmDBlGdR6IyPaMLa4wbGfNHLweNstCkRBnLHjqx3OeNvQKEQ3ajT8Or2tUXy1I/n8EEfyCeeFH7VHAe1znxy09w3trcGxM1hrw5JPiTPRhDhpFJatKOHby5C4md6Qgaa8v4NhjJVYBDwto9W+sfKqLU4PzSDQXMYDyhoWKnFQlTUOJswTi4kNpr3LInyYvVcTS20Ykx8Hf0yQTvdAjH5s8Di/7lh+ZGfoEm7qHsk/77BYOTDyMStbuQk6TM+5sqnVvmEc7IeWnIt6MEcJ9NYSKlm/JCXgW0sA++YS4ltLiG9eh0r+FkkJldY69ecU4mJ8rOTFaKESB1WZvVuoyEFVbqy0UCw2iMNGqrxg0kKxZFVe1CCXfQGK8TWtL1VesRCUUHk5QlICvLkEemsJlVlRUsKb16EyK0pKqMyKNC3+nF/0okqOwRaKJas2IzVQwEIRB1W5K91CsdhILDZqM8dpFLFkCazoII6LLUityEMI2XEIYbYyq6zzDeR1vrPPPWkyrz8JCOSnhWJLd5crGlxq6E4hfzOBg4XuVs/IvyTK6M1Y1vl5YOUxyki6EyjCorZFARZ1D0uCRd3DEmFR26IAi6BtUYJF3U990VlQyo/Le7M4C0r6ZpsIi0FZFGBR/UUBFvWmgQiL6ukIsNh97oRtsKiziwSLekZegEV9s+31LDrTfbaGTbDoNUdoxyv0wT6a471r+2iO3c7tozkou7aP5nDt3D7af7q2T9T+07d9UO3T8/oHNQdy3/aJap+e7ZN0/dO3fYLap2v7qH/dtX1I/YO+7aP+Qc/2scaqfbq2j/afru1jdf+na/s42q19VuVwR8p3y5CmRx2OOdyd9fuNY67iMdncdNPs2t3E437XE6I8Bm2PIjzCfv0/WR7366et49FB5nH2glXmMWp7lOFR26MIj7jf+Kwsj+qHi/C44/0CWR61PYrwSOqHv4xHQ5P/6Ao86rpQgkdntD2K8GjVD5fhUf1wER7dfvd5ZXlUv0eER69+uAiPO76fI8vjfvchRXkEbY8yPOr4KMOjrgslePTlN0Mhn0qA2YXx49kBX34hs4HB9RjvGBiGnMCQExhyynuKDQysx5Tf9WpgAgND6zHll5IhjtmMYNa1MgbXY8rv6zcwxTUp5LTEcZGV2Pny2/oNDKzGBGMYGIYcy5BjAwOT1mMq485pDK7HVMad05j1bSeU3yU9jSlnwT6dOW1A1Va3eQKMadEfQvW9l9MojiwwyEFZx0KVY0+I48B1eF9lgarkXGihgIUiDqpyFq2FQg4qsNgILOaBJQtYzAOL+chiPrKYRxYbyGIDWWxU9mJbqLJHTzZ70uSWqMo+WwvFkRUNR1as2StNZMzccjiCgAGq3GlsgFiSiu3CmbyOMX4JKpuqBUrrQWgYkrB8AtXlHJLuyfLpCCofb/M5daOnAqh8lqshqZzOpAFCwwCVkz66fKzdG7sEle+btUAMSans1TZAZbd2DoICCBggx5FUzpbQAJWn+wYoOA4oMkDliKH348BySEC0BAEDFDmSyg8ON0Dl1WsLxJGUOJLKPXcOWo7lqdxzW6DyuOfHyxJDbGABovKdOp9P0pRBkQEqd/fTwzKVu3sLRAxQ5bIDTAkQgWY5neOjJ1HNwOBzKugI8AS2DAgO09y4NsJgpqBnOUupTeOUic61Yp7W+LzssiY+SWb0oH8lZ1ikKWutSctqV5KGtWCRJw0ND1bJNoY2h5gJW7Z5twyyjmr5KDejf8WjzxpZiq5b/Qefpay/yXGdoUelZ2sLbyqnP1qo8jhiZ90X7ALlLQvFkhUCC0UcVOUlv2Eszai05LCyMh7itCMqmKWs8qzeRCEHVcnd10KVxzGYcqoCmOcoW8ma10KxZFnPQiUOygUOqtJTWqjIQZX9+SYKOShgyarcAIO86Tk4O26Bqtx3aqFYsip3WVoo4qAqI0ALhRwUcTh0lb7spyiX93aJAhaKOKjKCNBCIQdVifq3UCw2PIt5z5PFYj6wmA8s5itRfz8tkoaN7iUqclCVtUILRRxUZbRpoCqx3RYKOChiyarsFp72N1wlEn8aNbiwLFRkoKA8HuLk/Qe/wJRHDcprAAJYYoCBofWYctiwgUHGOgOCY6EiB1UZLVoolqzIkhVZspAlC1myEsteiSWLWPWqrE5aKGKgart9LRSnp8TyOYaTY0wsn2IgM54emWdmHzGMcSmWPYXTcsp+QgOD6zHlXt/ArB9nY3mHoYFhyEHPwKT1mMSQkxhyynsLBGO7JnRLDK7GoFkvB8t7BA0MrMc4hhzHkdPyBQqY8m2dkzZFv97nwMCQU442NDC4HhPX94XKvnoDs348wGQZmLgeQww5xKgPrW87yXgGZmU7+DN8+v/F3dXFl+vLnwPi8M9fN1/vr25vjh/v//kx/ufL3dX19dX3zz/ubr9efvt1d/n5+vbr4X9n5vjjr8MZ/RjxoMvwidK5NWn48DDkhGG7Lng4fDywDtacg3WDCoMa/wI=",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "prepare_private_balance_increase",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "random",
        "decompose_hint",
        "field_less_than",
        "lte_hint",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "get_admin",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "10055739771636044368": {
            "error_kind": "string",
            "string": "Function get_admin can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgACBAEnAAABBIBFJgAABAMmAgEEACYCAgQAHxgAAgABgEQkAAAARSQAAABGLQQAAYBEJwIAAgSARCYCAwQBOg0AAgADJSQAAACbHgIAAQAeAgACADI4AAEAAgADJgIBAQEjAgADAAAAbyQAAADEHgIAAQkmAgIAAQo4AQIDIwIAAwAAAIskAAAA1iYCAQADLgwAAQACLAwCASUnAIAEBHgADQAAAIAEgAMjAIADAAAAwykBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEFi40qC3IiUlA7AQECJS0AGMoYyg==",
      "debug_symbols": "5ZXBbsIwDIbfJece4thxEl5lmlCBgCpVLSpl0oR49yWIBugqqnVll12qpvrs/4+dxiex8avjbllU2/ogFm8nUdbrvC3qKqxO50ysmqIsi93y/rOQ8WH0hT/s8youD23etGIBzCoTvtrEV6NChm1RerHg8PodllJ3sFQ6wQBmgCYic6WJNCfa6gHYYkptUcE9/J4JK2fwbhMczP+h9znqTpDqzmN1B82J5kg88+7QdbAjpJ53h7N6B/noPSrYVyuEir1cAuDXEuxkd+LYKRzpmkyZnbS61zWAn+44BimYEjRFCWlKkBsKQu3wGoQMMNLFkCR1kW9nPcgN0AZtl9qQpOcNMZBuF6Mer4AhHxLxdpyY+/0j+id7PYfVR94U+ar01wG2PVbru3nWfu59b7Ttm3rtN8fGxyF3m28QZ4RyGdLlFwgL1BmaoBF0vgA=",
      "brillig_names": [
        "get_admin"
      ]
    },
    {
      "name": "finalize_transfer_to_private",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "10536464181608181124": {
            "error_kind": "string",
            "string": "transfer not prepared"
          },
          "11859452850824495745": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ],
            "length": 60
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5527120278801020911": {
            "error_kind": "string",
            "string": "invalid NFT owner"
          }
        },
        "parameters": [
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "hiding_point_slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "7Z3djty2DoDfZa/3QhKpv75KcVAkaVossEiKJD3AQZF3P57xWPaONHZtazRLmjfFbCONyU8ci6Qk6p+n3z9//PvP316+/PH1+9Mvv/7z9Pr104cfL1+/dH/98/P56eO3l9fXlz9/m/7vJ3X6j0Z37vD9rw9fTn9///Hh24+nX7Rz5vnp85ffTx+96b7ij5fXz0+/OPPzP89P2qotneyGTm7Lkxxu6RQ2dPKwpdOWJwWzpdOWwY16S6cNTzJq7eA+542VskNjZWxqrLUvtEZEf2mNaF1qHWyhcYD01QGMnjY+C28rCB9S4076hsLrGuRRJ/Juiby2LrV2pxZzwkeIQ+OIgJnwoarwWr0V/vQIA3d/BOj7P6L4o4xWqYGu1WH+EejM8IjuY1wyOm+S0QV/PW6oy+JAEmdqGTc01gHG37tabO5Sa61hBGRjqXVwQ+M4YgGleukdZenLMzYZ6S1l6R1p9o40e0+avUfS0gfK0gcgLb1/59LbQXozcXxP0hfcCjRD44B+dAeN14XWkL4ZjRrbukJToyMOUhht5hvbJIQ1ftr0hDu+d9eGGe737ouxwg1KrLspbrHulri1WHdT3O89nmCGOwruhrgNCu6WuN97iMkLN7z3mJgZbgnia+N2A7puPeoa97tfn2CGW8Kclrjf/QoQPdyprXvb9ITby8ukKW6JKlviDvIyaYpbrLsl7ijW3RS3WHdT3JIRbIgbleRMmuKWjGBL3NoI7pa4JSPYEreRIL4pbskItsQNEubswn1miMJwN0MJSHYzRIky9jMU52o3QyvxwH6G4gbtZvjuz1xRYCh52f0MxbfZzdCLb7OfoaRFdzMM4tvsZyi+zW6GctiwAkOxw70MrRIfez9DFIa7GYqPvZshiG/zLxgaGBmivWYoO6z/DUOv4yCFB9jc+AxcXp6VgWs36ueCzoDLm7YtcCdLEm2Be5kHGwOXQKw2cO+HL9Y+Zl5KkOxBY+CyjNIYuHgpbYFHWaBpDFzcwqbAnVRAaw1c3MK2wKUKWmvg4hY2Bi5uYVvgRtzCxsDFLWwLHGTSbAxcJs3GwGXSbAtcDvJUBx51ulIpmhy47IxtC9yKhTcG3t4t1CEMracbZW4A7/53Gh4X57/au+ESPB9G3tqdbzxzzhxH1eOM6gOK+z1K1SqF9cZtat1np5ZUhYnwbyUqSA8Jo0f15mrGQmOd7rf05u0llCU5FIxvaeXeXHB5RuNqo/F62vz0jCpb65eeEe/+DK+wwjMA029AgbcLzcGk0QOMS2YUwKVfgQ0LZuSShXoX1ZIZaRwvVe1+9Fdm5HWNX5hVI34LC794hEEgnNyT6lwvjn1X4pgadFy6qLb7vHSJ6U1xdjVd955SdrjktPtori2myp0O3JhEYXLNBMROciZiJxkTFDvJmQRhcs2kSi0Vbky8MLlm4rQwyZg4YXLNxItvnzORuThnIj5bxiQecy72ITHx8YpJ0HBEJl2OdGisvcqYsPFP/MhEx58LObeU09bdAlRqbEIp9xdSsjz4t21PAA2bH9qjAIoF7gMIbNzp+wH0Q+MwyccngGx87wcBRLHAnQCtAFwAGJUdWOiQAbRsQsVHARQL3AmQTRDaAqBxGUCHAnAfQLHAfQC55Na00UNqqPs4vqrgtJU0b+1jah3MZD/VBQqTha6VUIJJm8wCmmsogUkmabWlqBEKZFAOaimjxGGyd/ECJYqlTK52H6CQtJRO8qhIDudJck0yRj9LTjI9c5LckrWWSDKePkuOZCUn6b93kmulqELvRKdLXdOlrql6AFrRXPDrRSe51HYWneYiVy86Vf9FK2SSVgcTh8QPAEySt7oo8RjqKBi/+RT1ZI29GndXmGnTnh+TrPqj+HFZ1rkjPxhzpTHnJ/a3yC+d+HSQ8XNMsjd35BfSUcfoc35MUoKP4ufF/hb4hUk9i3z+4LJ4cU9+wxcH6zJ+gcnOqDvy84MQofD7pZmMegy/WPD/aKbECvxQDzIAWjvld9Kze1Gx0VPP6amZbJYGVDCrJ5vxnNfTcIkvFvQELnHokp4k56tedLIZZY1Ulwk70elSJ7s424lOl7oju3qiaR7RPovuya6eaM/FxRjr6EHQ15vnOj25hDoLegY8iJ4HGU82KY4lPY8xnkYdYzwNzX0/6/WkuUlog54HGU8uhQwhYEpFBOszPbkUJ1zU8yDjSTPJUdLTmaSnd7meXJYcF/SkmT7ZoCeXVH5Ix/wgKpvpSTMxs0HPg4wnzZTPgp4Ff8hz2aKwoGc4yHhy2XJy2jydZPBvjkDmjW2XRrk0tl3ElkGJTAZ/HRSDLkFx+cwcD2kpndoDFIDMzQZ1TEtZgMJkDWEdFPBDY4vTvVUXKJrJnoZ1UDBVCLVWuRzKIS0FnRuh5D8fLnesrIPi/OCnWP92Ss4bezdeD+QC5ARRCO4kyCRN9jiCXBKqDyQoNriTIJebZB5HkMvdGfckGAftvNc6J3jIsLEmQS6pxQcSPGSYsYqgTwfTvJ/cEDkQDBKT7CUoNriXoPiDWaoa2BQ8rAqFS2nMilBQMVlxrguFyfJ0VSg0a1feG4rEMTkUSVWXoKBAyaEcckoO6Xy+DdbsSkV1MgrBnQQPOdnXJIhig3sJig3uJMjl2vPHEeRyc809Cc4mlJHN1TWPIyg2uJMgm0tx7kdwPqGMbG7QeRjBY2afKxK0x9yicZtgD0V+mDkU8XsLUMSVLUDhUsa4LhQJvHMoXKqs1ITiaF46d28o8vPJoRxzTXAByiHXBJ1OhfE7q/A5lCPu/nI63TbTQQkZFC5lfutCQYGSQzliQOhMqmLfvT+yw5OOS4mflZaSrkbooOQv2kOmDpagHDJ1sAjliM7bEhTHZEpG5YeLnrADlBoHW2gcjR+ctwgqTBv3UJhMyR7CeHvdEhSv7ODmdx9NDoXJi7YqFC6Zt7pQxFJyKFxWb+tCEUvJoUQmzltdKEyct5pQPJdiVHWhMMm8VYXCpRhVXSgoUHIoTFYIq0Ix4rwVoIjzlkPhcminLhQma8lVoaA4bwUo4ubnUKw4bwUo4uYXoIjzlkORbH4JijhvORQvzlsBijhvOZR4zNknFffuPsZrKEEfMkrWbtjJ5LvkYw6Fzc/Hj1B0nIcCJm0ZBTP5+cBl20EwbIKfqlTYRD81qXDZNVqZCgqVAhU2AVBNKlw2jlamIjNzgQqXraOVqRxzZg7pqmSYXIGYqHDZPFqZCpvYsCYVL7ZSoiK2UqDCpfh8ZSooVApU2CSya1LhUqenMpVjevzzVCKXOvGVqYjHX6DCpVJ8ZSrixRWocKkLUZkKCpUClWPmbReogHhxJSri8ReocKnUXpmKePwFKla8uBIV8fgLVI6Z4wdtE5VJEV8o1tjoloeG1aPTmkiBIQrD3QwP6SHWZcinWsUDGR7So6jLMBzSV63LkM8O5PsxVGiTeujG1nBmaBSfDct3ZOiSHarJ9uaRIcn34Vl0mpuQe9FJxipn0Wlu5+1FR7qik3Sfz6LTvDGlF50udUuXOs1TsGfRaWYKetFJpuXPotOMi3vR6bpfgWQE04tO9w0T6b5haF5ecxJd07xiphed7Htda5J5pl50su91behSN3SpA9lkhgayyQxNs4hXLzpd6jT3L/Sik3V6Nd2wWtMNqzXdsFrTDas13bBa01xc7UWnOyVFulMSl5VknapT6UlxKgB7UZPL1bezanZrDsdQk8km8G4p99K0W6PL1aSZwVivJpNNVQtq0syMrFaTy6b7zi4HNY3J1eRS5wPSzXkQS2qSDfsM3QDE0LxD7Sw6zZvOetHpUqdZ8aEXnWywDTRv4OpFJxtsA83brHrRyeZ/gebNUGfRaR6670UnOyUBzePrveh0pySaB8F70elOSXSXJIHukiTQPJzci053SqKbEQC6GQGgmxEAukuSEOg6AnSXJIHmkmQvOtmXIyqyUxLS3S6LQNbWke6hQqR7qBDpHipES/dn6sj6MOjIhtVI89aAXnS673Wa9fd70clGSUh3BQ/pOr2W7jKYpVmMuxedrCNg6R5vs3SPt1m6x9sszQAvbxrcIEKY7BMr1pjCLiAfvrYLcFNj0OHChMlm7JpMaIakd2YidpIxoVmZ585MxE4yJlyqDldlInaSMeFSFbgqEybHi2oy4VK1tyaTyKQ6flUmMu/kTGTeuWbilNhJzkTmnYwJlyrdNZnQTIftY2L1cCK8+xhzJkfMFTg9fq0pMLHsfjtR6SmTXkt2b82Slu4QY0mz3tFaLfnF3EUtmRQCmNeSX1xc1PIQYxkPMZaRyU2Hs1p6mmezV2vJbnW5pCXNE9+rtTzEWHK5F35By0O8Y+EI86XncuP4vJbIJSZJNydGhVMtnwvKBTsq53IkXAa+HhLL5RdfEQmX0KgeEpqnZe6L5IDpaZvERWtHfkN62nsUJhkTsZOMCb/k034m/FJVFZiInVwzCUrsJGfCLjj/F0xi+lobIWfCL8W2e/k88EvI7WfCL31XgckBt20tMaFZ/fHOTGSLUsaEZtHH+zKhWU3yzkwO6NsvMWGTZqvJROwkY+LlfZIzEd8+Y0L3XvtAt3pOoHv/RaSZXOpFp0ud7iUSkWb2oBedLnWgS53m3puz6DQ31PSi06VO88hTLzrdKYluedRIM2A8i063xmikW2M00r2mPNKNkmKkOiWBUkhXdKoZAVCaLnVN19bJlkcFBUxWojqX5tIUJtv8Lxc6g0ImyeAlNY8xmlyqQS6pyWTlfKqmzdXkUrNxSc1jjCaX+gcLanIpgLCkJpMJBWCoowRW5WrSvDZuvZqHGE1NM/RcryaTCWVBTZoh7Xo1jzGahskO2amasaAmk83RC2pyKYUAMIgArqQmE58WjJ1TE7mM5oKaXLwgHwc1J5vgkppc9lMvqclkS+OCmlyyBx48XNp6nFS0Le7dhG54BygA072bvqgf2qQeuglD3zPkUoDyrgzTV2sV4huGeeugB5sNgAttbRj0swEKY8NkiuU4NoHJTEJybJweKDsovNO4JOg4jg2XrCLLsRF/6r2OjeGSv2U5NvK7ebdjwyVTznJsmCSEaY6NHRa5p9TS2HBZk2A5NvK7ebdjw2XvKMex4bLhleXYMFmyYDk2Et8sj43TST2vcoZctmc/lKHY4W6GXKoiPZKhZ7In5KEMJYbZzTCIz7SbYWRSxfahDCXm3csQuFxS+FCGYoe7GXKp/v5QhigM9zLkk+MOI8Olq6O88sPRgu7jG+BnKFyOFqyDYtIqojdG5VDYRLRroOho56BwObawEkras9lB0fONtVaQ0qmdfi5neMhXkHY4NNY+NyyaVfXuDUUsJYfi2HjjFaFwKcBeF8oxZ/B5KAEFSg6FzQpQRSiRTRq4HhRUbPIYNaGIpRSgyDslh6LFzc+hmEP6KfM5KYRDerTzOSnkswu0Xk4K+Wy/fFhOClFCpdyw7DGTnQtQxFJyKE4c4ByKl1CpAEWylzmUIFFBAYok/3MoEQVKDkUyDRkUq8RSClDknZJD0eLm51CgxjtFh/FgmVHLDMcYVY+lsfSpGGreOh0tM2qkDUoV2gY0Q+OAfgRjvC60hvTNOEk2mBJxAypJARqnjc8QEQXifohiifshVonajw6xyh2Uh4colrgfohdLrADRCcRliCaaBHFya02xcYcjjl5wyIhXuZNViK8hjkK8MnE9WUqzOicu7mpj4lE8irbEnRL3ozVx8VWqE3fpBgMdspnTGXmr1CaOamDXfcxtvMqOLyG+hrgV4o2Ji3fYmDiCEK9M3Jqkn7UqJx6EeFviVmy8MXEnvkpr4hIBNSYuiwzNiYt32Ji45MdbE4+yBtSauET5bYl7JTbemri8x6sT9yYRn9ySnIiLr9KYuBYbb0zcSATUmrisujUmLqtuzYmLP96auPgqjYnLGlB14qATcYBsndPLGlBz4uKrNCYuq27NiYuv0pq4+CqNiXuZOVsTF++wMfEgNt6auHiHjYlH8Q5bExfvsDVx8Q6rEx8r94DLVpaDEhtvTFzLqltr4uKrNCZuxB9vTVxizsbEQWy8NXF5j7c9XRhQYs7WxMUfb01cYs7GxK34KruInyBGW3xReBjqZXmErM+NknA4PKj70qzPjaJm831wQ5+wvk8shtILRcNiuaDSfK/OovWmXm5LL73pWXrTs8ymZ5lNz4JNz4JN44WbnoWb9LJqUy/c1Cts6eXMpl5+7TsG1Y2retVQjjuaQp/V7yVUN65KmH1ODKv76BvFwOb7uPV99Or3bNfHru9jNjzHhPV9boTH8302PAc3POfWdWCDXUdvsj63bsua7bPhObe2JM31uXUV0WyfDc8JG56z6AuU+sT1YxpxQ5/1z+lczfV9bqT85/us/y0Ys/590PmWG/qsf1+bG6mE+T4bnmM36GNxQ58N4+NW2sHP7q//fvj28uHj6+fvXY/TP/795dOPl69fLn/++N9fw798/Pby+vry529/ffv66fPvf3/7/Nvr10+nf3tSl//8Gqx9Dt6dvODTX94/h+C7v85zj3fq2Tt7+vM0VAHdc8DQydDJ8X8=",
      "brillig_names": [
        "finalize_transfer_to_private"
      ]
    },
    {
      "name": "private_get_symbol",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18192277837884173995": {
            "error_kind": "string",
            "string": "Function private_get_symbol can only be called statically"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "transfer_in_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "11873158822563704285": {
            "error_kind": "string",
            "string": "Mismatch return note field."
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 17
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954044801249163952": {
            "error_kind": "string",
            "string": "NFT not found when transferring"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "1705275289401561847": {
            "error_kind": "string",
            "string": "Mismatch note header storage slot."
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6869395374906889440": {
            "error_kind": "string",
            "string": "Mismatch note header contract address."
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "get_notes_internal",
        "get_collapse_hints",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "_finish_transfer_to_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7176719043052132708": {
            "error_kind": "string",
            "string": "Function _finish_transfer_to_public can only be called internally"
          }
        },
        "parameters": [
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "7Z3dbuI6EMffhete2OPvvsrqqOoHWyEhqCg90lG1734ctnHY4BLi8e5S+X9TkTLDTH4MnrGTjN8XT8uHt+e71eb79nVx++19sd4+3u9X2008ev9xs3jYrdbr1fPd8b8Xovvj/UH+9eV+0x2+7u93+8WttJZuFsvNU/fSUfyE76v1cnFr48tTYSFMLyzIJGEpXUZaa+0+pLU2Nkl7kxH2Kn20VySPhf+5WQRVwXefhKPzf9D3Gty1TNztFHdpbJK2ncQ534MKvXDQSo98j9aqOi/Fr853JqT8/SbCbzdBmm1CW+pNxJdhKuYcpZjzbvy9Ef+MK/4EpJpL56AUCpS0K1AylFUiK0KvRVapqQixKkWIHISlCTlpb3vh4JOsEuKnQ+7KHLLy2hyyV+aQuzZC7toI+Wsj5M21ORSuzKGgr80h/+cdMr1DdFQ2dg5l0qCmXthrN1RT5GRGWqVP1iQGWZsRpfhV9F6QpPPCJjlhyB2LRoIkFAgyCToQ5BGUBIJMgohBJkFCDHIJIgaZBJUEQSZBA4I8glqAIJOgBkEmwQCCPIIGs7oLCFrRE7TyhCCqGSZBi4qaS9CC4DTBJGt/Fe0IevyKmQQD5iRcgvgV8wgqgRjkEkQMMglKxCCXINZmuAQxL2YSJKzNcAniijuToMLaDJcgZnVMghprM1yCqKjHBDssBpePslhQ+2axoKDNYbGoELJYUHrmsDjk8iwWJOgcFo91rCwWJOgsFiToHJa/8RzEV8CCBJ3BogUSdBYLVnFyWPAwRB4LyrkcFsJ6SxYLyrkcFoVoyWFp9m5ZUgMWbcZYXKtTRSf7EyR3dH5zhQ8MWx2I5jCUdjg/68e3wWrf6qhVk2GrU7OKDEOraaImw1YnfbMYOtd/sHRhnJdNs+sJNRm2Op2syFAiL/MZajBkM0Rtw2bYbPuLmgxR27AZKsQhnyFqGzbDZttg1GSowZDNELUNm6FBTuEzRE5hM7TIKXyGyCkXMAwytTcPdMqw1Zv6KjJ0iEM+wyq1jfQ+SR9dw/6EYfx3Im7D+Y92tt/wwPkBobSHHR6MV1/a+y/Nvk5Llb/kvb2onYmeMCEVpbFDHQl3RjIOeWWTR2boo57dvMNZ1TvibBDnhePApYeNdKRXx+Ld2VKrd5EokbxQUo8GP0utFtTnsTTbAncCS6sl23ksza4wTWBBtOSwGERLFkurS4wUKGERZmIqI9K8J56qHzNsttdpTYatVkSzGEo1nJ8Z315nm71luybDVrNnRYa+1VRbkyHy8iUMbdqCOK7njBg6gd/yBQy16JuQx5fjOHSy2aejKjJs9dawigybXUisybDVx9FmMTTD0roxYsyw2YdoazJEHLIZauRlPkPU2GyGzS6rVmRoUdvwGWL9kM2w2V6SNRlirsdm6BGHfIYYDy9h6NLdSyaMOwO5Znc/q8kQcchl6IUGQzZDXAtgM8S1gAoMUR+yGeJaAJ8h1rEvYaiGR1iUkicMsY7NZ4i8zGaIawEVGCIvsxka5GU+Q+QUNsNmH7WvyRBxyGeI2obN0KG24TNEbcNm2OzOafMYapcYWnHCEHHIZtjs5mM1GSIvcxkGgfqQzbDZFto1GSIO+QwxHnKfrQiEeQqfIepDNsNmW+hUZNhs++fPGUYsUuTXpt3QL0yrE538RuwhdQ0L5tROfsuvCR1doOPn64T8valnm1tELVegJT9pFTelZUu0ZJEtWWSLimxRkS1VZEsVfV+6yJYuOi8jirR0kZYv0bJUpOVmjzEy3/ckiH57y1icnerMH5dkfu3lvJ38ruhndSi/xdeEjp2vI+ePs5Sfb53XoQI7NH9sJqUKdArs6AI7+fsLQmorGhyd6ORb10/oFNjJX+s7r+NEgU6BHV9gZ7IWyOmE+d9p0AU68+0o4ebr5DeSn9CZ/1tQNH88UEoU6Mwfr1U+H0/oFNgxBedjdIFOwfdjZ8bBj3j07/1udf+wXr5Gje7Nt83jfrXdfBzu/3vp33nYrdbr1fPdy277uHx62y3v1tvH7r2F+Pjzjby8UYIOVXA8lHGGIYM7pMZ4qISK75poNVr+Hw==",
      "brillig_names": [
        "_finish_transfer_to_public"
      ]
    },
    {
      "name": "owner_of",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "9443383425599897888": {
            "error_kind": "string",
            "string": "Function owner_of can only be called statically"
          },
          "9605075991997100073": {
            "error_kind": "string",
            "string": "token does not exist"
          }
        },
        "parameters": [
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
          },
          "visibility": "public"
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "owner_of"
      ]
    },
    {
      "name": "process_log",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8861757336002045335": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 99
          },
          "9862881900111276825": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 35
          }
        },
        "parameters": [
          {
            "name": "log_plaintext",
            "type": {
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 18,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec"
            },
            "visibility": "private"
          },
          {
            "name": "tx_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "unique_note_hashes_in_tx",
            "type": {
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 64,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec"
            },
            "visibility": "private"
          },
          {
            "name": "first_nullifier_in_tx",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "process_log"
      ]
    },
    {
      "name": "cancel_authwit",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "inner_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "7ZfNbuowEIXfxWsWM2N7PMOrXF1VAdIqUhRQgCtdob57HYSdoJqyoK1aKTsP+XTm5PiPnMymXh1fnpruebs3yz8n027X1aHZdrE6GbTn3/a7qhvK/aHqD2aJzLQwdbcZhoFeF+a5aWuz5Dh8BxNxuMBEohlGgBKtTi60BcI7NLKzPjtxblSngCV1JE5e0PmRFimpW7ZJ3CFc0X8XBt2czc1s/JzNzWx4zuZmNuHhbBxogh2SZFjcuYF8dQN9uAFacAm2djK7GEo0YEgTEMdqp4ZKS0dU89rRd/4Jfrl/LPoHdfkFQCdNyvsLEBJOENuMuBZwYU1vIMHaOxtGXN4w4oK7Q1ufYEeT7cIl1wFzMlc2SjCGMfWg/g4MWRmBZQoPkdMc+XdHbufIvztyV4w8XqL5Qotx+o8jZ/RwoRnFf3zUoYx+hCfnqLdnQ/4zDJGkJcCk+uDZyz/LUSxWfdO2zcvT1VcNnD9tivNJCum/EqmH68xfY/mv6ptq1daD0PD02K2TbiwP/3fpSeq867frenPs68HDpP1wzyIvCKNslH4D",
      "brillig_names": [
        "notify_created_nullifier_oracle_wrapper"
      ],
      "verification_key": "AAAAAAAQAAAAAAAAAAAAFAAAAAAAAAAQAAAAAAADKLEBAAAAAAAAAAEAAAACAAAAAwAAAAQAAAAF\nAAAABgAAAAcAAAAIAAAACQAAAAoAAAALAAAADAAAAA0AAAAOAAAADwAAAAAAAAAAABnbIZEyk5ek\nwOpQT28sE3szFRq9fWnl1Rf/UjVhujO2GHlvnzEedgzsSIY7MNwpqUVSN2Sdw3PR0aGMQfjZiG4B\nhLIxqc5gBBa2F+TktF3ZAv1BObFaoGXpGpr4+jK/bxvh+AZGdb6h7RG9uH6OwlnzgjHWUs1cq30K\nJbNssafKH6elqVcKnUH0Y70VHrzT2rHmH/8D50u3OuclXAWRNGgMdMEx416zZHFy95bhXlTGy6Kk\nOd7KxWynAkyzqX7KCiADgyz0sL5r0Foix0OtJNwDDqda+dq0yONdT9eungeJGe+shGrPfPjNDaw5\n4GVPHfRQKBBUeZf6NI0VXA+i1JcttmKngrx7Vv5ikrsJIGQv6I7lR4+wjyZXq77DVNWiFAnpbDqo\ngmLQ/6tER/Aor44Vn3zgNu9RK27D4gilrHsRF9fi+5FrMAuZelA3Z2NWbZJW6g591NbQFFdS8mOv\n0fUX7YJx6cRHpOWOyu/dO7DdfbZy+gS8tBkY0E+Z/O7A6QRWu3AbWwtGO7zwxP5xkFUjk9CVM+Gy\nAEvYTp+KU6iPA4D05rswR3a/1Psi4gmHdBVkgemj+PCR0w2xADptqrQpjDMR/JFw+S3pQLBCqrmQ\n1TxqOyYznNprc9+SCDFBWQewX0CKYShHJZAWuSBK5L83U36xlrBcHZj6UQFqm6y7FMc8xwe728Qf\n3yovdhg49DoJM3rUq6ZgJX+RPXHm5wMdZ3W8f0VZXKlAEgVPhhUa1CDN1uc8Y98pQg5nTk7HJhQH\nuXHUZSUuien7WhICd8GF6pmJPVoWfU6cq9qKeg+XKvmMef9SA+ZAwA4tIS1vkplPVZg44AbUU15W\n/rgR1wEAph3qx2s3DKT0L3OmZct1qevcWM1L34r35/z/o21bcS5ZeJ8Nnbs/Fa3lOEt4SQ2x2DN5\nxzvkESPev8iMn8jWK3KtwTdDjKDTNxRFpXqWkOZE9YS6+kVBJM8BrVvgsTkBGeJB7rvr/1x9fyDc\nbFrRtq943CBtf3eFPwX95+vTcgf0jcSnJ0Jght+Tse5RZcbcT12spv9buvyWd9eqdr8lFSs21A6y\n5dFloEMW6/zEHtu+8puCHX6TzXdfzcMlasQvM+G/khBYclK6gii8QDUlNUdKuFMlOP+X60z0m7kW\n5w29uxwitMsCX2wtJsOBJ9ufmtpuI9FpbPX/SAJRAO5IBUpdmSmft+K4XqY0LUylEi/6dAoirBun\neZyfIL0KXn8CKXUGuhn355ilgSMUkIAoT+ELXDQ7DT8IxQ5Ns8hK9wOu7zUmvtmZMOyadtiLMj1F\nlE9a3gK4uaK83VBR9RPyEoLQrCpstZk0nzfRP3C2DxMtFsUaSCGsjtt5Zt4jYG8VkKMSiL14NEbg\noIxrGzYnI6eTTQlnTxoJQCjlJ0235xYWbkT4n15EgB9FrtCicTx9YhcQ2UOjX7+Q52zHfHe6KoWl\nRivJraUIEDDz09lEWmbXXT+lXPXKBHZvhZSb+uMDjNDDtsyAJO2QTkPRsfnN8bRLpL9duY6P53dn\n3NQKthWBjKf4U4rWvOfCUX79SQKLJA6nZikPOjdnJl2fPjWICFHV6LDXEfJra59oEWaEBobl8ymG\nw04LY6ULtaSd+z8AkKF8jLPAnuR/9/yzNMwP/gsAeUMM0UcY1LB9doejKRfLcxuIYJw/sGoR7OI3\nlhySW1evqWhOkfhVCYrDYP83F1azi2LNJFQ4DIlR1cGKxh+4IF8/5t9tDivIWCJDRK8PrBbfERA6\n6Yj2hJKpocS0I+WVs/ZgV4Wq0raFjdBSaR4mpOJ5lOnZJVpIAOIAlUnLHY6QyldKvnXbmnSn9Kh3\nADjWMCBN+/mNwwusN44uELga1KSDsyK9rcHRcE2FFLEK3InEjXW1cWNvW760qAb29FliAjAbauTr\nDrvq3SAzQAZvKBNXSPEZYxw/4H+p1wADTj4nRU75krS/hLl7qnRxLiV4NVHfUMAE7HzR9N2LO2Sm\nbyrEl5tl5WVoxaMbFO0Y92zwzuzLR5jedBrom2ToJY+ER3wbYlZaVZunuziDLgRwag4jrDKjVmkH\n+4cjYhWDsXb1meGS1xGTVANEGej5KQRrKZKTywnFkzcutrPm0bmZInk0L86aiDhJaT/NoiotONbU\nuh5HY6dOzbEcofNGloDCcOVRUVNEWS9ZGI+nZRLbOeiSgmsyYQ7gglHgBfzpF8DV3KAZR3xS9gdT\nMrYSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAisgyycLJP5SAU6nP2CwRliv2VY5eDmoxdz736mQoKg/JdirDBliZHMjHgShihuQ\nU6UeBL0D9yzXsBWJ1m45a3APy7+dPPQCuqPu2l8Knkm1werJWyZMMC3IVObyLXMw3yg+39qJyUgF\nl/CzRC6XUt751Y/Ckgg2GUJh97Fj/vuvHViqYcZK1SIEPXnEgCIZ5Vuhl1Gt/mw2Mk0/tsLaCYkt\nfBipPD2uWICfqu7GqGp49LO8YfGdbnBpNZu/R+f5Bw=="
    },
    {
      "name": "mint",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6515419266667913063": {
            "error_kind": "string",
            "string": "zero token ID not supported"
          },
          "9296579303138805202": {
            "error_kind": "string",
            "string": "token already exists"
          }
        },
        "parameters": [
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "5Z3Zbts6EIbfxde5IGeGW1+lOAiyuIEBww6c5AAHQd/9SKpFORZNQizVcrkJ4oTj+T9Rmhkukj43z9vHj5f73eHH8W3z7fvnZn98enjfHQ/dp8+fd5vH026/373cX/55w/ofWg/t314fDv3Ht/eH0/vmG5cS7jbbw3P/q4LuG37s9tvNN9n9Om/MmBgbMxC2MefK0ZqI1Lk1kZC2tRaOxhrtV2sEftn4n7uNwQTatW3cif+D2lMcd+L2uMvQcedC2tayb+HTbtCMjQ0hXWnvvCUVz9lX8b0Lztd3YVZ3AeRyAUD6bAUg+aWLwchEGGGMJ4zxRDGeBMQYKacRcjYaIfJQB0m0HcRx6iBhBhcS1nexPoXi67sQ67swq7vQtL6L9SnceS+tiwQnLdfjxd3FQfHFhau1MFaQNP6vVnJMw0pPyam70nrtwKBg7QUfdy7K1Q4sqJ1kSDteqPnqwiEH9XgBKmLkL8cUt1Wqgq+lpEsHw+naZlJeVW9dpv3jrGpi5cYvX9jjIhmzTfFXQdWJLFh7wcedwsddqKv6DUhGGAmKMbqRdM3I1AHQb2VEkLS+C726CwXru5Cru9B8fRfrUxi2vosEJ+3fSsnGFKsdWbnHHTkUrF0FtSMLaEewlxSSCaVYjdLqETpQxkmbvZU0LFTGcZqmJrnGqzIOARpidWfGaToWSP3eiBcR13exPgXB+i7k6i4EW9+FWN2FXJ/iRlGa1EWCk/ZvpQOFBWsv+LhrWa52w4PataojrZJ2RiiuRz3cTHKwmxUYbCjCxiy3MRF+zHI/glGEjV5u4y6rAzZquQ24F07FaAMXq9y9jWPhmmBsrElNVwj01+ysNdpvJpjOR5COpsANjSqAg7+xsCIEqMumA6RsABJZC5CiAUhqoSephZ4ULfSkewq+NkjdAKTEFiBVA5DuhZvaIGsp6+S4WCkudrWdIXUtKcQLWUsx4IU0lUDatvJr0w5S8lpOVy8ktQDZwukKLfQktNCT2EJPYi2jEB8k1VK7eiFrGYX4IEUtk8teyFpGIT5I2UJZJ2sZhXghiywGeuWqyNmpQXmRabtXrovMxYPyIsNyr9wUmTUH5UUG0EF5qVFRMSpWealRUfFSo6LiRQ47euVlblQZlJcaFVWZW0oG5eUe82IzEZVanysqNhOJYo95zou3gJPyi83EZ+Um44pL8XG/LyjE6MYDZsYXxRJMLqc7FqS+XpXVLOMrKCEmz7h8SomZcVRJiAkZF2aLMLs0MGIqI2aYGVdxKTEzLvkSYmItkTaAmfEQOyEm1ZJQAphthKCcN6qnxGykN9tIKDlvV0+J2UZCUW0kFNVGCFJthCDdRgjStcwF+TFNxut6izANtzfyG5hj1pJQvJiGNdGbJue5IGRWBV48BWxUnnEq9CvPeWE0oDzjSO5XnvPyYkB5scc85+XFgPKMcxwYsMqZCAR/ZjMFZ1JfY8qMB00pMTPOFIsw+cWztsX1so5RGaeVlJgZx8OEmDmPDVNi1hJpubTvpeL6OgRxlvN21UWcxMab1Ltf+Ywz582tSTlz3oCUkDPn8WFSTqqEU0yPgxSCzTkznllNyZnzDd0pOXO+3TkpZy11QoAz5zFzSs6cbwlOylnL2DPAmfP6a1LOWuq+AKdupD9zfnbYMk5ll3mEgRmnqSbeBjjb6E+e840HSTlrmTcJcFYzbxLirCZ/+jmrmTcJcdYyn4DTNonLN8eOnNXMJ4Q4a4m3Ac5q5k1CnLXE2wBnzrcgJOVsJA7lfBNCSk7ZSH/KRvJKzo/OT8rZSF7J+QH6yzjtO+U4SjbnrKY//ZymlnmTEGc18dbLCaya/BngrKYe8nPm/HKEpJxt7AcDaGM/GOT8ksiUnDnfu5KUs8h420tH7ixx1PQuX8KZjXt609g3+hox9+OeKvTbuKfdAjZyuc2N6SDvfQL8xnvag1YmxurGwD9kFeVLRflSUb50lC8d5ctE9ZeJ8UWMoqx0jNWNxcCQlYyxAhZlJRbHGHIvFRk2Pi3RwNwmIi6RgOV+3K/h8Nu4t7AFbCjCZnmcJffbDgI2EX708thM7ifUB2yW+xGMR9g4z2sjxvPaqNkSqHC/tC5gE+EHMMJGL7fBCD8Y4SdYC7hs1PI+FRBhE+HHvdXTb+O+Zy9gE3EtaIywWR4PhKEIG7PYRjKKsFnOIzlE2CzvHwkLz4Of3ad/H067h8f99q2z6P/5cXh63x0P54/v/72O/3k87fb73cv96+n4tH3+OG3v98en/n8bdv7xHZHdoeC9lv6jUnca+g99CNXyTuvOY+f1fw==",
      "brillig_names": [
        "mint"
      ]
    },
    {
      "name": "transfer_to_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "random",
        "decompose_hint",
        "field_less_than",
        "lte_hint",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "transfer_to_public",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "11873158822563704285": {
            "error_kind": "string",
            "string": "Mismatch return note field."
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 17
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "1705275289401561847": {
            "error_kind": "string",
            "string": "Mismatch note header storage slot."
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "4718290446670665014": {
            "error_kind": "string",
            "string": "NFT not found when transferring to public"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6869395374906889440": {
            "error_kind": "string",
            "string": "Mismatch note header contract address."
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "get_notes_internal",
        "get_collapse_hints",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "public_get_name",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18105278452957613314": {
            "error_kind": "string",
            "string": "Function public_get_name can only be called statically"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "compressed_string::field_compressed_string::FieldCompressedString"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgACBAEnAAABBIBFJgAABAMmAgEEACYCAgQAHxgAAgABgEQkAAAARSQAAABGLQQAAYBEJwIAAgSARCYCAwQBOg0AAgADJSQAAACbHgIAAQAeAgACADI4AAEAAgADJgIBAQEjAgADAAAAbyQAAADEHgIAAQkmAgIAAQo4AQIDIwIAAwAAAIskAAAA1iYCAQACLgwAAQACLAwCASUnAIAEBHgADQAAAIAEgAMjAIADAAAAwykBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEF+0Le07wSjQI7AQECJS0AGMoYyg==",
      "debug_symbols": "5ZXBbsIwDIbfJece4thxEl5lmlCBgCpVLSpl0oR49yWohNJVoHVll12iOPoc/7GT+CQ2fnXcLYtqWx/E4u0kynqdt0VdBet0zsSqKcqy2C37y0LGwegLf9jnVTQPbd60YgHMKhO+2sSpUWGHbVF6seAw/Q5Lqa+wVDrBAGaEJiLT0USaE231CGwxbW1RQR9+z4SVM2i3CQ7i/1D7HHknSHnnZ3kHzYnmSDzS7tBdYUdIA+0OZ9UO8l57jGBfHSFk7OUhAH4dgp283jh2Cp9UTaadnbR6UDWAn544OimY4jQlEtIUJzfmhGG9c0LovdPRFCuFsoOV0r0qMo/QBi12tCFJjwtiIP0uRt1/ASO3CSTi7ToxD+tH9E/Oeg7WR94U+ar0XQPbHqt1r5+1n3s/aG37pl77zbHxscnd+hvEHqFchnR5AsFAnaEJMUKcLw==",
      "brillig_names": [
        "public_get_name"
      ]
    },
    {
      "name": "public_get_symbol",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15009911310769716579": {
            "error_kind": "string",
            "string": "Function public_get_symbol can only be called statically"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "compressed_string::field_compressed_string::FieldCompressedString"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgACBAEnAAABBIBFJgAABAMmAgEEACYCAgQAHxgAAgABgEQkAAAARSQAAABGLQQAAYBEJwIAAgSARCYCAwQBOg0AAgADJSQAAACSHgIAAQAeAgACADI4AAEAAgADJgIBAQEjAgADAAAAbyQAAAC7HgIAAQkmAgIAAQo4AQIDIwIAAwAAAIskAAAAzS4MAAIAASUnAIAEBHgADQAAAIAEgAMjAIADAAAAuikBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEF0E3qz6yL/WM7AQECJS0AGMoYyg==",
      "debug_symbols": "vZRhi8IwDIb/Sz/vQ5O0aetfOUSmVhmMTeY8OMT/fq1sdXpDud28L6MZT/qmSXjPYuvXp/2qqHb1USw+zqKsN3lb1FWIzpdMrJuiLIv9avhbyPgx+sofD3kVw2ObN61YADNmwlfbeDQYbtgVpRcLDsefsJS6hyXqBAOYEVopZTpaKc2JtnoEtpSutoQwhJeZsHKG2m2CQ/H/WPscfVeQ+s6v+g6aE82ReFa7I9fDTpF6qN3RrLWDvK89Kth3K4SOvV0C4M8S7GS/ceyQXkxNppudtPphagC/fXFMQpiSNEWJ1JQkN5ZEZPquETl+3mJEkh2MqAdTZB6hDVnqaKOkej4QA8ldDN5bwMg2gSS6rRPf2cvyEqLPvCnydek7U9+dqs3A49uvg3+w+0NTb/z21Pho/DfPh+ibaDLC61qEIAiTDhpB5xs=",
      "brillig_names": [
        "public_get_symbol"
      ]
    },
    {
      "name": "transfer_in_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10846690067871036662": {
            "error_kind": "string",
            "string": "invalid owner"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          }
        },
        "parameters": [
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "transfer_in_public"
      ]
    },
    {
      "name": "_store_payload_in_transient_storage_unsafe",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16958085610837407363": {
            "error_kind": "string",
            "string": "Function _store_payload_in_transient_storage_unsafe can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [
          {
            "name": "slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "point",
            "type": {
              "fields": [
                {
                  "name": "x",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "y",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "is_infinite",
                  "type": {
                    "kind": "boolean"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
            },
            "visibility": "private"
          },
          {
            "name": "setup_log",
            "type": {
              "kind": "array",
              "length": 9,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "JgACBAEnAAABBIBRJgAABAMmAgYEDSYCBwQAHxgABwAGgEQdAIBHgEcBLQiARAABLQiARQACLQiARgADLQiARwAEJwIABQSASCYCBwQJLAgBBiYCCAQKABABCAEmAwYEAQAoBgIILQQABYADLQQACIAELQQAB4AFJAAAAJ0sDAYFJAAAAOMkAAAA6ycCAAEEgFEmAgIEADoNAAEAAgEAgAOABYAHLQCAA4AILQCABIAJCwCACIAHgAojAIAKAAAA4i0BgAiABi0CgAaACQEAgAgAAoAIAQCACQACgAkiAAAAsSUnAIBDBAADJSQAAAOCLAgBBwAAAQIBJgIIAQAsDggHLAgBBwAAAQIBJgIIAAAsDggHLAgBBwAAAQIBJgIJAAIsDgkHHgIABwAeAgAJADI4AAcACQAKJgIHAQEjAgAKAAABSiQAAAOrHgIABwEeAgAJAAo4BwkKIwIACgAAAWYkAAADvRwMBAcALAgBBCYCCQQEABABCQEmAwQEAQAoBAIJLAwJCiwOAgoAKAoCCiwOAwoAKAoCCiwOBwomAgIEASYCAwQALAwDBiIAAAGwDSgABoBDAAcjAgAHAAADPyIAAAHFJgIGAAMAOAEGBywIAQEmAgYECgAQAQYBJgMBBAEAKAECBiwMBgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJLAgBBgAAAQIBLA4BBiYCAQQJLAwDBCIAAAJSDDgEAQgjAgAIAAACxyIAAAJkLA0GBSwMAwQiAAACcQw4BAEDIwIAAwAAAoQiAAACgyUcDAQDAAA4BwMGJgIIBAkMOAQICSMCAAkAAAKlJAAAA88AKAUCCAA4CAQJLA0JAy8MAAMABgA4BAIDLAwDBCIAAAJxJgIJBAkMOAQJCiMCAAoAAALeJAAAA88AKAUCCQA4CQQKLA0KCCwNBgkmAgsECQw4BAsMIwIADAAAAwckAAADzy0EAAmAAycAgAQEAAokAAAD4S0IgAUACgAoCgILADgLBAwsDggMLA4KBgA4BAIILAwIBCIAAAJSHAwGBwAAOAEHCSYCCgQDDDgGCgsjAgALAAADYCQAAAPPACgEAgoAOAoGCywNCwcvDAAHAAkAOAYCBywMBwYiAAABsCcAgAQEeAANAAAAgASAAyMAgAMAAAOqKQEAAQX3ofOvpa3UyjsBAQIlKQEAAQW+Hj//PqT2+jsBAQIlKQEAAQXrVzkD6KB2gzsBAQIlKQEAAQXonQn+oREtDjsBAQIlLQGAA4AGCwCABgACgAcjAIAHAAAD/CIAAAQHLQCAA4AFIgAABG4tAAABgAUBAAABgAQAAQEAgAOABIAJLQCAA4AKLQCABYALCwCACoAJgAwjAIAMAAAEWi0BgAqACC0CgAiACwEAgAoAAoAKAQCACwACgAsiAAAEKScBgAUEAAEDAIAGAAKABiIAAARuJS0AGMoYyg==",
      "debug_symbols": "1ZvRbuowDIbfpde9SGI7tvcqR9PENjYhIZgYO9LRtHc/KaNlA9ppWVbcG5SCTb7+aWwnkNfqfn778nizWD2sn6urP6/Vcn032y7Wq3T1+lZXt5vFcrl4vPn4duWal4Bu5/D8NFs118/b2WZbXfkYQ13NV/dNk0P6iofFcl5dxfB2XScnzHHSDCfK6YkkwymGHCfOcOKcnjhmOEnO4AplOGlOT/rdwa1PjZ2j1tgF6oy95zPWiMh7a0SKnbXQGWOB7qsFgv9ovIPXAvDSGSf68eDBlVAefad8/Ep5T7Gzjo3FELyCtsaKgMfwPhSF9+4z/K4L/vUuAv16F+B+3AXG0HaRmvrVQ8ehe+iEj8cNfn7HJedATuYDzAiOQJDjdDaJiai096Reh9ViYdgbswgMq5WCkevmsx4mXZBz8znNkL0xYPhk27BHmDA7T5f9fGUxEfYJ6y4T1l0mrLv6CbPTZNnRuQmz44TZdbrsUCJGQuzYSYbZmRBbY0I6qv7wfE0mGlsndeG4JsOemmzYqacYUuxqZY1QcNCCxHYcgsjhxuF9VYA9Bc7FeHqKlsvxGNNHjOkjxvTpKQIux0OmeKgnWV+OB43xqC0ebytfkBdbPMFWPKRgKx4S2IqHBNEWDxqLh2gsX6CxeEjG8gUZi4fG1hdkbH1BbCwesrF4qGPPL43tkj819Zgn+pHze/qVqNu3cIwnPKFEfC62cRERR8aJ3XBxZDnB0bFxCAZwaHR1uh2y1NQTHDWFE22pU2TnpyAOm8IRW+qILXWK7Pp8Cwe0w1E3bOy9x8M/e/znDLSjZzP0CYf92CWS6iHlupOUyz7a4gnG9AlqiwfQGI8xfdCYPihjl9hw4AE54SFbJT8T2+KJxvRhZ4yHbPGIN8YjtngUjPGoKR5xaIzHmD7e1vMj3la+ECjxv7hie0TS8wvQL+IM7REJjq7O0EpWMJrCIVvqkJrC6dlBuxiOLXXYljosY+MU3CMSQTP012/p6u9ss5jdLuf7M6UPL6u7D0dMt/+e5kenTZ8267v5/ctm3pw7PRw5bdYOXrQO3qXbbDJ5kBoktf3uI8baszaXfmfpai8hESSK/w==",
      "brillig_names": [
        "_store_payload_in_transient_storage_unsafe"
      ]
    },
    {
      "name": "compute_note_hash_and_optionally_a_nullifier",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "11091894166229312484": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 20
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          }
        },
        "parameters": [
          {
            "name": "contract_address",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "storage_slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "note_type_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "compute_nullifier",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          },
          {
            "name": "packed_note_content",
            "type": {
              "kind": "array",
              "length": 3,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 4,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "public"
        }
      },
      "bytecode": "",
      "debug_symbols": "7Z3djtw4koXfxde+EMng37zKYNHov2kYMOyGu3uBRWPefbPSJWVWiZVsRUgsMnTmwhi3FVTwO1QyTihT+vvDL7/+9NdvP3z68p+vf3z417///vD5688//vnp65fL3/7+78cPP3379Pnzp99+uP/PH6anP3y8Hv/H7z9+efrrH3/++O3PD//y9PHDr19++fCvYC/R//n0+dfr//2fjx+C2Xi83Xi823g8bTzebzw+bDx+K8+08fi87fg4bTx+o75xo75xo75xo75xo75xo75xo75xo75xo75po75po75po75po75po75po75po75po75po75po755o755o755o755o755o755o755o755o755o755o75mmrYGmK0BdmuA2xpAWwP81oCwNSBuDUhbA7YqbbYqbbYqbbYqbbYqbbYqbbYqbbYqbbYqbbYo/XF1YLTPB8a4HOifR85HjWynw0Y2h41sDxvZHTYyHTayP2zkcNjI8bCRD7sG7WHXoDvsGnSHXYPusGvQHXYNusOuQXfYNegOuwbdYdegO+wadLJrMLvnAy/1yeuhaTpuaHPc0Pa4od1xQ9NxQ/vjhg7HDR2PGzodN/RxV6M/7mr0x12NXrauw0Tz4GFKt4MvH9Wlo6OZD07hdmyK31Px/aQS+kkl9pNK6ieV3E0qYeonFdNPKrafVFw/qfTzaRuEn7aX6nM+1ISXqVyHD8cOH48dPh07fD50+DgdO7w5dnh77PDu2OHp2OGPvWrjsVdtPPaqjdKrdimUg/Wp8ulqnQ/PR1sXbkfbaL4nkztKJk09JWN6Ssb2lIzrKRnqKRnfUzKhp2Ri02TMkgw5+yKZ9dEphPnzOoVYSD2Nm3oeNvU8jZu6GTd1O27qbtzUadzUfcepU1hSz9M69TBu6j3vppXUe95NK6n3vJs+TN1OPe+mldR73k0rqfe8m1ZS73k3raTe825aSX3Y3dROPe+meUk9Olc7muxyNEWqHH2zvWTvoIRS0pc6b07aGnt/8BVgz3v6EAB7riyGANhzfTMCQNNzlTUEwJ5rvSEA9lxxDgGw57p3CIAEgDKAPXuAIQDCiQgBwokIAcKJCAHCicgAWjgRIUA4ESFAOBEhQDgRIUACQBlAOBEhQDgRIUA4ESFAOBEhQDgRGUAHJyIECCciBAgnIgQIJyIESAAoA4g6sAbwssgWgORfAyTs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",
      "brillig_names": [
        "compute_note_hash_and_optionally_a_nullifier"
      ]
    },
    {
      "name": "private_mint",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "11873158822563704285": {
            "error_kind": "string",
            "string": "Mismatch return note field."
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 17
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "1705275289401561847": {
            "error_kind": "string",
            "string": "Mismatch note header storage slot."
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6515419266667913063": {
            "error_kind": "string",
            "string": "zero token ID not supported"
          },
          "6869395374906889440": {
            "error_kind": "string",
            "string": "Mismatch note header contract address."
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "9296579303138805202": {
            "error_kind": "string",
            "string": "token already exists"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "get_notes_internal",
        "get_collapse_hints",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "AAAAAAAQAAAAAAAAAAAAFAAAAAAAAAAQAAAAAAADKLEBAAAAAAAAAAEAAAACAAAAAwAAAAQAAAAF\nAAAABgAAAAcAAAAIAAAACQAAAAoAAAALAAAADAAAAA0AAAAOAAAADwAAAAAAAAAAAAKbSapIMcLl\nNwXH5Gfv+a7hopl26QTsHE73sA4FHQweHSNzh/1mzv5P6Zs0bd9zvmRJlRlPmcA1Qs9XQ0Fv1cUB\nkBIo0uhWbtBbYSaNo3PqAZfY8WUt3Ra9+004bYv6nSEW8ytWwH4AeNnd5kSbQZdrrPa9z0jRBeNS\npkM0tv1WKODZ2NkRCs5jPVb+6b/1WEA2tBmMEmrYONNOKljIaFMes8DZFjmD4Pbd7bGY1VCNV6mj\nm7ddBfn/4u+fftaxbgIi0nyikWWOx5lu078/SGQ/EUzmhn7VcXFcsAbmmoM5I9qABM76YJ0QEvX2\nv7Kw5KYWwt2wzCcNO/ebSxnu7V0bHBZir8gp5chWOQlJSc7sRlAyw3oSDS/y5CrUTUAJiQY8nemM\nB5t3bV6DR26d96hOmopGEgRIwXmmDPbkXvd8LIMQMZ94QMag+YzccJ6WWFBZOohEHARzAE8V19dp\nkTcMjO3yw3t5bl/zU8BYiNWmGGeQIEC/uMGfPhadOXyX/QRWu3AbWwtGO7zwxP5xkFUjk9CVM+Gy\nAEvYTp+KU6iPA4D05rswR3a/1Psi4gmHdBVkgemj+PCR0w2xADptqrQX8yEX9iGXI3EuFg/lZIUt\nqtYZ+q2zwowVVbuKvd4h9hD3wJaKMsf2ELhKAO30m13JZHRwBuj0tqV7c2aP2i7lGMqJOI1ae/tY\nqJqehMBdVLO854TEGdLNwM3RlDPR2r4pHgUyGADPKkoJGMRr56RHGDesob5jjKIx8h5CNo3VSAX2\nYldQy8QdOLMcM8mg/AilOPWceLX6fZZaJ4J85RykK8WWKF7X3j6NgZfe0yRSE097go5P0NiKNYE1\n9UZ7jFoSpl+trFY1sF38FZT8DVoXQQvzwmUg9mmnen7Ypp2wNg6lfmxQn36xs+H31ogGznOYfcih\nmP2IjHefOmBtoGJYGvl2QCMJFhdH7tbb3TcBB3AWf2butv3YHKPsEAhLx5IdoFNRo1ST7eWo0tYF\nIbJq0qfOx8Gt9cQZrrG0A3QTtA3AFzsw1TC8xlzPMyTRhWh5DRCVGxpZHVn0G6Y5OMNsISfJQSFm\nA8qGb6das65jekMWjix3zrmECUbz6eBlNhokQcO83SazSvXqYtzgjUWwZWw5fBnE0bBHLnn0+BIS\npBWTYbEmicYQSi8ml+kox5o1k3j5rOCQxl23175S4UuCBQbmZevMoVwX2fZReIhstbUoCGTz2x9F\nqD2ARl4uxuAijpdVHXpZQfGTyqShGYA+VIP6o00m0JCBDyaKJlJ6ER91tKbM1g36m9iwEwSkV71g\n6n4Kdv2GR7lgTU5EafbaHdVeO0lxm61hqWfT1ZdBlBfroYJmG3uCd1fZaC2FPJweok3fMQNIpYlQ\n2+xkmAX45AYrRCVsXzAT01amsp/lMgpKijaHldDyotfAQYNlPgnUECYGHFyIB1tfN2q1Xc0cEqhG\nzNzNfY2nXLhIMCJsRXr24Vy6zEtlr4vfdInwre0aXL5q1mGKvcYGeJMKOVEhUaUnmP+BkRout2XY\nZL1dzx+Yrev1sSZAE0Ydm/WOGY/FP5pOMqmO7MLQbjT2V9wlGbrrJYwSSXYj7HHHjj3AllqdpoMM\n+g9KBObxX67xPIcWn9B2atnx9oREev8ZxW8vdtMY7uLHlCXfiU43OvXQ8wnNSrTE2uGE/UXqxNjS\nJjacJb/jknEU2aOyUU2K6oDHDS/n4uXY/n345WQaLwq7zHYKnLxClw3UdhkRISHl63wvXQzc1tAI\nglloW0GnxsT+P6i7V0SamSX1utVr33i8QipMymutxlFYRMK/sLYr8sBo7sDl0uaohjQIputO91zJ\nLUEVj8BPBD60OH3z4LCZ/pGlstyp42EOxkj50jtpg+cLWg0+wuXyswQ61ZJ/de4iTnuLsHbAHZ0V\n5pXbSWKEeS9JPkqiXqcfkP+VfiqqnqJkmE8Vy36rLE9ppdgIpW9NDA38Mhan5E5CXO/xhhn0K38P\n64NkjhGx/g2LxrYMbyELfgcMNa3kSIGrDKvqaUG+P83kxOCBYb55eUgirvuz9goze6h9h6g9zazE\noM4XHHhZWh9tKabU0/r2+NPEerxKFB+Ie4R7pOnE3UdmyENjrl3zHS5vMP7v6YQHcE9iOyIHA5vn\nC1V7bw1NWfsSgKGZWD0KkObVU+S9ZEm1jvUHoQoRhUsNMK6nXa3orpJf7Wy/Be+z4rZbBL3nGjNN\nL+szAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAhVRMbnxBbxhukrGrAW2S2yWwCGoPWf0NLfDerFkah+fEEfOEjAe4B6OEIMB+olG\nMOP144V32euA/0dROsMIPpwPy7+dPPQCuqPu2l8Knkm1werJWyZMMC3IVObyLXMw3yg+39qJyUgF\nl/CzRC6XUt751Y/Ckgg2GUJh97Fj/vuvHViqYcZK1SIEPXnEgCIZ5Vuhl1Gt/mw2Mk0/tsLaCYkt\nfBipPD2uWICfqu7GqGp49LO8YfGdbnBpNZu/R+f5Bw=="
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "10055739771636044368": {
            "error_kind": "string",
            "string": "Function get_admin can only be called statically"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10536464181608181124": {
            "error_kind": "string",
            "string": "transfer not prepared"
          },
          "10846690067871036662": {
            "error_kind": "string",
            "string": "invalid owner"
          },
          "11859452850824495745": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ],
            "length": 60
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15009911310769716579": {
            "error_kind": "string",
            "string": "Function public_get_symbol can only be called statically"
          },
          "16541607464495309456": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 16
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16958085610837407363": {
            "error_kind": "string",
            "string": "Function _store_payload_in_transient_storage_unsafe can only be called internally"
          },
          "17028138060491915576": {
            "error_kind": "string",
            "string": "Function _finalize_transfer_to_private_unsafe can only be called internally"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18105278452957613314": {
            "error_kind": "string",
            "string": "Function public_get_name can only be called statically"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "364657447181031001": {
            "error_kind": "string",
            "string": "invalid admin"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5527120278801020911": {
            "error_kind": "string",
            "string": "invalid NFT owner"
          },
          "6515419266667913063": {
            "error_kind": "string",
            "string": "zero token ID not supported"
          },
          "7176719043052132708": {
            "error_kind": "string",
            "string": "Function _finish_transfer_to_public can only be called internally"
          },
          "8778930052620580050": {
            "error_kind": "string",
            "string": "caller is not an admin"
          },
          "9296579303138805202": {
            "error_kind": "string",
            "string": "token already exists"
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "9443383425599897888": {
            "error_kind": "string",
            "string": "Function owner_of can only be called statically"
          },
          "9605075991997100073": {
            "error_kind": "string",
            "string": "token does not exist"
          }
        },
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "set_admin",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "8778930052620580050": {
            "error_kind": "string",
            "string": "caller is not an admin"
          }
        },
        "parameters": [
          {
            "name": "new_admin",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "JgACBAEnAAABBIBFJgAABAMmAgIEASYCAwQAHxgAAwACgEQtCIBEAAEkAAAARSQAAABGJwIAAQSARSYCAgQAOg0AAQACJSQAAACYHgIAAgAeAgADADI4AAIAAwAEJgICAQEjAgAEAAAAbyQAAADBJgICAAMuDAACAAMeAgAEAQo4AwQFIwIABQAAAJEkAAAA0y8MAAEAAiUnAIAEBHgADQAAAIAEgAMjAIADAAAAwCkBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEFedUGXr5zdNI7AQECJS0AGMoYyg==",
      "debug_symbols": "5VXbisIwEP2XPPchc+kk8VeWZalapVCq1LqwiP++ibRp1WJAdF/2pWTKmZ4zM6eZk1qXy+P2q2o2u4NafJxUvVsVXbVrfHQ6Z2rZVnVdbb+mr5UOD5Nf8Id90YTw0BVtpxYggpkqm3U4GvRf2FR1qRbij/dgrfMBrDGPYAAzg2Zm06OZc4lom8+ALcVPW0KYgj8zZfULtNsI9uL/UPsr+s4Q+y6pvkMuES0B8Ui7IzeAHRPfaHf0Uu2gr7UHBvtuBt+xt1MAzFGgZtdnoRaToABykULGQYDMzdiQpR5tWPPjGRuI1jd47c85HZporFXkxhJe3P+pFXG+VkOxVgePa2XBwTr+6FI3icF4k1hzJ8ckW+94KickET6RxPqZpNmbDoGGBiDkOuEMwjgQYpdyhiUZhm1zm3CGRNMZcTrlDOBxXYClq1GcffRdtFWxrMt+726OzWqyhruffXmzkfftblWuj20ZdvO4liF0Gm1GdPm5fEAmI+c5PM8v",
      "brillig_names": [
        "set_admin"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": null
      },
      "bytecode": "H4sIAAAAAAAA/7WTyw7CIBBFqcUo0sTEx39MU0y7dOHafyCtLHVRN+766dZkJkyI0QVwEzJMgMNcHoXwKjBKESGCHDEqjAs2Xs7tjDnEqVbBvin5HRijvvhLWH+jkFnk4QPxM50/rJBzmTyfe6F913PTrF8J/z5y+af7y+l//8OzRq9bzCvh/8P4uvfXx/M2ij/SbJGc0ptoOwAqvkT+EvmhJBvn8w+Yb4Svj6KMqNO1tnaNdfZkh8H0dhfwP+KH/QbzqHp4zgQAAA==",
      "debug_symbols": "bY/dCoMwDIXfJddeNHUO9FVkSNUohdJKrYNRfPelm0j3cxPOCV8OORFG6re503ZyKzRtBOMGFbSz7OJeQO+1MXru8jWINLB88euibLJrUD5AU10KIDtCc5V8PWlDb/kDokAhD5a1rE8cq/I/X+PJSxQf/G1ne1deq97Q8fq02SFrEh4LfZVavBto3Dylelkzni1WhRQcy9FP",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "_finalize_transfer_to_private_unsafe",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "error_types": {
          "10536464181608181124": {
            "error_kind": "string",
            "string": "transfer not prepared"
          },
          "11859452850824495745": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ],
            "length": 60
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17028138060491915576": {
            "error_kind": "string",
            "string": "Function _finalize_transfer_to_private_unsafe can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5527120278801020911": {
            "error_kind": "string",
            "string": "invalid NFT owner"
          }
        },
        "parameters": [
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "hiding_point_slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_finalize_transfer_to_private_unsafe"
      ]
    },
    {
      "name": "private_get_name",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2111772463301017956": {
            "error_kind": "string",
            "string": "Function private_get_name can only be called statically"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "NFTNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "token_id",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": true
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "NFT"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "private_nfts",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "nft_exists",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_owners",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "events": [
        {
          "fields": [
            {
              "name": "from",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "to",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "token_id",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::NFTTransfer"
        }
      ],
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::private_get_name_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::private_get_name_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::get_admin_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::get_admin_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_in_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_in_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_to_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_to_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_in_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_in_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::private_get_symbol_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::private_get_symbol_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "name",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "symbol",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "inner_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::cancel_authwit_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::cancel_authwit_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::_finish_transfer_to_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::_finish_transfer_to_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "hiding_point_slot",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::_finalize_transfer_to_private_unsafe_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::_finalize_transfer_to_private_unsafe_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::owner_of_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::owner_of_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "new_admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::set_admin_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::set_admin_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::mint_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::mint_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::private_mint_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::private_mint_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::public_get_symbol_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::public_get_symbol_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::public_get_name_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::public_get_name_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::prepare_private_balance_increase_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::prepare_private_balance_increase_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "slot",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "point",
                    "type": {
                      "fields": [
                        {
                          "name": "x",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "y",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "is_infinite",
                          "type": {
                            "kind": "boolean"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                    }
                  },
                  {
                    "name": "setup_log",
                    "type": {
                      "kind": "array",
                      "length": 9,
                      "type": {
                        "kind": "field"
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::_store_payload_in_transient_storage_unsafe_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::_store_payload_in_transient_storage_unsafe_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_to_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_to_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "hiding_point_slot",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::finalize_transfer_to_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::finalize_transfer_to_private_abi"
        }
      ]
    }
  },
  "file_map": {
    "100": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::Hash,\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "107": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        /// Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "109": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr",
      "source": "use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::embedded_curve_ops::multi_scalar_mul;\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n"
    },
    "110": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr",
      "source": "use std::{\n    embedded_curve_ops::fixed_base_scalar_mul, field::bn254::decompose,\n    hash::from_field_unsafe as fr_to_fq_unsafe,\n};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n"
    },
    "111": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    /// Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "117": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "126": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/note/discovery/mod.nr",
      "source": "use std::static_assert;\n\nuse crate::{\n    context::unconstrained_context::UnconstrainedContext, note::note_header::NoteHeader,\n    oracle::note_discovery::deliver_note, utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PRIVATE_LOG_SIZE_IN_FIELDS},\n    hash::compute_note_hash_nonce,\n};\n\n// We reserve two fields in the note log that are not part of the note content: one for the storage slot, and one for\n// the note type id.\nglobal NOTE_LOG_RESERVED_FIELDS: u32 = 2;\npub global MAX_NOTE_SERIALIZED_LEN: u32 = PRIVATE_LOG_SIZE_IN_FIELDS - NOTE_LOG_RESERVED_FIELDS;\n\npub struct NoteHashesAndNullifier {\n    pub note_hash: Field,\n    pub unique_note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Processes a log given its plaintext by trying to find notes encoded in it. This process involves the discovery of\n/// the nonce of any such notes, which requires knowledge of the transaction hash in which the notes would've been\n/// created, along with the list of unique note hashes in said transaction.\n///\n/// Additionally, this requires a `compute_note_hash_and_nullifier` lambda that is able to compute these values for any\n/// note in the contract given their contents. A typical implementation of such a function would look like this:\n///\n/// ```\n/// |packed_note_content, note_header, note_type_id| {\n///     let hashes = if note_type_id == MyNoteType::get_note_type_id() {\n///         assert(packed_note_content.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///         dep::aztec::note::utils::compute_note_hash_and_optionally_a_nullifier(\n///             MyNoteType::unpack_content,\n///             note_header,\n///             true,\n///             packed_note_content.storage(),\n///         )\n///     } else {\n///         panic(f\"Unknown note type id {note_type_id}\")\n///     };\n///\n///     Option::some(dep::aztec::oracle::management::NoteHashesAndNullifier {\n///         note_hash: hashes[0],\n///         unique_note_hash: hashes[1],\n///         inner_nullifier: hashes[3],\n///     })\n/// }\n/// ```\npub unconstrained fn do_process_log<Env>(\n    context: UnconstrainedContext,\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: fn[Env](BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>, NoteHeader, Field) -> Option<NoteHashesAndNullifier>,\n) {\n    let (storage_slot, note_type_id, packed_note_content) =\n        destructure_log_plaintext(log_plaintext);\n\n    // We need to find the note's nonce, which is the one that results in one of the unique note hashes from tx_hash\n    for_each_in_bounded_vec(\n        unique_note_hashes_in_tx,\n        |expected_unique_note_hash, i| {\n            let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n            let header = NoteHeader::new(context.this_address(), candidate_nonce, storage_slot);\n\n            // TODO(#11157): handle failed note_hash_and_nullifier computation\n            let hashes =\n                compute_note_hash_and_nullifier(packed_note_content, header, note_type_id).unwrap();\n\n            if hashes.unique_note_hash == expected_unique_note_hash {\n                // TODO(#10726): push these into a vec to deliver all at once instead of having one oracle call per note\n\n                assert(\n                    deliver_note(\n                        context.this_address(), // TODO(#10727): allow other contracts to deliver notes\n                        storage_slot,\n                        candidate_nonce,\n                        packed_note_content,\n                        hashes.note_hash,\n                        hashes.inner_nullifier,\n                        tx_hash,\n                        recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n\n                // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n                // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n                // notes containing random values in order to hide their contents.\n            }\n        },\n    );\n}\n\nunconstrained fn destructure_log_plaintext(\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>) {\n    assert(log_plaintext.len() >= NOTE_LOG_RESERVED_FIELDS);\n\n    // If NOTE_LOG_RESERVED_FIELDS is changed, causing the assertion below to fail, then the declarations for\n    // `storage_slot` and `note_type_id` must be updated as well.\n    static_assert(\n        NOTE_LOG_RESERVED_FIELDS == 2,\n        \"unepxected value for NOTE_LOG_RESERVED_FIELDS\",\n    );\n    let storage_slot = log_plaintext.get(0);\n    let note_type_id = log_plaintext.get(1);\n\n    let packed_note_content = array::subbvec(log_plaintext, NOTE_LOG_RESERVED_FIELDS);\n\n    (storage_slot, note_type_id, packed_note_content)\n}\n\nfn for_each_in_bounded_vec<T, let MaxLen: u32, Env>(\n    vec: BoundedVec<T, MaxLen>,\n    f: fn[Env](T, u32) -> (),\n) {\n    for i in 0..MaxLen {\n        if i < vec.len() {\n            f(vec.get_unchecked(i), i);\n        }\n    }\n}\n"
    },
    "127": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
      "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_header::NoteHeader,\n    note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_nullify_internal, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let packed_note_content = Note::pack_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        packed_note_content,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"
    },
    "129": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr",
      "source": "/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"
    },
    "131": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\nuse dep::protocol_types::constants::{\n    GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note_content: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note_content[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(context: PrivateContext, storage_slot: Field, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_content<let N: u32>(\n    packed_note_content: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note_content, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (Note, Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    /// Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    /// is check that the metadata is correct, and that the note exists.\n    let note = unsafe { get_note_internal(storage_slot) };\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    /// Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::array::collapse(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\n        BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.pack_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_content(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\nwhere\n    Note: NoteInterface<N>,\n{\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length,\n    )[0]\n        .expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteInterface<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteInterface<N>,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
    },
    "136": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr",
      "source": "use crate::note::constants::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{NoteStatus, PropertySelector, Select, Sort};\nuse crate::note::note_interface::NoteInterface;\nuse dep::protocol_types::traits::ToField;\nuse std::option::Option;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    pub selects: BoundedVec<Option<Select>, N>,\n    pub sorts: BoundedVec<Option<Sort>, N>,\n    pub limit: u32,\n    pub offset: u32,\n    pub status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N>\n    where\n        Note: NoteInterface<N>,\n    {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE,\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T,\n    ) -> Self\n    where\n        T: ToField,\n    {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        if !dep::std::runtime::is_unconstrained() {\n            assert_constant(limit);\n        }\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"
    },
    "137": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\n    utils::array,\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    compute_unique_note_hash,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let header = note.get_header();\n    let nonce = header.nonce;\n    let counter = header.note_hash_counter;\n\n    // If same tx note, read request always uses the normal note hash\n    if counter != 0 {\n        note_hash\n    } else {\n        // If the note comes from a different tx, we need to compute the note hash that reached the tree\n        compute_unique_note_hash(\n            nonce,\n            compute_siloed_note_hash(header.contract_address, note_hash),\n        )\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if (header.note_hash_counter != 0) & (header.nonce != 0) {\n        // Non-revertible note, nullified by a revertible nullifier, we need to nullify the note hash that will reach the tree\n        let siloed_note_hash =\n            compute_siloed_note_hash(header.contract_address, note_hash_for_read_request);\n\n        compute_unique_note_hash(header.nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    unpack_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    packed_note_content: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = unpack_content(array::subarray(packed_note_content, 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, note_hash);\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"
    },
    "139": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "140": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "141": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "142": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field]) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values) };\n}\n\npub unconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field]) {\n    let _ = store_in_execution_cache_oracle(values);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field]) -> Field {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "143": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, constants::CONTRACT_INSTANCE_LENGTH, contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    /// Safety: The to_address function combines all values in the instance object to produce an address,\n    /// so by checking that we get the expected address we validate the entire struct.\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "147": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use crate::utils::array;\nuse dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage {\n            slot: fields[1],\n            value: fields[2],\n            next_index: fields[3] as u32,\n            next_slot: fields[4],\n        },\n        path: array::subarray(fields, 1 + LEAF_PREIMAGE_LENGTH),\n    }\n}\n"
    },
    "148": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use dep::protocol_types::abis::validation_requests::{\n    key_validation_request::KEY_VALIDATION_REQUEST_LENGTH, KeyValidationRequest,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"
    },
    "149": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "152": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/oracle/note_discovery.nr",
      "source": "use crate::note::discovery::MAX_NOTE_SERIALIZED_LEN;\nuse dep::protocol_types::address::AztecAddress;\n\n/// Informs PXE of a note's existence so that it can later retrieved by the `getNotes` oracle. The note will be scoped\n/// to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The note's `content` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value is\n/// typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are the\n/// inner hashes, i.e. the raw hashes returned by `NoteInterface::compute_note_hash` and\n/// `NullifiableNote::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree at\n/// `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was sucessfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    content: BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        content,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    content: BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n"
    },
    "153": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note_content,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        packed_note_content,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note_content: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    let _ = notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    sync_notes_oracle_wrapper();\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let note_content = array::subarray(fields, read_offset + 2);\n\n            let mut note = Note::unpack_content(note_content);\n            note.set_header(NoteHeader { contract_address, nonce, storage_slot, note_hash_counter });\n\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\n}\n\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\n/// Includes the last known index used to send a note tagged with this secret.\n/// For this to work, PXE must know the ivsk_m of the sender.\n/// For the recipient's side, only the address is needed.\npub unconstrained fn get_indexed_tagging_secret_as_sender(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> IndexedTaggingSecret {\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\n    IndexedTaggingSecret::deserialize(result)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\n/// for later querying via the `get_notes` oracle.\npub fn sync_notes() {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        sync_notes_oracle_wrapper();\n    }\n}\n\nunconstrained fn sync_notes_oracle_wrapper() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n"
    },
    "155": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
      "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
    },
    "159": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "164": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr",
      "source": "use crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // TODO: This function is still around because of a stale blacklist token. It should most likely be nuked. If you\n    // need this functionality use partial notes instead.\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"
    },
    "166": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    state_vars::storage::Storage,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    // docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PrivateContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub fn read(self) -> T {\n        let header = self.context.get_block_header();\n        let mut fields = [0; T_PACKED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] = header.public_storage_historical_read(\n                self.storage_slot + i as Field,\n                (*self.context).this_address(),\n            );\n        }\n        T::unpack(fields)\n    }\n}\n"
    },
    "167": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "17": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"
    },
    "18": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    /// Safety: borrow is enforced to be boolean due to its type.\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        /*@safety: borrow is enforced to be boolean due to its type.\n            if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n            if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n        */\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        /// Safety: decomposition is properly checked below\n        unsafe {\n            /*@safety: decomposition is properly checked below*/\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            /// Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unsafe in unconstrained\n        unsafe {\n            //@safety: unsafe in unconstrained\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        /// Safety: Take a hint of the comparison and verify it\n        unsafe {\n            //@safety: Take a hint of the comparison and verify it\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "185": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr",
      "source": "/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    /// Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n"
    },
    "187": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "188": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    vec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(vec.storage(), offset), vec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "189": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/utils/bytes.nr",
      "source": "use crate::oracle::random::random;\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole bytes.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted into a Field. If the last chunk\n/// is less than 31 bytes long, then only the relevant bytes are considered.\n/// For example, [1, 10, 3] is encoded as [1 * 256^2 + 10 * 256 + 3]\n/// Note: ceil(N / 31) = (N + 30) / 31\npub fn be_bytes_31_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = [0; (N + 30) / 31];\n\n    // There are N / 31 whole fields that can be populated.\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    // Note: if 31 divides N, then this loop does not execute.\n    // ceil(N/31) - floor(N/31) = 1, unless 31 divides N, in which case it's 0.\n    for _ in 0..((N + 30) / 31) - (N / 31) {\n        let mut final_field = 0;\n        let final_field_idx = fields.len() - 1;\n        let final_offset = final_field_idx * 31;\n        // N - ((N / 31) * 31) = N - floor(N/31) * 31 = the number of bytes to go in the final field.\n        for j in 0..N - ((N / 31) * 31) {\n            // Shift the existing value left by 8 bits and add the new byte\n            final_field = final_field * 256 + bytes[final_offset + j] as Field;\n        }\n\n        fields[final_field_idx] = final_field;\n    }\n\n    fields\n}\n\npub fn le_bytes_31_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = [0; (N + 30) / 31];\n\n    // There are N / 31 whole fields that can be populated.\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            let k = 31 - j - 1; // iterate in reverse.\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + k] as Field;\n        }\n        fields[i] = field;\n    }\n\n    // Note: if 31 divides N, then this loop does not execute.\n    // ceil(N/31) - floor(N/31) = 1, unless 31 divides N, in which case it's 0.\n    for _ in 0..((N + 30) / 31) - (N / 31) {\n        let mut final_field = 0;\n        let final_field_idx = fields.len() - 1;\n        let final_offset = final_field_idx * 31;\n        // N - ((N / 31) * 31) = N - floor(N/31) * 31 = the number of bytes to go in the final field.\n        for j in 0..N - ((N / 31) * 31) {\n            let k = (N - ((N / 31) * 31)) - j - 1; // iterate in reverse.\n            // Shift the existing value left by 8 bits and add the new byte\n            final_field = final_field * 256 + bytes[final_offset + k] as Field;\n        }\n        fields[final_field_idx] = final_field;\n    }\n\n    fields\n}\n\n/// Converts an input array of fields into a single array of bytes.\n/// Each input field must contain only 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte\n/// chunks are concatenated back together in the order of the original fields.\n///\n/// It appears that the original author of this function wants to give the caller some control\n/// over the number of bytes that are returned: the final field can be mapped to fewer than 31 bytes,\n/// based on the caller's choice of M.\n/// Given the input is N fields, and each field (except the last) is mapped to 31 bytes,\n/// we definitely need M > (N - 1) * 31 to cover those first (N - 1) fields. Hence the static assertion.\n/// TODO: this is the same as the \"le\" version of this function, save for the `field.to_be_bytes()` calls. I tried passing the conversion function in as a parameter, to reduce code duplication, but couldn't get it to work.\npub fn fields_to_be_bytes_31<let N: u32, let M: u32>(fields: [Field; N]) -> [u8; M] {\n    let mut bytes = [0; M];\n\n    std::static_assert(M > (N - 1) * 31, \"Not enough output bytes specified\");\n    // We make this assertion to keep the logic simpler:\n    std::static_assert(N * 31 >= M, \"Too many output bytes specified.\");\n\n    for i in 0..N - 1 {\n        let field = fields[i];\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes[i * 31 + j] = field_as_bytes[j];\n        }\n    }\n\n    let final_field = fields[N - 1];\n    final_field.assert_max_bit_size::<8 * (M - ((N - 1) * 31))>();\n\n    let final_field_as_bytes: [u8; M - ((N - 1) * 31)] = final_field.to_be_bytes();\n\n    let start_index = (N - 1) * 31;\n    for j in 0..M - ((N - 1) * 31) {\n        bytes[start_index + j] = final_field_as_bytes[j];\n    }\n\n    bytes\n}\n\n/// Converts an input array of fields into a single array of bytes.\n/// Each input field must contain only 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 little-endian bytes, and the resulting 31-byte\n/// chunks are concatenated back together in the order of the original fields. You'll\n/// end up with quite a strange ordering of bytes if you use this particular function.\npub fn fields_to_le_bytes_31<let N: u32, let M: u32>(fields: [Field; N]) -> [u8; M] {\n    let mut bytes = [0; M];\n\n    std::static_assert(M > (N - 1) * 31, \"Not enough output bytes specified\");\n    // We make this assertion to keep the logic simpler:\n    std::static_assert(N * 31 >= M, \"Too many output bytes specified.\");\n\n    for i in 0..N - 1 {\n        let field = fields[i];\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_le_bytes();\n\n        for j in 0..31 {\n            bytes[i * 31 + j] = field_as_bytes[j];\n        }\n    }\n\n    let final_field = fields[N - 1];\n    final_field.assert_max_bit_size::<8 * (M - ((N - 1) * 31))>();\n\n    let final_field_as_bytes: [u8; M - ((N - 1) * 31)] = final_field.to_le_bytes();\n\n    let start_index = (N - 1) * 31;\n    for j in 0..M - ((N - 1) * 31) {\n        bytes[start_index + j] = final_field_as_bytes[j];\n    }\n\n    bytes\n}\n\n/// Converts an input array of fields into a single array of bytes.\n/// Each field is converted to a 32-byte big-endian array.\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end,\n/// every 32 bytes. Be careful that such a gap doesn't leak information!\npub fn fields_to_be_bytes_32<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field = fields[i];\n        let field_as_bytes: [u8; 32] = field.to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\nunconstrained fn byte_to_bits(byte: u8) -> [u1; 8] {\n    let mut mut_byte = byte;\n    let mut bits: [u1; 8] = [0; 8];\n    for i in 0..8 {\n        bits[i] = (mut_byte & 1) as u1;\n        mut_byte >>= 1;\n    }\n    bits\n}\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n\n/// Returns as many random bits as specified through N.\nunconstrained fn get_random_bits<let N: u32>() -> [u1; N] {\n    // Note: (N + 7) / 8 = ceil(N / 8)\n    let bytes = get_random_bytes::<(N + 7) / 8>();\n    let mut bits: [u1; N] = [0; N];\n    for i in 0..bytes.len() - 1 {\n        let mut byte = bytes[i];\n        for j in 0..8 {\n            let bit_idx = i * 8 + j;\n            bits[bit_idx] = (byte & 1) as u1;\n            byte >>= 1;\n        }\n    }\n\n    // N - ((N / 8) * 8) = N - floor(N/8) * 8 = the number of bits remaining.\n    let byte_idx = bytes.len() - 1;\n    let mut byte = bytes[byte_idx];\n    for j in 0..N - ((N / 8) * 8) {\n        let bit_idx = (byte_idx) * 8 + j;\n        bits[bit_idx] = (byte & 1) as u1;\n        byte >>= 1;\n    }\n\n    bits\n}\n\n/// Returns random bits, in chunks, according to the provided numeric generics.\nunconstrained fn get_chunks_of_random_bits<let NUM_CHUNKS: u32, let NUM_BITS: u32>() -> [[u1; NUM_BITS]; NUM_CHUNKS] {\n    let random_bits = get_random_bits::<NUM_CHUNKS * NUM_BITS>();\n    let mut chunks: [[u1; NUM_BITS]; NUM_CHUNKS] = [[0; NUM_BITS]; NUM_CHUNKS];\n    for i in 0..NUM_CHUNKS {\n        let mut chunk: [u1; NUM_BITS] = [0; NUM_BITS];\n        for j in 0..NUM_BITS {\n            chunk[j] = random_bits[i * NUM_BITS + j];\n        }\n        chunks[i] = chunk;\n    }\n    chunks\n}\n\n/**\n * Helper fn for be/le_bytes_to_padded_fields() fns.\n */\nfn pad_31_byte_fields_with_random_bits<let N: u32>(input: [Field; N]) -> [Field; N] {\n    /// Safety: we can't constrain whether or not the returned bits are actually random;\n    /// we can only rely on it being in the caller's best interest.\n    let chunks_of_random_bits = unsafe { get_chunks_of_random_bits::<((N + 30) / 31), 6>() };\n    let mut fields = input;\n    // We push the random bits to the \"big end\" of each field\n    let TWO_POW_248 = 0x100000000000000000000000000000000000000000000000000000000000000;\n    for i in 0..fields.len() {\n        let mut shift = TWO_POW_248;\n        for j in 0..5 {\n            fields[i] += shift * chunks_of_random_bits[i][j] as Field;\n            shift *= 2;\n        }\n\n        // This might overflow the field modulus, so we need to be careful.\n        // By this point, shift = 2 ^ 253, so will populate the 254th bit (counting from 1)\n        let field_with_254th_bit = fields[i] + shift * chunks_of_random_bits[i][6 - 1] as Field;\n\n        // Expensive comparison (one for each field), but it's important -- if we want to hide that we were\n        // working with bytes -- that we include the 254th random bit when it fits.\n        fields[i] = if (fields[i].lt(field_with_254th_bit)) {\n            field_with_254th_bit\n        } else {\n            fields[i]\n        };\n    }\n    fields\n}\n\n/**\n * The above functions be_bytes_31_to_fields and le_bytes_31_to_fields have a privacy-leakage problem:\n * they result in fields which are all 248-bits instead of 254-bits.\n * That means if the above functions are used to convert a ciphertext from bytes to\n * fields, it leaks (with very high probability) to all observers of the log that the\n * ciphertext was created with a \"bit twiddly\" encryption scheme like AES.\n * This reduces privacy sets for all apps.\n *\n * This function seeks to \"pad\" those remaining 6 bits with randomness, so that all\n * encrypted logs look even more similar (full fields of 254-bits of random-looking\n * information). Of course, this adds some extra constraints, unfortunately.\n */\npub fn le_bytes_to_padded_fields<let N: u32>(input: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = le_bytes_31_to_fields(input);\n    pad_31_byte_fields_with_random_bits(fields)\n}\n\npub fn be_bytes_to_padded_fields<let N: u32>(input: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = be_bytes_31_to_fields(input);\n    pad_31_byte_fields_with_random_bits(fields)\n}\n\nmod test {\n    use crate::utils::bytes::{\n        be_bytes_31_to_fields, fields_to_be_bytes_31, fields_to_le_bytes_31, le_bytes_31_to_fields,\n    };\n\n    // BE BYTES\n\n    #[test]\n    fn test_be_bytes_31_to_1_field() {\n        let input = [\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31,\n        ];\n        let output = be_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n    }\n\n    #[test]\n    fn test_1_field_to_be_bytes_31() {\n        let input = [0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f];\n        let output: [u8; 31] = fields_to_be_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n                24, 25, 26, 27, 28, 29, 30, 31,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_be_bytes_31() {\n        let input = [1, 2, 3];\n        let output: [u8; 93] = fields_to_be_bytes_31(input);\n\n        // Each field should occupy 31 bytes with the non-zero value being placed in the last one.\n        assert_eq(\n            output,\n            [\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_fewer_be_bytes() {\n        let input = [1, 2, 3];\n        let output: [u8; 63] = fields_to_be_bytes_31(input);\n        println(f\"output: {output}\");\n\n        // First 2 fields should occupy 31 bytes with the non-zero value being placed in the last one while the last\n        // field should occupy 1 byte. There is not information destruction here because the last field fits into\n        // 1 byte.\n        assert_eq(\n            output,\n            [\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 2, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_be_bytes_31_to_2_fields() {\n        let input = [\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\n            47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        ];\n        let output = be_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n        assert_eq(output[1], 0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b);\n    }\n\n    #[test]\n    fn test_2_fields_to_be_bytes_31() {\n        let input = [\n            0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,\n            0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b,\n        ];\n        let output: [u8; 62] = fields_to_be_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n                24, 25, 26, 27, 28, 29, 30, 31, 0, 0, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\n                43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_large_random_be_bytes_31_input_to_fields_and_back(input: [u8; 128]) {\n        let output = be_bytes_31_to_fields(input);\n        let input_back: [u8; 128] = fields_to_be_bytes_31(output);\n\n        assert_eq(input, input_back);\n    }\n\n    // I need to get an array of random values lower than 2^248 on input and since there is no u248 type and modulo\n    // operation is not supported on a Field (to do field % 2^248), I will take multiple smaller values and combine\n    // them to get a value lower than 2^248.\n    #[test]\n    fn test_large_random_input_to_be_bytes_31_and_back(\n        input1: [u64; 5],\n        input2: [u64; 5],\n        input3: [u64; 5],\n        input4: [u32; 5],\n        input5: [u16; 5],\n        input6: [u8; 5],\n    ) {\n        let mut input = [0; 5];\n        for i in 0..5 {\n            input[i] = (input1[i] as Field * 2.pow_32(184))\n                + (input2[i] as Field * 2.pow_32(120))\n                + (input3[i] as Field * 2.pow_32(56))\n                + (input4[i] as Field * 2.pow_32(24))\n                + (input5[i] as Field * 2.pow_32(8))\n                + input6[i] as Field;\n        }\n\n        let output: [u8; 155] = fields_to_be_bytes_31(input);\n        let input_back = be_bytes_31_to_fields(output);\n\n        assert_eq(input, input_back);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_too_few_destination_be_bytes() {\n        // We should get an error here because first field gets converted to 31 bytes and the second field needs\n        // at least 2 bytes but we provide it with 1.\n        let input = [1, 256];\n        let _ignored_result: [u8; 32] = fields_to_be_bytes_31(input);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_fields_to_be_bytes_31_value_too_large() {\n        let input = [2.pow_32(248)]; // this number is 1 bit larger than 31 bytes.\n        let _ignored_result: [u8; 31] = fields_to_be_bytes_31(input);\n    }\n\n    #[test]\n    fn test_fields_to_be_bytes_31_max_value() {\n        let input = [2.pow_32(248) - 1];\n        let result: [u8; 31] = fields_to_be_bytes_31(input);\n\n        // We check that all the bytes were set to max value (255)\n        for i in 0..31 {\n            assert_eq(result[i], 255);\n        }\n    }\n\n    // LE BYTES\n\n    #[test]\n    fn test_le_bytes_31_to_1_field() {\n        let input = [\n            31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,\n            9, 8, 7, 6, 5, 4, 3, 2, 1,\n        ];\n        let output = le_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n    }\n\n    #[test]\n    fn test_1_field_to_le_bytes_31() {\n        let input = [0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f];\n        let output: [u8; 31] = fields_to_le_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11,\n                10, 9, 8, 7, 6, 5, 4, 3, 2, 1,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_le_bytes_31() {\n        let input = [1, 2, 3];\n        let output: [u8; 93] = fields_to_le_bytes_31(input);\n\n        // Each field should occupy 31 bytes with the non-zero value being placed in the last one.\n        assert_eq(\n            output,\n            [\n                1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_fewer_le_bytes() {\n        let input = [1, 2, 3];\n        let output: [u8; 63] = fields_to_le_bytes_31(input);\n\n        // First 2 fields should occupy 31 bytes with the non-zero value being placed in the last one while the last\n        // field should occupy 1 byte. There is not information destruction here because the last field fits into\n        // 1 byte.\n        assert_eq(\n            output,\n            [\n                1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_le_bytes_31_to_2_fields() {\n        let input = [\n            59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38,\n            37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,\n            15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1,\n        ];\n        let output = le_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b);\n        assert_eq(output[1], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c);\n    }\n\n    #[test]\n    fn test_2_fields_to_le_bytes_31() {\n        let input = [\n            0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,\n            0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b,\n        ];\n        let output: [u8; 62] = fields_to_le_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11,\n                10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47,\n                46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 0, 0, 0,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_large_random_le_bytes_input_to_fields_and_back(input: [u8; 128]) {\n        let output = le_bytes_31_to_fields(input);\n        let input_back: [u8; 128] = fields_to_le_bytes_31(output);\n\n        assert_eq(input, input_back);\n    }\n\n    // I need to get an array of random values lower than 2^248 on input and since there is no u248 type and modulo\n    // operation is not supported on a Field (to do field % 2^248), I will take multiple smaller values and combine\n    // them to get a value lower than 2^248.\n    #[test]\n    fn test_large_random_input_to_le_bytes_and_back(\n        input1: [u64; 5],\n        input2: [u64; 5],\n        input3: [u64; 5],\n        input4: [u32; 5],\n        input5: [u16; 5],\n        input6: [u8; 5],\n    ) {\n        let mut input = [0; 5];\n        for i in 0..5 {\n            input[i] = (input1[i] as Field * 2.pow_32(184))\n                + (input2[i] as Field * 2.pow_32(120))\n                + (input3[i] as Field * 2.pow_32(56))\n                + (input4[i] as Field * 2.pow_32(24))\n                + (input5[i] as Field * 2.pow_32(8))\n                + input6[i] as Field;\n        }\n\n        let output: [u8; 155] = fields_to_le_bytes_31(input);\n        let input_back = le_bytes_31_to_fields(output);\n\n        assert_eq(input, input_back);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_too_few_destination_le_bytes() {\n        // We should get an error here because first field gets converted to 31 bytes and the second field needs\n        // at least 2 bytes but we provide it with 1.\n        let input = [1, 256];\n        let _ignored_result: [u8; 32] = fields_to_le_bytes_31(input);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_fields_to_le_bytes_31_value_too_large() {\n        let input = [2.pow_32(248)];\n        let _ignored_result: [u8; 31] = fields_to_le_bytes_31(input);\n    }\n\n    #[test]\n    fn test_fields_to_le_bytes_31_max_value() {\n        let input = [2.pow_32(248) - 1];\n        let result: [u8; 31] = fields_to_le_bytes_31(input);\n\n        // We check that all the bytes were set to max value (255)\n        for i in 0..31 {\n            assert_eq(result[i], 255);\n        }\n    }\n}\n"
    },
    "19": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unconstrained context\n        unsafe {\n            //@safety : unconstrained context\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    // #[test]\n    // fn test_to_le_radix_brillig_1() {\n    //     // this test should only fail in constrained mode\n    //     if runtime::is_unconstrained() {\n    //         let field = 1;\n    //         let out: [u8; 8] = field.to_le_radix(1);\n    //         crate::println(out);\n    //         let expected = [0; 8];\n    //         assert(out == expected, \"unexpected result\");\n    //     }\n    // }\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    // #[test]\n    // fn test_to_le_radix_brillig_512() {\n    //     // this test should only fail in constrained mode\n    //     if runtime::is_unconstrained() {\n    //         let field = 1;\n    //         let out: [u8; 8] = field.to_le_radix(512);\n    //         let mut expected = [0; 8];\n    //         expected[0] = 1;\n    //         assert(out == expected, \"unexpected result\");\n    //     }\n    // }\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "190": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/utils/comparison.nr",
      "source": "struct ComparatorEnum {\n    pub EQ: u8,\n    pub NEQ: u8,\n    pub LT: u8,\n    pub LTE: u8,\n    pub GT: u8,\n    pub GTE: u8,\n}\n\npub global Comparator: ComparatorEnum =\n    ComparatorEnum { EQ: 1, NEQ: 2, LT: 3, LTE: 4, GT: 5, GTE: 6 };\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::Comparator;\n    use super::compare;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            !compare(lhs, Comparator.LTE, rhs),\n            \"Expected lhs to not be less than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n    }\n}\n"
    },
    "193": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::point_to_bytes;\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n"
    },
    "21": {
      "path": "std/hash/mod.nr",
      "source": "pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    /// Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"
    },
    "212": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "247": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr",
      "source": "use crate::{point::Point, traits::{Deserialize, Empty, Serialize}};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pub pk_m: Point,\n    pub sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"
    },
    "254": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        MAX_FIELD_VALUE,\n    },\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse ec::{pow, sqrt};\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        function_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            function_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "26": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "269": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "27": {
      "path": "std/hash/sha256.nr",
      "source": "use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        /// Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        /// Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    /// Safety: the msg_len is checked below in verify_msg_len\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n\n        /// Safety: testing context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 0) };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        /// Safety: test context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 64) };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        /// Safety: testing context\n        let msg_block = unsafe { attach_len_to_msg_block(input, 1, 448) };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n"
    },
    "270": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "271": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash},\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::{constants::TWO_POW_64, utils::{arrays::array_concat, field::field_from_bytes}};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_contract_class_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_contract_class_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; N * 32];\n    for offset in 0..N {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "272": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr",
      "source": "use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n"
    },
    "281": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "287": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "288": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "297": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "3": {
      "path": "std/array/mod.nr",
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        /// Safety: `sorted` array is checked to be:\n        /// a. a permutation of `input`'s elements\n        /// b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n"
    },
    "300": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "313": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "317": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::{Packable, ToField};\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for U128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self.to_field()]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "318": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 2;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        // We use little-endian ordering to match the order in which U128 defines its limbs.\n        // This is necessary because of how Noir handles serialization:\n        // - When calling a contract function from TypeScript, the serialization in encoder.ts gets used and then Noir\n        //   deserializes using its intrinsic serialization logic (based on the limb order in the struct).\n        // - When calling a contract function from another function, the `serialize` method is invoked on the type\n        //   first.\n        // For this reason if we didn't use the ordering of U128 limbs here and in encoder.ts we would get an arguments\n        // hash mismatch.\n        [self.lo, self.hi]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_u64s_le(fields[0] as u64, fields[1] as u64)\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "334": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    /// Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    /// of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "335": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "337": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "342": {
      "path": "/Users/hka/nargo/github.com/noir-lang/ec/v0.1.2/src/lib.nr",
      "source": "// Elliptic curve implementation\n// Overview\n// ========\n// The following three elliptic curve representations are admissible:\npub mod tecurve; // Twisted Edwards curves\npub mod swcurve; // Elliptic curves in Short Weierstrass form\npub mod montcurve; // Montgomery curves\npub mod consts; // Commonly used curve presets\n//\n// Note that Twisted Edwards and Montgomery curves are (birationally) equivalent, so that\n// they may be freely converted between one another, whereas Short Weierstrass curves are\n// more general. Diagramatically:\n//\n// tecurve == montcurve `subset` swcurve\n//\n// Each module is further divided into two submodules, 'affine' and 'curvegroup', depending\n// on the preferred coordinate representation. Affine coordinates are none other than the usual\n// two-dimensional Cartesian coordinates used in the definitions of these curves, whereas\n// 'CurveGroup' coordinates (terminology borrowed from Arkworks, whose conventions we try\n// to follow) are special coordinate systems with respect to which the group operations may be\n// implemented more efficiently, usually by means of an appropriate choice of projective coordinates.\n//\n// In each of these submodules, there is a Point struct and a Curve struct, the former\n// representing a point in the coordinate system and the latter a curve configuration.\n//\n// Points\n// ======\n// Points may be instantiated using the associated function `new`, which takes coordinates\n// as its arguments. For instance,\n//\n// `let p = swcurve::Point::new(1,1);`\n//\n// The additive identity may be constructed by a call to the associated function `zero` of no\n// arguments:\n//\n// `let zero = swcurve::Point::zero();`\n//\n// Points may be tested for equality by calling the method `eq`:\n//\n// `let pred = p.eq(zero);`\n//\n// There is also the method `is_zero` to explicitly check whether a point is the additive identity:\n//\n// `constrain pred == p.is_zero();`\n//\n// Points may be negated by calling the `negate` method and converted to CurveGroup (or affine)\n// coordinates by calling the `into_group` (resp. `into_affine`) method on them. Finally,\n// Points may be freely mapped between their respective Twisted Edwards and Montgomery\n// representations by calling the `into_montcurve` or `into_tecurve` methods. For mappings\n// between Twisted Edwards/Montgomery curves and Short Weierstrass curves, see the Curve section\n// below, as the underlying mappings are those of curves rather than ambient spaces.\n// As a rule, Points in affine (or CurveGroup) coordinates are mapped to Points in affine\n// (resp. CurveGroup) coordinates.\n//\n// Curves\n// ======\n// A curve configuration (Curve) is completely determined by the Field coefficients of its defining\n// equation (a and b in the case of swcurve, a and d in the case of tecurve, and j and k in\n// the case of montcurve) together with a generator (`gen`) in the corresponding coordinate system.\n// For example, the Baby Jubjub curve configuration as defined in ERC-2494 may be instantiated as a Twisted\n// Edwards curve in affine coordinates as follows:\n//\n// `let bjj_affine = tecurve::Curve::new(168700, 168696, tecurve::Point::new(995203441582195749578291179787384436505546430278305826713579947235728471134,5472060717959818805561601436314318772137091100104008585924551046643952123905));`\n//\n// The `contains` method may be used to check whether a Point lies on a given curve:\n//\n// `constrain bjj_affine.contains(tecurve::Point::zero());`\n//\n// The elliptic curve group's addition operation is exposed as the `add` method, e.g.\n//\n// `let p = bjj_affine.add(bjj_affine.gen, bjj_affine.gen);`\n//\n// subtraction as the `subtract` method, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.subtract(bjj_affine.gen, bjj_affine.gen));`\n//\n// scalar multiplication as the `mul` method, where the scalar is assumed to be a Field* element, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.mul(2, tecurve::Point::zero());`\n//\n// There is a scalar multiplication method (`bit_mul`) provided where the scalar input is expected to be\n// an array of bits (little-endian convention), as well as a multi-scalar multiplication method** (`msm`)\n// which takes an array of Field elements and an array of elliptic curve points as arguments, both assumed\n// to be of the same length.\n//\n// Curve configurations may be converted between different coordinate representations by calling the `into_group`\n// and `into_affine` methods on them, e.g.\n//\n// `let bjj_curvegroup = bjj_affine.into_group();`\n//\n// Curve configurations may also be converted between different curve representations by calling the `into_swcurve`,\n// `into_montcurve` and `into_tecurve` methods subject to the relation between the curve representations mentioned\n// above. Note that it is possible to map Points from a Twisted Edwards/Montgomery curve to the corresponding\n// Short Weierstrass representation and back, and the methods to do so are exposed as `map_into_swcurve` and\n// `map_from_swcurve`, which each take one argument, the point to be mapped.\n//\n// Curve maps\n// ==========\n// There are a few different ways of mapping Field elements to elliptic curves. Here we provide the simplified\n// Shallue-van de Woestijne-Ulas and Elligator 2 methods, the former being applicable to all curve types\n// provided above subject to the constraint that the coefficients of the corresponding Short Weierstrass curve satisfies\n// a*b != 0 and the latter being applicable to Montgomery and Twisted Edwards curves subject to the constraint that\n// the coefficients of the corresponding Montgomery curve satisfy j*k != 0 and (j^2 - 4)/k^2 is non-square.\n//\n// The simplified Shallue-van de Woestijne-Ulas method is exposed as the method `swu_map` on the Curve configuration and\n// depends on two parameters, a Field element z != -1 for which g(x) - z is irreducible over Field and g(b/(z*a)) is\n// square, where g(x) = x^3 + a*x + b is the right-hand side of the defining equation of the corresponding Short\n// Weierstrass curve, and a Field element u to be mapped onto the curve. For example, in the case of bjj_affine above,\n// it may be determined using the scripts provided at <https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve> that z = 5.\n//\n// The Elligator 2 method is exposed as the method `elligator2_map` on the Curve configurations of Montgomery and\n// Twisted Edwards curves. Like the simplified SWU method above, it depends on a certain non-square element of Field,\n// but this element need not satisfy any further conditions, so it is included as the (Field-dependent) constant\n//`ZETA` below. Thus, the `elligator2_map` method depends only on one parameter, the Field element to be mapped onto\n// the curve.\n//\n// For details on all of the above in the context of hashing to elliptic curves, see <https://datatracker.ietf.org/doc/id/draft-irtf-cfrg-hash-to-curve-06.html>.\n//\n//\n// *TODO: Replace Field with Bigint.\n// **TODO: Support arrays of structs to make this work.\n// Field-dependent constant ZETA = a non-square element of Field\n// Required for Elligator 2 map\n// TODO: Replace with built-in constant.\nglobal ZETA: Field = 5;\n// Field-dependent constants for Tonelli-Shanks algorithm (see sqrt function below)\n// TODO: Possibly make this built-in.\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n// Higher-order version of scalar multiplication\n// TODO: Make this work so that the submodules' bit_mul may be defined in terms of it.\n//fn bit_mul<T,N>(add: fn(T,T) -> T, e: T, bits: [u1; N], p: T) -> T {\n//    let mut out = e;\n//    let n = bits.len();\n//\n//    for i in 0..n {\n//        out = add(\n//            add(out, out),\n//            if(bits[n - i - 1] == 0) {e} else {p});\n//    }\n//\n//    out\n//}\n// TODO: Make this built-in.\npub fn safe_inverse(x: Field) -> Field {\n    if x == 0 {\n        0\n    } else {\n        1 / x\n    }\n}\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\npub fn is_square(x: Field) -> bool {\n    let v = pow(x, 0 - 1 / 2);\n\n    v * (v - 1) == 0\n}\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\nmod tests {\n    use crate::montcurve::affine::Point as MGaffine;\n    use crate::montcurve::curvegroup::Point as MG;\n    use crate::swcurve::affine::Point as SWGaffine;\n    use crate::swcurve::curvegroup::Point as SWG;\n    use crate::tecurve::affine::Curve as AffineCurve;\n    use crate::tecurve::affine::Point as Gaffine;\n    use crate::tecurve::curvegroup::Point as G;\n\n    #[test]\n    fn smoke_test() {\n        // Tests may be checked against https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/tree/main/poc\n        // Define Baby Jubjub (ERC-2494) parameters in affine representation\n        let bjj_affine = AffineCurve::new(\n            168700,\n            168696,\n            Gaffine::new(\n                995203441582195749578291179787384436505546430278305826713579947235728471134,\n                5472060717959818805561601436314318772137091100104008585924551046643952123905,\n            ),\n        );\n        // Test addition\n        let p1_affine = Gaffine::new(\n            17777552123799933955779906779655732241715742912184938656739573121738514868268,\n            2626589144620713026669568689430873010625803728049924121243784502389097019475,\n        );\n        let p2_affine = Gaffine::new(\n            16540640123574156134436876038791482806971768689494387082833631921987005038935,\n            20819045374670962167435360035096875258406992893633759881276124905556507972311,\n        );\n\n        let p3_affine = bjj_affine.add(p1_affine, p2_affine);\n        assert(p3_affine.eq(Gaffine::new(\n            7916061937171219682591368294088513039687205273691143098332585753343424131937,\n            14035240266687799601661095864649209771790948434046947201833777492504781204499,\n        )));\n        // Test scalar multiplication\n        let p4_affine = bjj_affine.mul(2, p1_affine);\n        assert(p4_affine.eq(Gaffine::new(\n            6890855772600357754907169075114257697580319025794532037257385534741338397365,\n            4338620300185947561074059802482547481416142213883829469920100239455078257889,\n        )));\n        assert(p4_affine.eq(bjj_affine.bit_mul([0, 1], p1_affine)));\n        // Test subtraction\n        let p5_affine = bjj_affine.subtract(p3_affine, p3_affine);\n        assert(p5_affine.eq(Gaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_affine.contains(bjj_affine.gen)\n                & bjj_affine.contains(p1_affine)\n                & bjj_affine.contains(p2_affine)\n                & bjj_affine.contains(p3_affine)\n                & bjj_affine.contains(p4_affine)\n                & bjj_affine.contains(p5_affine),\n        );\n        // Test CurveGroup equivalents\n        let bjj = bjj_affine.into_group(); // Baby Jubjub\n        let p1 = p1_affine.into_group();\n        let p2 = p2_affine.into_group();\n        let p3 = p3_affine.into_group();\n        let p4 = p4_affine.into_group();\n        let p5 = p5_affine.into_group();\n        // Test addition\n        assert(p3.eq(bjj.add(p1, p2)));\n        // Test scalar multiplication\n        assert(p4.eq(bjj.mul(2, p1)));\n        assert(p4.eq(bjj.bit_mul([0, 1], p1)));\n        // Test subtraction\n        assert(G::zero().eq(bjj.subtract(p3, p3)));\n        assert(p5.eq(G::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj.contains(bjj.gen)\n                & bjj.contains(p1)\n                & bjj.contains(p2)\n                & bjj.contains(p3)\n                & bjj.contains(p4)\n                & bjj.contains(p5),\n        );\n        // Test SWCurve equivalents of the above\n        // First the affine representation\n        let bjj_swcurve_affine = bjj_affine.into_swcurve();\n\n        let p1_swcurve_affine = bjj_affine.map_into_swcurve(p1_affine);\n        let p2_swcurve_affine = bjj_affine.map_into_swcurve(p2_affine);\n        let p3_swcurve_affine = bjj_affine.map_into_swcurve(p3_affine);\n        let p4_swcurve_affine = bjj_affine.map_into_swcurve(p4_affine);\n        let p5_swcurve_affine = bjj_affine.map_into_swcurve(p5_affine);\n        // Addition\n        assert(p3_swcurve_affine.eq(bjj_swcurve_affine.add(p1_swcurve_affine, p2_swcurve_affine)));\n        // Doubling\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.mul(2, p1_swcurve_affine)));\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.bit_mul([0, 1], p1_swcurve_affine)));\n        // Subtraction\n        assert(SWGaffine::zero().eq(bjj_swcurve_affine.subtract(\n            p3_swcurve_affine,\n            p3_swcurve_affine,\n        )));\n        assert(p5_swcurve_affine.eq(SWGaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_swcurve_affine.contains(bjj_swcurve_affine.gen)\n                & bjj_swcurve_affine.contains(p1_swcurve_affine)\n                & bjj_swcurve_affine.contains(p2_swcurve_affine)\n                & bjj_swcurve_affine.contains(p3_swcurve_affine)\n                & bjj_swcurve_affine.contains(p4_swcurve_affine)\n                & bjj_swcurve_affine.contains(p5_swcurve_affine),\n        );\n        // Then the CurveGroup representation\n        let bjj_swcurve = bjj.into_swcurve();\n\n        let p1_swcurve = bjj.map_into_swcurve(p1);\n        let p2_swcurve = bjj.map_into_swcurve(p2);\n        let p3_swcurve = bjj.map_into_swcurve(p3);\n        let p4_swcurve = bjj.map_into_swcurve(p4);\n        let p5_swcurve = bjj.map_into_swcurve(p5);\n        // Addition\n        assert(p3_swcurve.eq(bjj_swcurve.add(p1_swcurve, p2_swcurve)));\n        // Doubling\n        assert(p4_swcurve.eq(bjj_swcurve.mul(2, p1_swcurve)));\n        assert(p4_swcurve.eq(bjj_swcurve.bit_mul([0, 1], p1_swcurve)));\n        // Subtraction\n        assert(SWG::zero().eq(bjj_swcurve.subtract(p3_swcurve, p3_swcurve)));\n        assert(p5_swcurve.eq(SWG::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_swcurve.contains(bjj_swcurve.gen)\n                & bjj_swcurve.contains(p1_swcurve)\n                & bjj_swcurve.contains(p2_swcurve)\n                & bjj_swcurve.contains(p3_swcurve)\n                & bjj_swcurve.contains(p4_swcurve)\n                & bjj_swcurve.contains(p5_swcurve),\n        );\n        // Test MontCurve conversions\n        // First the affine representation\n        let bjj_montcurve_affine = bjj_affine.into_montcurve();\n\n        let p1_montcurve_affine = p1_affine.into_montcurve();\n        let p2_montcurve_affine = p2_affine.into_montcurve();\n        let p3_montcurve_affine = p3_affine.into_montcurve();\n        let p4_montcurve_affine = p4_affine.into_montcurve();\n        let p5_montcurve_affine = p5_affine.into_montcurve();\n        // Addition\n        assert(p3_montcurve_affine.eq(bjj_montcurve_affine.add(\n            p1_montcurve_affine,\n            p2_montcurve_affine,\n        )));\n        // Doubling\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.mul(2, p1_montcurve_affine)));\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.bit_mul([0, 1], p1_montcurve_affine)));\n        // Subtraction\n        assert(MGaffine::zero().eq(bjj_montcurve_affine.subtract(\n            p3_montcurve_affine,\n            p3_montcurve_affine,\n        )));\n        assert(p5_montcurve_affine.eq(MGaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_montcurve_affine.contains(bjj_montcurve_affine.gen)\n                & bjj_montcurve_affine.contains(p1_montcurve_affine)\n                & bjj_montcurve_affine.contains(p2_montcurve_affine)\n                & bjj_montcurve_affine.contains(p3_montcurve_affine)\n                & bjj_montcurve_affine.contains(p4_montcurve_affine)\n                & bjj_montcurve_affine.contains(p5_montcurve_affine),\n        );\n        // Then the CurveGroup representation\n        let bjj_montcurve = bjj.into_montcurve();\n\n        let p1_montcurve = p1_montcurve_affine.into_group();\n        let p2_montcurve = p2_montcurve_affine.into_group();\n        let p3_montcurve = p3_montcurve_affine.into_group();\n        let p4_montcurve = p4_montcurve_affine.into_group();\n        let p5_montcurve = p5_montcurve_affine.into_group();\n        // Addition\n        assert(p3_montcurve.eq(bjj_montcurve.add(p1_montcurve, p2_montcurve)));\n        // Doubling\n        assert(p4_montcurve.eq(bjj_montcurve.mul(2, p1_montcurve)));\n        assert(p4_montcurve.eq(bjj_montcurve.bit_mul([0, 1], p1_montcurve)));\n        // Subtraction\n        assert(MG::zero().eq(bjj_montcurve.subtract(p3_montcurve, p3_montcurve)));\n        assert(p5_montcurve.eq(MG::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_montcurve.contains(bjj_montcurve.gen)\n                & bjj_montcurve.contains(p1_montcurve)\n                & bjj_montcurve.contains(p2_montcurve)\n                & bjj_montcurve.contains(p3_montcurve)\n                & bjj_montcurve.contains(p4_montcurve)\n                & bjj_montcurve.contains(p5_montcurve),\n        );\n        // Elligator 2 map-to-curve\n        let ell2_pt_map = bjj_affine.elligator2_map(27);\n\n        assert(ell2_pt_map.eq(MGaffine::new(\n            7972459279704486422145701269802978968072470631857513331988813812334797879121,\n            8142420778878030219043334189293412482212146646099536952861607542822144507872,\n        )\n            .into_tecurve()));\n        // SWU map-to-curve\n        let swu_pt_map = bjj_affine.swu_map(5, 27);\n\n        assert(swu_pt_map.eq(bjj_affine.map_from_swcurve(SWGaffine::new(\n            2162719247815120009132293839392097468339661471129795280520343931405114293888,\n            5341392251743377373758788728206293080122949448990104760111875914082289313973,\n        ))));\n    }\n\n}\n"
    },
    "350": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/compressed-string/src/field_compressed_string.nr",
      "source": "use dep::aztec::protocol_types::{\n    traits::{Deserialize, Packable, Serialize},\n    utils::field::field_from_bytes,\n};\nuse std::meta::derive;\n\n// A Fixedsize Compressed String.\n// Essentially a special version of Compressed String for practical use.\n#[derive(Deserialize, Packable, Serialize)]\npub struct FieldCompressedString {\n    value: Field,\n}\n\nimpl FieldCompressedString {\n    pub fn is_eq(self, other: FieldCompressedString) -> bool {\n        self.value == other.value\n    }\n\n    pub fn from_field(input_field: Field) -> Self {\n        Self { value: input_field }\n    }\n\n    pub fn from_string(input_string: str<31>) -> Self {\n        Self { value: field_from_bytes(input_string.as_bytes(), true) }\n    }\n\n    pub fn to_bytes(self) -> [u8; 31] {\n        self.value.to_be_bytes()\n    }\n}\n"
    },
    "51": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "52": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "6": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "62": {
      "path": "/Users/hka/tezac/src/contracts/src/main.nr",
      "source": "mod types;\nmod test;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\ncontract NFT {\n    use crate::types::nft_note::NFTNote;\n    use dep::authwit::auth::{\n        assert_current_call_valid_authwit, assert_current_call_valid_authwit_public,\n        compute_authwit_nullifier,\n    };\n    use dep::aztec::{\n        encrypted_logs::log_assembly_strategies::default_aes128::note::encode_and_encrypt_note,\n        macros::{\n            events::event,\n            functions::{initializer, internal, private, public, view},\n            storage::storage,\n        },\n        note::constants::MAX_NOTES_PER_PAGE,\n        oracle::random::random,\n        prelude::{\n            AztecAddress, Map, NoteGetterOptions, NoteViewerOptions, PrivateContext, PrivateSet,\n            PublicContext, PublicImmutable, PublicMutable,\n        },\n        protocol_types::{point::Point, traits::Serialize},\n        utils::comparison::Comparator,\n    };\n    use dep::compressed_string::FieldCompressedString;\n    use std::meta::derive;\n\n    #[derive(Serialize)]\n    #[event]\n    pub struct NFTTransfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        token_id: Field,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        symbol: PublicImmutable<FieldCompressedString, Context>,\n        name: PublicImmutable<FieldCompressedString, Context>,\n        admin: PublicMutable<AztecAddress, Context>,\n        private_nfts: Map<AztecAddress, PrivateSet<NFTNote, Context>, Context>,\n        nft_exists: Map<Field, PublicMutable<bool, Context>, Context>,\n        public_owners: Map<Field, PublicMutable<AztecAddress, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n    }\n\n    #[public]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        storage.admin.write(new_admin);\n    }\n\n    #[public]\n    fn mint(to: AztecAddress, token_id: Field) {\n        assert(token_id != 0, \"zero token ID not supported\");\n        assert(storage.nft_exists.at(token_id).read() == false, \"token already exists\");\n\n        storage.nft_exists.at(token_id).write(true);\n\n        storage.public_owners.at(token_id).write(to);\n    }\n\n    #[private]\n    fn private_mint(to: AztecAddress, token_id: Field) {\n        assert(token_id != 0, \"zero token ID not supported\");\n\n        let nfts = storage.private_nfts;\n        let notes = nfts.at(to).pop_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(notes.len() == 0, \"token already exists\");\n\n        nfts.at(to).insert(&mut NFTNote::new(token_id, to)).emit(\n            encode_and_encrypt_note(&mut context, to, to)\n        );\n    }\n\n    #[public]\n    #[view]\n    fn public_get_name() -> pub FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_name() -> pub FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[public]\n    #[view]\n    fn get_admin() -> Field {\n        storage.admin.read().to_field()\n    }\n\n    #[public]\n    fn transfer_in_public(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let public_owners_storage = storage.public_owners.at(token_id);\n        assert(public_owners_storage.read().eq(from), \"invalid owner\");\n\n        public_owners_storage.write(to);\n    }\n\n    #[private]\n    fn transfer_to_private(to: AztecAddress, token_id: Field) {\n        let from = context.msg_sender();\n\n        let nft = NFT::at(context.this_address());\n\n        // We prepare the private balance increase.\n        let hiding_point_slot = _prepare_private_balance_increase(to, &mut context, storage);\n\n        // At last we finalize the transfer. Usage of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that he can transfer only his own NFTs.\n        nft._finalize_transfer_to_private_unsafe(from, token_id, hiding_point_slot).enqueue(\n            &mut context,\n        );\n    }\n\n    /// Prepares an increase of private balance of `to` (partial note). The increase needs to be finalized by calling\n    /// `finalize_transfer_to_private. Returns a hiding point slot.\n    // docs:start:prepare_private_balance_increase\n    #[private]\n    fn prepare_private_balance_increase(to: AztecAddress) -> Field {\n        _prepare_private_balance_increase(to, &mut context, storage)\n    }\n    \n    /// This function exists separately from `prepare_private_balance_increase` solely as an optimization as it allows\n    /// us to have it inlined in the `transfer_to_private` function which results in one less kernel iteration.\n    ///\n    #[contract_library_method]\n    fn _prepare_private_balance_increase(\n        to: AztecAddress,\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) -> Field {\n        let to_note_slot = storage.private_nfts.at(to).storage_slot;\n\n        // We create a setup payload with unpopulated/zero token id for 'to'\n\n        /// Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        /// so a malicious sender could use non-random values to make the note less private. But they already know\n        /// the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        /// information. We can therefore assume that the sender will cooperate in the random value generation.\n        let note_randomness = unsafe { random() };\n        let note_setup_payload = NFTNote::setup_payload().new(to, note_randomness, to_note_slot);\n\n        let setup_log = note_setup_payload.encrypt_log(context, to, context.msg_sender());\n\n        // Using the x-coordinate as a hiding point slot is safe against someone else interfering with it because\n        // we have a guarantee that the public functions of the transaction are executed right after the private ones\n        // and for this reason the protocol guarantees that nobody can front-run us in consuming the hiding point.\n        // This guarantee would break if `finalize_transfer_to_private` was not called in the same transaction. This\n        // however is not the flow we are currently concerned with. To support the multi-transaction flow we could\n        // introduce a `from` function argument, hash the x-coordinate with it and then repeat the hashing in\n        // `finalize_transfer_to_private`.\n\n        // We can also be sure that the `hiding_point_slot` will not overwrite any other value in the storage because\n        // in our state variables we derive slots using a different hash function from multi scalar multiplication\n        // (MSM).\n        let hiding_point_slot = note_setup_payload.hiding_point.x;\n\n        // We don't need to perform a check that the value overwritten by `_store_point_in_transient_storage_unsafe`\n        // is zero because the slot is the x-coordinate of the hiding point and hence we could only overwrite\n        // the value in the slot with the same value. This makes usage of the `unsafe` method safe.\n        NFT::at(context.this_address())\n            ._store_payload_in_transient_storage_unsafe(\n                hiding_point_slot,\n                note_setup_payload.hiding_point,\n                setup_log,\n            )\n            .enqueue(context);\n\n        hiding_point_slot\n    }\n\n    // TODO(#9375): Having to define the note log length here is very unfortunate as it's basically impossible for\n    // users to derive manually. This will however go away once we have a real transient storage since we will not need\n    // the public call and instead we would do something like `context.transient_storage_write(slot, payload)` and that\n    // will allow us to use generics and hence user will not need to define it explicitly. We cannot use generics here\n    // as it is an entrypoint function.\n    // docs:start:store_payload_in_transient_storage_unsafe\n    #[public]\n    #[internal]\n    fn _store_payload_in_transient_storage_unsafe(\n        slot: Field,\n        point: Point,\n        setup_log: [Field; 9],\n    ) {\n        context.storage_write(slot, point);\n        context.storage_write(slot + aztec::protocol_types::point::POINT_LENGTH as Field, setup_log);\n    }\n\n    /// Finalizes a transfer of NFT with `token_id` from public balance of `from` to a private balance of `to`.\n    /// The transfer must be prepared by calling `prepare_private_balance_increase` first and the resulting\n    /// `hiding_point_slot` must be passed as an argument to this function.\n    // docs:start:finalize_transfer_to_private\n    #[public]\n    fn finalize_transfer_to_private(token_id: Field, hiding_point_slot: Field) {\n        let from = context.msg_sender();\n        _finalize_transfer_to_private(from, token_id, hiding_point_slot, &mut context, storage);\n    }\n\n    #[public]\n    #[internal]\n    fn _finalize_transfer_to_private_unsafe(\n        from: AztecAddress,\n        token_id: Field,\n        hiding_point_slot: Field,\n    ) {\n        _finalize_transfer_to_private(from, token_id, hiding_point_slot, &mut context, storage);\n    }\n\n    #[contract_library_method]\n    fn _finalize_transfer_to_private(\n        from: AztecAddress,\n        token_id: Field,\n        hiding_point_slot: Field,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let public_owners_storage = storage.public_owners.at(token_id);\n        assert(public_owners_storage.read().eq(from), \"invalid NFT owner\");\n\n        // Set the public NFT owner to zero\n        public_owners_storage.write(AztecAddress::zero());\n\n        // Finalize the partial note with the `token_id`\n        let finalization_payload =\n            NFTNote::finalization_payload().new(context, hiding_point_slot, token_id);\n\n        // At last we emit the note hash and the final log\n        finalization_payload.emit();\n    }\n\n    //\n    // Cancel a private authentication witness.\n    // @param inner_hash The inner hash of the authwit to cancel.\n    //\n    #[private]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n\n    #[private]\n    fn transfer_in_private(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let nfts = storage.private_nfts;\n\n        let notes = nfts.at(from).pop_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(notes.len() == 1, \"NFT not found when transferring\");\n\n        let mut new_note = NFTNote::new(token_id, to);\n\n        nfts.at(to).insert(&mut new_note).emit(encode_and_encrypt_note(&mut context, to, from));\n    }\n\n    #[private]\n    fn transfer_to_public(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let notes = storage.private_nfts.at(from).pop_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(notes.len() == 1, \"NFT not found when transferring to public\");\n\n        NFT::at(context.this_address())._finish_transfer_to_public(to, token_id).enqueue(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _finish_transfer_to_public(to: AztecAddress, token_id: Field) {\n        storage.public_owners.at(token_id).write(to);\n    }\n\n    #[public]\n    #[view]\n    // Returns zero address when the token does not have a public owner. Reverts if the token does not exist.\n    fn owner_of(token_id: Field) -> AztecAddress {\n        assert(storage.nft_exists.at(token_id).read(), \"token does not exist\");\n        storage.public_owners.at(token_id).read()\n    }\n\n    /// Returns an array of token IDs owned by `owner` in private and a flag indicating whether a page limit was\n    /// reached. Starts getting the notes from page with index `page_index`. Zero values in the array are placeholder\n    /// values for non-existing notes.\n    // docs:start:get_private_nfts\n    unconstrained fn get_private_nfts(\n        owner: AztecAddress,\n        page_index: u32,\n    ) -> pub ([Field; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.private_nfts.at(owner).view_notes(options.set_offset(offset));\n\n        let mut owned_nft_ids = [0; MAX_NOTES_PER_PAGE];\n        for i in 0..options.limit {\n            if i < notes.len() {\n                owned_nft_ids[i] = notes.get_unchecked(i).token_id;\n            }\n        }\n\n        let page_limit_reached = notes.len() == options.limit;\n        (owned_nft_ids, page_limit_reached)\n    }\n}\n"
    },
    "66": {
      "path": "/Users/hka/tezac/src/contracts/src/types/nft_note.nr",
      "source": "use dep::aztec::{\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::partial_note,\n    note::utils::compute_note_hash_for_nullify,\n    oracle::random::random,\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{\n        address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator, traits::Packable,\n    },\n};\n\n// docs:start:nft_note\n#[partial_note(quote {token_id})]\npub struct NFTNote {\n    // ID of the token\n    token_id: Field,\n    // The owner of the note\n    owner: AztecAddress,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:nft_note\n\nimpl NullifiableNote for NFTNote {\n    // docs:start:compute_nullifier\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n    // docs:end:compute_nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl NFTNote {\n    pub fn new(token_id: Field, owner: AztecAddress) -> Self {\n        /// Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        /// so a malicious sender could use non-random values to make the note less private. But they already know\n        /// the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        /// information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        NFTNote { token_id, owner, randomness, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for NFTNote {\n    fn eq(self, other: Self) -> bool {\n        (self.token_id == other.token_id)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}"
    },
    "69": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/authwit/src/auth.nr",
      "source": "use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\nuse dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\nglobal IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n"
    },
    "7": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "77": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::hash_args;\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\npub struct PrivateCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub gas_opts: GasOpts,\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n"
    },
    "84": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS, PUBLIC_DISPATCH_SELECTOR,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        execution_cache::store(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            /// Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            /// for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        /// Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        /// execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        /// the number of side effects that took place), along with the hash of the return values. We validate these\n        /// by requesting a private kernel iteration in which the return values are constrained to hash\n        /// to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        /// WARNING: This is insecure and should be temporary!\n        /// The oracle hashes the arguments and returns a new args_hash.\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        /// We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        /// b) this is only temporary.\n        let args_hash = unsafe {\n            enqueue_public_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.set_public_teardown_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        /// WARNING: This is insecure and should be temporary!\n        /// The oracle hashes the arguments and returns a new args_hash.\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        /// We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        /// b) this is only temporary.\n        let args_hash = unsafe {\n            set_public_teardown_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "85": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, Packable, Serialize};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call_static(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_opcode(gas, address, args)\n}\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "86": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        /// Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "87": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "89": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypt/aes128.nr",
      "source": "use std::hash::{from_field_unsafe as fr_to_fq_unsafe, sha256};\n\nuse dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::utils::point::point_to_bytes;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n"
    },
    "93": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/note.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    encrypted_logs::encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    oracle::{\n        notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n        random::random,\n    },\n    utils::{bytes::{be_bytes_31_to_fields, get_random_bytes}, point::get_sign_of_point},\n};\nuse dep::protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n};\nuse std::aes128::aes128_encrypt;\n\npub(crate) global HEADER_CIPHERTEXT_SIZE_IN_BYTES: u32 = 48; // contract_address (32) + ciphertext_length (2) + 16 bytes pkcs#7 AES padding.\n\n/*\n * WHY IS THERE LOTS OF CODE DUPLICATION BETWEEN event.nr and note.nr?\n * It's because there are a few more optimisations that can be done for notes,\n * and so the stuff that looks like duplicated code currently, won't be\n * the same for long.\n * To modularise now feels premature, because we might get that modularisation wrong.\n * Much better (imo) to have a flattened templates for log assembly, because it\n * makes it much easier for us all to follow, it serves as a nice example for the\n * community to follow (if they wish to roll their own log layouts), and it gives\n * us more time to spot common patterns across all kinds of log layouts.\n */\n\n/*\n * LOG CONFIGURATION CHOICES:\n *\n * deliver_to: INPUT as recipient: AztecAddress\n * encrypt_with: aes128 CBC (Cipher Block Chaining)\n * shared_secret: ephemeral\n * shared_secret_randomness_extraction_hash: sha256\n * tag: true\n * tag_from: INPUT as sender: AztecAddress\n *\n * Note-specific:\n * derive_note_randomness_from_shared_secret: false\n *\n */\n\n/*\n * LOG LAYOUT CHOICE:\n *\n * Short explanation:\n * log = [tag, epk, header_ct=[[contract_address, ct_len], pkcs7_pad], ct=[[pt], pkcs7_pad], some bytes padding, some fields padding]\n *\n * Long explanation:\n * tag: Field\n * epk: [Field, u8]\n * header_ct: [[u8; 32], [u8; 2], [u8; 16]]\n * ct: [[u8; 2], [u8; x], [u8; y]]\n *\n * More precisely (in pseudocode):\n *\n * log = [\n *     tag: Field,\n *     Epk: Field,\n *\n *     le_bytes_31_to_fields(\n *\n *         log_bytes: [\n *             eph_pk_sign: [u8; 1],\n *\n *             header_ciphertext: aes_encrypt(\n *                 contract_address: [u8; 32],\n *                 ct_length: [u8; 2],\n *\n *                 // the aes128_encrypt fn automatically inserts padding:\n *                 header_pt_aes_padding: [u8; 14], // `16 - (input.len() % 16)`\n\n *             ): [u8; 48],\n *\n *             ciphertext: aes_encrypt(\n *                 final_pt: [\n *                     pt: {\n *                         note_bytes: {\n *                             storage_slot: [u8; 32],\n *                             note_type_id: [u8; 32],\n *                             ...note: [u8; N * 32],\n *                         }: [u8; N * 32 + 64],\n *                     }: [u8; N * 32 + 64],\n\n *                 ]: [u8; N * 32 + 64],\n *\n *                 // the aes128_encrypt fn automatically inserts padding:\n *                 pt_aes_padding: [u8; 16 - ( (|pt_length| + |pt|) % 16 )]\n *\n *             ): [u8; |pt| + |pt_aes_padding|]\n *                [u8; |ct|]\n *\n *             log_bytes_padding_to_mult_31: [u8; 31 * ceil((1 + 48 + |ct|)/31) - (1 + 48 + |ct|)],\n *                                           [u8; p]\n *\n *         ]: [u8; 1 + 48 + |ct| + p]\n *\n *     ): [Field; (1 + 48 + |ct| + p) / 31]\n *\n *     log_fields_padding: [Field; PRIVATE_LOG_SIZE_IN_FIELDS - 2 - (1 + 48 + |ct| + p) / 31],\n *\n * ]: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\n *\n *\n */\n\n/********************************************************/\n// Disgusting arithmetic on generics\n/********************************************************/\n\n// In this section, instead of initialising arrays with very complicated generic\n// arithmetic, such as:\n// let my_arr: [u8; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))] = [0; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))];\n//... we instead do the arithmetic a little bit at a time, so that the computation\n// can be audited and understood. Now, we can't do arithmetic on generics in the body\n// of a function, so we abusing functions in the following way:\n\n// |full_pt| = |pt| = (N * 32) + 64\nfn get_arr_of_size__full_plaintext<let PT: u32>() -> [u8; PT] {\n    [0; PT]\n}\n\n// |pt_aes_padding| = 16 - (|full_pt| % 16)\nfn get_arr_of_size__plaintext_aes_padding<let FULL_PT: u32>(\n    _full_pt: [u8; FULL_PT],\n) -> [u8; 16 - (FULL_PT % 16)] {\n    [0; 16 - (FULL_PT % 16)]\n}\n\n// |ct| = |full_pt| + |pt_aes_padding|\nfn get_arr_of_size__ciphertext<let FULL_PT: u32, let PT_AES_PADDING: u32>(\n    _full_pt: [u8; FULL_PT],\n    _pt_aes_padding: [u8; PT_AES_PADDING],\n) -> [u8; FULL_PT + PT_AES_PADDING] {\n    [0; FULL_PT + PT_AES_PADDING]\n}\n\n// Ok, so we have the following bytes:\n// eph_pk_sign, header_ciphertext, ciphertext:\n// Let lbwop = 1 + 48 + |ct| // aka log bytes without padding\nfn get_arr_of_size__log_bytes_without_padding<let CT: u32>(_ct: [u8; CT]) -> [u8; 1 + 48 + CT] {\n    [0; 1 + 48 + CT]\n}\n\n// Recall:\n//   lbwop := 1 + 48 + |ct| // aka log bytes without padding\n// We now want to pad b to the next multiple of 31, so as to \"fill\" fields.\n// Let p be that padding.\n// p = 31 * ceil(lbwop / 31) - lbwop\n//   = 31 * ((lbwop + 30) // 31) - lbwop\n//     (because ceil(x / y) = (x + y - 1) // y ).\nfn get_arr_of_size__log_bytes_padding<let LBWOP: u32>(\n    _lbwop: [u8; LBWOP],\n) -> [u8; (31 * ((LBWOP + 30) / 31)) - LBWOP] {\n    [0; (31 * ((LBWOP + 30) / 31)) - LBWOP]\n}\n\n// |log_bytes| = 1 + 48 + |ct| + p // aka log bytes (with padding)\n// Recall:\n//   lbwop := 1 + 48 + |ct|\n//   p is the padding\nfn get_arr_of_size__log_bytes<let LBWOP: u32, let P: u32>(\n    _lbwop: [u8; LBWOP],\n    _p: [u8; P],\n) -> [u8; LBWOP + P] {\n    [0; LBWOP + P]\n}\n\n// The return type is pasted from the LSP's expectation, because it was too difficult\n// to match its weird way of doing algebra. It doesn't know all rules of arithmetic.\n// PT is the plaintext length.\npub(crate) fn get_arr_of_size__log_bytes_padding__from_PT<let PT: u32>() -> [u8; ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49))] {\n    let full_pt = get_arr_of_size__full_plaintext::<PT>();\n    let pt_aes_padding = get_arr_of_size__plaintext_aes_padding(full_pt);\n    let ct = get_arr_of_size__ciphertext(full_pt, pt_aes_padding);\n    let lbwop = get_arr_of_size__log_bytes_without_padding(ct);\n    let p = get_arr_of_size__log_bytes_padding(lbwop);\n    p\n}\n\n// The return type is pasted from the LSP's expectation, because it was too difficult\n// to match its weird way of doing algebra. It doesn't know all rules of arithmetic.\npub(crate) fn get_arr_of_size__log_bytes__from_PT<let PT: u32>() -> [u8; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))] {\n    let full_pt = get_arr_of_size__full_plaintext::<PT>();\n    let pt_aes_padding = get_arr_of_size__plaintext_aes_padding(full_pt);\n    let ct = get_arr_of_size__ciphertext(full_pt, pt_aes_padding);\n    let lbwop = get_arr_of_size__log_bytes_without_padding(ct);\n    let p = get_arr_of_size__log_bytes_padding(lbwop);\n    let log_bytes = get_arr_of_size__log_bytes(lbwop, p);\n    log_bytes\n}\n\n/********************************************************/\n// End of disgusting arithmetic on generics\n/********************************************************/\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<Note, let N: u32>(context: PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\n/// This particular log assembly strategy (AES 128) requires the note (and the\n/// note_id and the storage_slot) to be converted into bytes, because the aes function\n/// operates on bytes; not fields.\n/// NB: The extra `+ 64` bytes is for the note_id and the storage_slot of the note:\nfn compute_note_plaintext_for_this_strategy<Note, let N: u32>(note: Note) -> [u8; N * 32 + 64]\nwhere\n    Note: NoteInterface<N>,\n{\n    let packed_note = note.pack_content();\n\n    let note_header = note.get_header();\n    let storage_slot = note_header.storage_slot;\n    let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n\n    // TODO(#10952): The following can be reduced to 7 bits\n    let note_type_id_bytes: [u8; 32] = Note::get_note_type_id().to_be_bytes();\n\n    // We combine all the bytes into plaintext_bytes:\n    let mut plaintext_bytes: [u8; N * 32 + 64] = [0; N * 32 + 64];\n    for i in 0..32 {\n        plaintext_bytes[i] = storage_slot_bytes[i];\n        plaintext_bytes[32 + i] = note_type_id_bytes[i];\n    }\n\n    for i in 0..packed_note.len() {\n        let bytes: [u8; 32] = packed_note[i].to_be_bytes();\n        for j in 0..32 {\n            plaintext_bytes[64 + i * 32 + j] = bytes[j];\n        }\n    }\n\n    plaintext_bytes\n}\n\nfn compute_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteInterface<N>,\n{\n    // *****************************************************************************\n    // Compute the shared secret\n    // *****************************************************************************\n\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n    let ciphertext_shared_secret = derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient); // not to be confused with the tagging shared secret\n\n    // TODO: also use this shared secret for deriving note randomness.\n\n    // *****************************************************************************\n    // Compute the plaintext\n    // *****************************************************************************\n\n    let final_plaintext_bytes = compute_note_plaintext_for_this_strategy(note);\n\n    // *****************************************************************************\n    // Convert the plaintext into whatever format the encryption function expects\n    // *****************************************************************************\n\n    // Already done for this strategy: AES expects bytes.\n\n    // *****************************************************************************\n    // Encrypt the plaintext\n    // *****************************************************************************\n\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    let ciphertext_bytes = aes128_encrypt(final_plaintext_bytes, iv, sym_key);\n\n    // |full_pt| = |pt_length| + |pt|\n    // |pt_aes_padding| = 16 - (|full_pt| % 16)\n    // or... since a % b is the same as a - b * (a // b) (integer division), so:\n    // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n    // |ct| = |full_pt| + |pt_aes_padding|\n    //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n    //      = 16 + 16 * (|full_pt| // 16)\n    //      = 16 * (1 + |full_pt| // 16)\n    assert(ciphertext_bytes.len() == 16 * (1 + ((N * 32) + 64) / 16));\n\n    // *****************************************************************************\n    // Compute the header ciphertext\n    // *****************************************************************************\n\n    let contract_address = context.this_address();\n    let contract_address_bytes = contract_address.to_field().to_be_bytes::<32>();\n\n    let mut header_plaintext: [u8; 32 + 2] = [0; 32 + 2];\n    for i in 0..32 {\n        header_plaintext[i] = contract_address_bytes[i];\n    }\n    let offset = 32;\n    let ciphertext_bytes_length = ciphertext_bytes.len();\n    header_plaintext[offset] = (ciphertext_bytes_length >> 8) as u8;\n    header_plaintext[offset + 1] = ciphertext_bytes_length as u8;\n\n    // TODO: this is insecure and wasteful:\n    // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n    // and again for the proper ciphertext) (at least, I never got the\n    // \"go ahead\" that this would be safe, unfortunately).\n    // \"Wasteful\", because the exact same computation is happening further down.\n    // I'm leaving that 2nd computation where it is, because this 1st computation\n    // will be imminently deleted, when the header logic is deleted.\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n    // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n    // bytes larger than the input in this case.\n    let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n    // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n    assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n    // *****************************************************************************\n    // Prepend / append more bytes of data to the ciphertext, before converting back\n    // to fields.\n    // *****************************************************************************\n\n    let mut log_bytes_padding_to_mult_31 =\n        get_arr_of_size__log_bytes_padding__from_PT::<(N * 32) + 64>();\n    /// Safety: this randomness won't be constrained to be random. It's in the\n    /// interest of the executor of this fn to encrypt with random bytes.\n    log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n    let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<(N * 32) + 64>();\n\n    assert(\n        log_bytes.len() % 31 == 0,\n        \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n    );\n\n    log_bytes[0] = eph_pk_sign_byte;\n    let mut offset = 1;\n    for i in 0..header_ciphertext_bytes.len() {\n        log_bytes[offset + i] = header_ciphertext_bytes[i];\n    }\n    offset += header_ciphertext_bytes.len();\n\n    for i in 0..ciphertext_bytes.len() {\n        log_bytes[offset + i] = ciphertext_bytes[i];\n    }\n    offset += ciphertext_bytes.len();\n\n    for i in 0..log_bytes_padding_to_mult_31.len() {\n        log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n    }\n\n    assert(\n        offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n        \"Something has gone wrong\",\n    );\n\n    // *****************************************************************************\n    // Convert bytes back to fields\n    // *****************************************************************************\n\n    let log_bytes_as_fields = be_bytes_31_to_fields(log_bytes);\n\n    // *****************************************************************************\n    // Prepend / append fields, to create the final log\n    // *****************************************************************************\n\n    // In this strategy, we prepend [tag, eph_pk.x]\n\n    // We assume that the sender wants for the recipient to find the tagged note,\n    // and therefore that they will cooperate and use the correct tag. Usage of a bad\n    // tag will result in the recipient not being able to find the note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut final_log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS] = [0; PRIVATE_LOG_SIZE_IN_FIELDS];\n\n    final_log[0] = tag;\n    final_log[1] = eph_pk.x;\n\n    let mut offset = 2;\n    for i in 0..log_bytes_as_fields.len() {\n        final_log[offset + i] = log_bytes_as_fields[i];\n    }\n    offset += log_bytes_as_fields.len();\n\n    for i in offset..PRIVATE_LOG_SIZE_IN_FIELDS {\n        /// Safety: randomness cannot be constrained.\n        final_log[i] = unsafe { random() };\n    }\n\n    final_log\n}\n\nunconstrained fn compute_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteInterface<N>,\n{\n    compute_log(context, note, recipient, sender)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        assert_note_exists(*context, note);\n\n        let note_hash_counter = note.get_header().note_hash_counter;\n\n        let encrypted_log = compute_log(*context, note, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n// Important note: this function -- although called \"unconstrained\" -- the\n// function is not labelled as `unconstrained`, because we pass a reference to the\n// context.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        assert_note_exists(*context, note);\n\n        let note_hash_counter = note.get_header().note_hash_counter;\n\n        //   Unconstrained logs have both their content and encryption unconstrained - it could occur that the\n        // recipient is unable to decrypt the payload.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        //   It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        let encrypted_log = unsafe { compute_log_unconstrained(*context, note, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\nmod test {\n    use crate::test::{helpers::test_environment::TestEnvironment, mocks::mock_note::MockNote};\n    use dep::protocol_types::address::AztecAddress;\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n        let mut context = env.private();\n\n        // I'm not sure how to initialise an `env` or `context` with a consistent contract address for every run of this test; the value kept changing each time. So I'm going to overwrite it now:\n        context.inputs.call_context.contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        ); // This is an address copied to match the typescript one.\n\n        let storage_slot = 42;\n        let note = MockNote::new(1234)\n            .contract_address(context.this_address())\n            .storage_slot(storage_slot)\n            .build();\n        let contract_address = context.this_address();\n\n        // All the values in this test were copied over from `encrypted_log_payload.test.ts`\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n\n        let plaintext = super::compute_note_plaintext_for_this_strategy(note);\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let sender = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns([69420, 1337]);\n\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let payload = super::compute_log(context, note, recipient, sender);\n\n        // The following value was generated by `encrypted_log_payload.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let private_log_payload_from_typescript = [\n            0x0e9cffc3ddd746affb02410d8f0a823e89939785bcc8e88ee4f3cae05e737c36,\n            0x0d460c0e434d846ec1ea286e4090eb56376ff27bddc1aacae1d856549f701fa7,\n            0x00010577790aeabcc2d81ec8d0c99e7f5d2bf2f1452025dc777a178404f851d9,\n            0x003de81cde78411f27a921e16ebbfba71a5570d3f62f1134c90daced33663ba0,\n            0x00856cb19c7d563da183a40a6f8bd4988d1696ad6bf0c717c8fb8f6294bd0366,\n            0x001ed04e4f77a111c7090fcd34c61cfae744e8589a42defba4d0d927dd4679fe,\n            0x00ec09b49d8d4cf548ea62d44c8839b2fd14664e9d1439b199a8d5166e362348,\n            0x004a69de2d410e01010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n        ];\n\n        assert_eq(payload, private_log_payload_from_typescript);\n    }\n}\n"
    },
    "94": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.73.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/partial_note.nr",
      "source": "// THIS FILE WILL GO AWAY WHEN WE REFACTOR PARTIAL NOTES, SO I DON'T FEEL TOO\n// GUILTY ABOUT THE OBVIOUS CODE DUPLICATION VS note.nr & event.nr.\n\nuse crate::{\n    encrypted_logs::{\n        encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n        log_assembly_strategies::default_aes128::note::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES,\n        },\n    },\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    utils::{bytes::{be_bytes_31_to_fields, get_random_bytes}, point::get_sign_of_point},\n};\nuse dep::protocol_types::{address::{aztec_address::ToField, AztecAddress}, hash::poseidon2_hash};\nuse std::aes128::aes128_encrypt;\n\npub fn compute_partial_public_log_payload<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    plaintext: [u8; N],\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; M] {\n    // *****************************************************************************\n    // Compute the shared secret\n    // *****************************************************************************\n\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n    let ciphertext_shared_secret = derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient); // not to be confused with the tagging shared secret\n\n    // TODO: also use this shared secret for deriving note randomness.\n\n    // *****************************************************************************\n    // Prepend/append extra bytes\n    // *****************************************************************************\n\n    // \"Proper\" meaning the main meaty stuff that we care about.\n    let proper_plaintext: [u8; N] = plaintext;\n    let final_plaintext = proper_plaintext;\n\n    // *****************************************************************************\n    // Convert the plaintext into whatever format the encryption function expects\n    // *****************************************************************************\n\n    // Already done for this strategy: AES expects bytes.\n\n    // *****************************************************************************\n    // Encrypt\n    // *****************************************************************************\n\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    let ciphertext_bytes = aes128_encrypt(final_plaintext, iv, sym_key);\n\n    assert(ciphertext_bytes.len() == 16 * (1 + (2 + N) / 16));\n\n    // *****************************************************************************\n    // Compute the header ciphertext\n    // *****************************************************************************\n\n    let contract_address_bytes = contract_address.to_field().to_be_bytes::<32>();\n\n    let mut header_plaintext: [u8; 32 + 2] = [0; 32 + 2];\n    for i in 0..32 {\n        header_plaintext[i] = contract_address_bytes[i];\n    }\n    let offset = contract_address_bytes.len();\n\n    let ciphertext_bytes_length = ciphertext_bytes.len();\n    header_plaintext[offset] = (ciphertext_bytes_length >> 8) as u8;\n    header_plaintext[offset + 1] = ciphertext_bytes_length as u8;\n\n    // TODO: this is insecure and wasteful:\n    // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n    // and again for the proper ciphertext) (at least, I never got the\n    // \"go ahead\" that this would be safe, unfortunately).\n    // \"Wasteful\", because the exact same computation is happening further down.\n    // I'm leaving that 2nd computation where it is, because this 1st computation\n    // will be imminently deleted, when the header logic is deleted.\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n    // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n    // bytes larger than the input in this case.\n    let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n    // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n    assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n    // *****************************************************************************\n    // Prepend / append more bytes of data to the ciphertext, before converting back\n    // to fields.\n    // *****************************************************************************\n\n    let mut log_bytes_padding_to_mult_31 = get_arr_of_size__log_bytes_padding__from_PT::<2 + N>();\n    log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n    let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<2 + N>();\n\n    log_bytes[0] = eph_pk_sign_byte;\n    let mut offset = 1;\n    for i in 0..header_ciphertext_bytes.len() {\n        log_bytes[offset + i] = header_ciphertext_bytes[i];\n    }\n    offset += header_ciphertext_bytes.len();\n\n    for i in 0..ciphertext_bytes.len() {\n        log_bytes[offset + i] = ciphertext_bytes[i];\n    }\n    offset += ciphertext_bytes.len();\n\n    for i in 0..log_bytes_padding_to_mult_31.len() {\n        log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n    }\n\n    // *****************************************************************************\n    // Convert bytes back to fields\n    // *****************************************************************************\n\n    let log_bytes_as_fields = be_bytes_31_to_fields(log_bytes);\n\n    // *****************************************************************************\n    // Prepend / append fields, to create the final log\n    // *****************************************************************************\n\n    // We don't add any extra random padding.\n    // Whilst we do this in note.nr, we won't do it for this partial_note log, because it's going to get stored in public, and so:\n    // - The nature of the tx is going to be leaked.\n    // - We therefore don't care if it's padded to obscure the length of the actual ciphertext.\n    // Note: partial logs are going to be greatly refactored, soon.\n\n    // We assume that the sender wants for the recipient to find the tagged note, and therefore that they will cooperate\n    // and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the note\n    // automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    // Silo the tag with contract address.\n    // This is done by the kernel circuit to the private logs, but since the partial log will be finalized and emitted\n    // in public as unencrypted log, its tag is not siloed at the moment.\n    // To avoid querying logs using two types of tags, we silo the tag manually here.\n    // TODO(#10273) This should be done by the AVM when it's processing the raw logs instead of their hashes.\n    let siloed_tag = poseidon2_hash([contract_address.to_field(), tag]);\n\n    // Temporary hack so that the partial public log remains the same format.\n    // It should return field array and make the tag the first field as compute_private_log_payload does.\n\n    let mut final_log: [Field; M] = [0; M];\n\n    final_log[0] = siloed_tag;\n    final_log[1] = eph_pk.x;\n\n    let mut offset = 2;\n    for i in 0..log_bytes_as_fields.len() {\n        final_log[offset + i] = log_bytes_as_fields[i];\n    }\n\n    final_log\n}\n"
    }
  }
}
