{"noir_version":"1.0.0-beta.2+3278f71a05090dbd","name":"NFT","functions":[{"name":"set_admin","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"new_admin","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"8778930052620580050":{"error_kind":"string","string":"caller is not an admin"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/71V30vDMBDe1g6t21D8ASK+KAg+prZd59sEfVXQB5+z5SKF6aSt4mP/dA1ebEjTraOtB+MuzeX7vrvL2m4nty56W1t3DDlT9KSeuQ1iEaPQVSZzLtE76HvKvtVgsY7G2yT+hPiBY6ivQf2eg5ht9kditoBPthDnNsvx9VqEjXCt3iF5ZvvnN+zk8QhjRzvTxmxb7D05MOiXXAOs9RTXov49jOnn68P7fMnghrEYkkTtma53lW2CaW2Aeaxj3n8sFhGPIL77ipK0gG16+cm4pz3rlehSn6tmmqGwKXpSz9y+VsMhejG78xINDfIHQ4Xzr99P6TKmL/AIlFWdY9U7JPh2C3zwxiCuMtYyEzl9jPsGqba2J3NP0It2XygSjwoSf1vyHEcp6OTr7pjpLqom/qvyO2Bn+bmm3hXhhBCpwcryRlgGLbayr+af4XpHqUt6u4ZOHlKXe5TTgDLmz+m+hq/2bdAC/wxc8DjnHlCfj/m/84fXLCDjAGYQeqHPrtbxfwPTjUtB/QkAAA==","debug_symbols":"5VXBbsIwDP2XnHuIY8dO+JVpmgoUVKkqqJRJE+Lfl0w0lK4iEoJddqmS6jnvOX6xT2pdLY/bj7rd7A5q8XZSzW5V9vWuDbvTuVDLrm6aevsx/q10/AD94A/7so3bQ192vVoAsylU1a7jUkw4YVM3lVpwWP4Ga20HsDY2gcHQDJqI5IImspzQHmfADtPRDg2Mwe+FAvsE7S6Bg/g/1M5P0E6Q7p1z9w6WE5pB7mv36AewJ6SpdnmqdtC32iODezmDfzWD0XMMxsLAYCzqDAOgTwx8LQPIXIUFHV7QQpruV1ggGV/MrTvndGjEa6rME0MY+D+pmvlUkVOqlu6nSmwG34Slz3URMamLOJmqwezFWxmriTH0QIx9IIbnYzwNMQyYMQWaVAsknzOFS0UQZ13GFJz8Jux1zhRA1zEBDm/KcA67z7Kry2VTXebt5tiuRuO3/9pXk0m873aran3sqjiTR+M4Ng3jCsTYo+KzQinQB47A8w0=","brillig_names":["set_admin"]},{"name":"private_get_symbol","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"1186437190978851533":{"error_kind":"string","string":"Non-zero hint for zero hash"},"1589673740894288059":{"error_kind":"string","string":"Hint values do not match hash"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18192277837884173995":{"error_kind":"string","string":"Function private_get_symbol can only be called statically"}}},"bytecode":"","debug_symbols":"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","brillig_names":["storage_read","get_public_data_witness","field_less_than","decompose_hint","lte_hint","store_in_execution_cache_oracle_wrapper","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"sync_notes","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7WTyw7CIBBFqcUo0sTEx39MU0y7dOHafyCtLHVRN+766dZkJkyI0QVwEzJMgMNcHoXwKjBKESGCHDEqjAs2Xs7tjDnEqVbBvin5HRijvvhLWH+jkFnk4QPxM50/rJBzmTyfe6F913PTrF8J/z5y+af7y+l//8OzRq9bzCvh/8P4uvfXx/M2ij/SbJGc0ptoOwAqvkT+EvmhJBvn8w+Yb4Svj6KMqNO1tnaNdfZkh8H0dhfwP+KH/QbzqHp4zgQAAA==","debug_symbols":"dY9dCoMwEITvss8+ZG39qVeRIlFXCYREYlIowbs3aaVNW3wZdpZvhx0PI/Vu7oSa9ApN60HqgVuhVXB+y6A3Qkoxd+kaWBQ8Pfl14Sra1XJjoSnOGZAaoSnzcD0JSa/xD0TG6npnkSEWbxwPeKyqD38pv/jrFuyNG8F7Sfvrk1ND0sTeF/optRg90OgMxXpJs6AtFlnOQmyIfgA=","brillig_names":["sync_notes"]},{"name":"transfer_to_private","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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a5ui7QRtJ2o7SdvJ2k7Rdqq207Sdru0MbWdqO0vb2drO0XautvO0na/tAm0XartI28XaLtF2qbbLtF2u7QptV2q7StvV2q7Rdq2267Rdr+0GbTdqu0nbzdpu0Xarttu03a7tDm13artL293a7tF2r7b7tN2v7QFtD2p7SNvD2h7R9qi2x7Q9ru0JbU9qe0rb09qe0fastue0Pa/tBW0vantJ28vaXtH2qrbXtL2u7Q1tb2p7S9vb2t7R9q6297S9r+0DbR9q+0jbx9o+0fapts+0fa7tC21favtK29fa/qPtG23favtO2/faftD2o7aftP2s7Rdtv2r7Tdvv2v7Q9qe2v7TBIOuhrae2Rm1N2pq1tWjrpa23tj7aWrW1aeurrV1bh7Z+2vprm0nbzNpm0Tarttm0za5tDm1zaptL29za5tE2r7b5tM2vbQFtC2oboG0hbQtrW0TbotoW07a4tiW0LaltKW1La1tG27LaltO2vDZHm9Lmaktp87SltWW0+doCbaG2FbQN1LaitpW0raxtkLbB2lbRtqq2IdpW07a6tjW0DdW2prZh2tbSNlzbCG0jta2tbZS2dbStq209betr20Dbhto20raxtk20baptM22ba9tC25battK2tbZttGW1Rdpy2mJteW0Fbdtq207b9tp20Lajtp207axtF227attN2+7a9tC2p7a9tO2tbR9t+2rbT9v+2g7QNlrbgdoO0nawtkO0jdE2Vtuh2g7Tdri2cdqO0DZe25HaJmg7SttEbUdrO0bbsdomaTtO22Rtx2ubou0EbSdqO0nbydpO0XaqttO0na7tDG1najtL29naztF2rrbztJ2v7QJtF2q7SNvF2i7Rdqm2y7Rdru0KbVdqu0rb1dqu0Xattuu0Xa/tBm03artJ283abtF2q7bbtN2u7Q5td2q7S9vd2u7Rdq+2+7Tdr+0BbQ9qe0jbw9oe0faotse0Pa7tCW1PantK29PantH2rLbntD2v7QVtL2p7SdvL2l7R9qq217S9ru0NbW9qe0vb29re0fautve0va/tA20favtI28faPtH2qbbPtH2u7QttX2r7StvX2v6j7Rtt32r7Ttv32n7Q9qO2n7T9rO0Xbb9q+03b79r+0Pantr+0QULRQ1tPbY3amrQ1a2vR1ktbb219tLVqa9PWV1u7tg5t/bT11zaTtpm1zaJt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","debug_symbols":"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","brillig_names":["random","decompose_hint","field_less_than","lte_hint","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","store_in_execution_cache_oracle_wrapper","enqueue_public_function_call_internal","store_in_execution_cache_oracle_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"cancel_authwit","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7ZfdjoIwEIXfpddcdKbTaeurbDYGFQ0JAYO4ycb47ltcy0+scuGu2U2468CXM6entMBJbLLVcbfMy211EIu3kyiqddrkVemrkwB1uXbYp2VbHpq0bsQCmDERWblphwbPidjmRSYW7Ic3MCKbK4xoXQeDNDHakb3SSiJM0MCkdOeEqFdHCzF1QA5egHRPOxtTV6yCOIEc0e+JAJqzuZuNnrO5mw3P2dzNxjydDUkXYAK0Hezw0sD+dgP3dANQkgKs1GB1kWK0BBMWwI+dGhqKPTrWue7ZcTf+Uf5z/xD1D2ggNAGFU/tLggzzRenbdLjhCG7ZhRlYo9TEhrHUbRhLhiZopQNMONguMRt+il0yIxsxGEyfunF6ApadMki2Q7iNHOfIXx25miN/deQUj1wp7CPX9DhyBi2vNIPVj486sL0fH35/jvL3Sad/whDaQDM69+TZy3/LkS9WdV4U+W45+quRl1+b6Hqik+FbCZ2W48zPvvxI6zxdFVkr1N49luug68vmcx/uhM77ulpnm2OdtR4G7dv3LHCC4GW99Bc=","brillig_names":["notify_created_nullifier_oracle_wrapper"]},{"name":"is_minter","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[{"name":"minter","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"8359297168692325491":{"error_kind":"string","string":"Function is_minter can only be called statically"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7Z3dbhoxEIXfhetc2J7xX16lqqL80AgJQUSSSlXUd+9umjUEb1l5x41APjcRhJn17Oddc44B+23xsLx7fbxZbX5snxfX394W6+397ctqu+mevf2+WtztVuv16vHm8N8L1f/R7j3++el20z99frndvSyutXPmarHcPPQPvemO8GO1Xi6uXfcwD1bKDsHK2BSsDY9EM7P/iGa2LkVHGgkOlA4dyOjD4O9XC+0r1B5ScFf8F9YeKtTOOnF3U9y1dSnaaX+69khxCI5MfFx7rFq7Vp9r71ow6r+3oP97C0bcgotquN5cNDTRZyodOapgj/rMUGE1fQ7PyLEzctyMnNF7nyKFjxyKBzfoP/rPUeo/vafbNTwWHdwQHEOKJa3eqwlnVU08p2pInVU1+qyqMWdVDZ1VNXxW1dizqsadVTVfPhbboRpzoNn6akZkGJshOLDfSxkT9Eg0pSOzUfvYsSKMjjxUYbQ5HWxTEdb4w9AeXwA+Cb4IfAJ8rIBPgk8DnwSfAT4JPgI+CT4GPgk+C3wSfA74JPjgOkT44DpE+OA6JvE5NeBz+gifhesQ4YPrEOGD65jEl2Ld59AeH1yHCB8DnwQfXIcIH1yHCB9chwgfXIcIH1yHBJ+D6xDhg+sQ4YPrEOGD6xDhY+CT4IPrEOGD68iZwErkTOAPciYQ/RkTDyWfM4E8z5lAc+dMIKRzJgwmGRNI3pwJdGzOBDo2ZwIdmzOBjs2YBOjYnAl0bM4EOjZnAh2bM2EwyZhAx2ZMYpvvO4b2TNgeM2lzPPE6DlV4otnBPcA2B58SgN15pPNz4fh7qbHNkaoiwDbteUWAbXr5igDbNP5FAL0fDqx9zN6F25wlqAdQqza1XU2Cbc5A1CTY5nxFTYJwI1KCDIJCgvAjUoIwJFKCcCRSgrAkUoLwJEKCGp5EShCeREoQnkRKEJ5ESpBBcIpg1Gnd72hygvAkUoLwJFKCFTyJDkOwPvwo+h8EDXOKtnz60N4Nmwb4sA/Vnv/WHi649ni5tRt1wbVPa08Xp2qnmEYM97mJkXIoDOOLZ/Vp/5GRYJ32cPHm80YrY3Uo2g9dyrnD8PdzNV9+rn5/rjqeLt8mLk7tBzwy/m/tdMG18wXX3uYMC6lUBWk+fpM0bU6anIZCbc6DTEBpc2pjAkqbsxUTUNqcgJiAwoCSQ2lzmsBEk6AoO2FyVXLE3amGjGCb0wQ1Cbb50WURQX3gxqzOCLYprGsSbFOFVyTY6AZJNQm2qe/LCLq0h3I3y5cRZBCcIshqWPC9e5hfg9CDUoLQg1KC0INSgtCDkwStSednrcoIQg8KCTa6dU1NgtCDUoJtTg7XJNjmTHJNggyCQoLwJFKC8CRSgvAkUoLwJFKC8CTTBH36QqqNx6s56UY3tqlJEJ5EShCeREoQnkRKkEFQSBCeREoQnkRKEIp6kiDtf6BElH1O0uiWMRUJNrrBTE2CUNRSglDUUoJQ1FKCDIJCglDUUoJQ1FKCmOWXEoQnkRKEJxESbHSzoDKC7BNBl33S1OjWQjUJwpNICcKTSAkyCAoJwpNICcKTSAnCkwh/DRHgSaQE4UmEBFvdSK4iQShqdbzCohlfq9en9b08U5YyqmkiD81Em7fiylN8eUooTxkdl04vN2HGVxicStJzksycJJqTxHOS7JwkNyfJz0kKc5LmXBE054qgOVcEzbkiaM4VQXOuiPG1bE4OJ+OLt0Q1rKkZTZ5SfqOPL41wshU25SlUnsLlKeUDMJcPwFw+APOMfonFKeO/Cz2dostTxnvfDldy9CZLofIULk+x5SmuPMWXp4TylKnez1Ncee+78t4f/4716RQqT+HylPJ735Xf+6783nfl974rv/d9ee/78t735b3vy3vfF/b+7+7Zz9vd6vZuvXzuMvoXXzf3L6vt5uPpy6+n4ZW73Wq9Xj3ePO2298uH193yZr29719bqI8/30zgq84RfO/33eme6mivjFL9055Yv+ofqdC12rX8Bw==","brillig_names":["is_minter"]},{"name":"list","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"price","type":{"kind":"struct","path":"std::uint128::U128","fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}]},"visibility":"private"},{"name":"buyer","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6869395374906889440":{"error_kind":"string","string":"Mismatch note header contract address."},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"11788337977676430955":{"error_kind":"string","string":"invalid price"},"11873158822563704285":{"error_kind":"string","string":"Mismatch return note field."},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"13903306258902764411":{"error_kind":"string","string":"invalid buyer"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"15362956144542784742":{"error_kind":"string","string":"NFT not found when listing"},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17745774081880264059":{"error_kind":"string","string":"buyer equals from"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["get_notes_internal","get_collapse_hints","field_less_than","decompose_hint","lte_hint","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"mint","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6515419266667913063":{"error_kind":"string","string":"zero token ID not supported"},"9296579303138805202":{"error_kind":"string","string":"token already exists"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14466155340988305413":{"error_kind":"string","string":"caller is not a minter"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["mint"]},{"name":"get_private_nfts","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"array","length":10,"type":{"kind":"field"}},{"kind":"boolean"}]},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","brillig_names":["get_private_nfts"]},{"name":"purchase","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1186437190978851533":{"error_kind":"string","string":"Non-zero hint for zero hash"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"1589673740894288059":{"error_kind":"string","string":"Hint values do not match hash"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3912224518872547481":{"error_kind":"string","string":"Buyer listing not found when cancelling listing"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5931970377287631417":{"error_kind":"string","string":"Buyer listing not found when purchasing"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6869395374906889440":{"error_kind":"string","string":"Mismatch note header contract address."},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"11873158822563704285":{"error_kind":"string","string":"Mismatch return note field."},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"13049798260537067718":{"error_kind":"string","string":"Seller listing not found when purchasing"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954044801249163952":{"error_kind":"string","string":"NFT not found when transferring"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["get_notes_internal","get_collapse_hints","field_less_than","decompose_hint","lte_hint","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","storage_read","get_public_data_witness","store_in_execution_cache_oracle_wrapper","call_private_function_internal","get_notes_internal","get_collapse_hints","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"_finish_transfer_to_public","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7176719043052132708":{"error_kind":"string","string":"Function _finish_transfer_to_public can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VazYsjRRSvnqRn8jH52JndRRHx4k3Q7nxObhHdqx48CIKH7HRHBlZXZkZRRIhXwaN3L/4ZghcFwYvgP+HFozfBrbXe5Jdfv+4kk67oPgjV3e/V+36vqqsTmH8hcD8LVTcemCwIzdSN0W4Ql8gr8qln4EnPFScHJh8E13MXdZpvH1dKNLhOcsvkfxYNRnXFvhL179eBpwf+PeFf9cM/OnJ83lys8jckt2VWixfnCA5z7IHD1Rxerjvuuk78fMQddSrbb6eK/gdgm4U3Fl5k95vOlz86fsdPfl13Pfv0w7c/Pn+cpK8nyWV6dYXx4jwqgm14hlvwfI55vvXJo0cX84v08sFnF1fXGd6HCm+5PsixjfXSFhgLWm1ZmLox2g3ikGy470Ybu5/BJx32yTvpR0l6uYubNw3d4YY8hUbaRajodEg4oX3BjdbsX9x1neZbmLox2g0mLdJH9EO5R/C8zNIMSJ4xq+2U/dgw2TiUubwGJE/0Yf9IiYjvaoquXQWH8UccyqkpcjRe2D55OZmW44+oZbJ5t6fcGNw2N0I/+hTmBvrntrmBS29ZuVEmr47JxpvzWfPNUYEcnC90dWXe1I3RdtDjBxwTkY1ycYtdYv4MN81nkd8w2Vj4yOc66ZOXG+K7hqJrV8FxDjYUOQ1FzrPES3J0X7XRUuYFOaPI4WcsR9O5o+hQI3tCxZ6wQI62DhatL7e1R9O5qO63leO5T0Sav+pkR6NEO5pEMy3ZDqyXJsk+9uPDm2OAlh/+cQt4cozsPvE9eG5/bXcfmmWt4NxjwCP9F8DzfXfdUeY3SJ7sVfkYhOPAr1wP3eg5PtEJ8GUfeD4iOm+RPATBYd5w720DjvtYB3Dce7qAw3gxVOgefWF5/gp8mU5AyxFeqw4VOwR3rNihrRcVwmnvt1o/OyYc+gNzFu+NKX4XK1qXkGedbK0ofmBdQoWW5cp9NccWrjmh/9yN1j+nLojWP/fc8+Uxx/Xjy9kH6buXF9epIeCznQrdBwodQtNkm8+XbrTO/sFdS3F2SNbU3Ue7QU907YKztIbZATzSf+VG68z7war9MseYzRKpq9Cz3cYsEwkbQ5dwWmPomOLGYH933H1V4a0lldB/7UaJ1wnpPXX30Y6gNfITsqELNrAfLci5L8fyezfaGH1jVn2G/uTGhv7hxnYHcBwH1LtB/rtrvPivLz6SYsd8R13vmlUfCf23bsR8l4WhsljOx+8IFqoLL/YMrB7Pgx728tQsIQS5aJcxS7uRnmvynkKPsRGfdYme6xPvkRf6vEX04sPDHHrc5CH9d260vnktWNUPF9NT0h0X0y7haopcbTE9AZ3308PjiDc8CC3Fb7zBwjrkDdYp4HiDhXmw7QZLfLHtBquMPtQgef+XupU4WOC6xRqtKPRct0V1HpjsQRLGkvMba+aEcJvWTItwmC8SG6yZop5RUfhqL4ht4CsviD7jOj6LIslZyanQZPMf5YdE/5O753qyY3UHPefjWTzvz+az4SxJBucz3kdYkBxqepD/MI3T/nw+76ezwXw037v8UX9ylvTnvThJx8PJaLBOPn6/lv7t6yOY5w87mY9KKMva9Bs8RxzujfBFjfePQv8H8PzdXWsHmwHh0K9FHz94/4/9Rfbrng8LB0UHgtoB33/xQUPkN0y21/r4oNEkfTCmFvgA1NMh10D0aSn6aB8Y7LrTNtmYoX7Cq+hAA/M372BwnW+0dZEPdDDGIeEOFB0Epx1KCQ7tknpqmuL6C4he6xM8F+9NDj3/QUP4/+lGi7/jnKD1AO4r2AO4r3BNIA5zgfuKpwPuAe938nzaIh8J/V9u1M5htHrAj5C8d9T2XGh30eFlm/zV9uOvm/f4zhp/5b0j/l3gL81+7QMt64D07QJ/oS9xLsvO60X7ysV1vuVcvKF3/lx3RlIHeyxUF17sGWrvWvgxIgS5efWC9JvEX6uXLtFjvLUezx8CUC4f6Gsfp7QeL70Ne+mm+8Oy9+RRLzkfpb0nr03jUdybJPt+J0jPJkk0maezOI57SZSuk39zHrVY4jGfLRy5ezl7ZXrhFxL9i46B9fdLVDOhIs/SvVpAF+SMT3koz6qL1Wf1RZa+ssjSi+zGIquj4JqAw1qzcOzu0V/IS/QIif4V2AdYqMEcmd9V5NdI/oreyjOsOeZVUZ4JvY3Py26S5C3aXvY+/KlM4o/PWDfJHR91NRjOxuezcRxPBnE6iIfr6uofQDaErX0zAAA=","debug_symbols":"7Z3tbqs4EIbvJb/7wx/jr97K0VGVtjlVpCip0nSlVXXufaFbTAouxIzPbiq/f6IQZvDw2Jh5HbDfVo+b+9enu+3+1+FldfvjbbU7PKxP28O+2Xr7fbO6P253u+3T3fnPK9F+SPtu//K83rebL6f18bS6ldaqm9Vm/9h+dao5wq/tbrO6tc3XsbEQpjMWykRjqShhTUTuw5rI2GgddMLY63hor5U8N/55s5KuQOw+GjfB/4ex+wKxk4zc7Rx3aWy0ttJNxx506IwDaRrGHorGLsXn2JsSlPjjJcg/XoJil0BWdSU0X8Nce3MqtjfvBnWmND+acq1fUWY0rY9Z4GMX+KR7FR1crG0dgplrG1bHtiF13zasTVl72xkHH221FO/x+CuLJ1xXPFpcWTzyyuJRVxaPvrJ46MriMVcWj72yeP6H/tl08aizHLGNJ3HjI9UZe3J96qS8TFjreGRSordNBaFkoC4KJdW0sYlBGOXOTVuAHgB5AAMAsgCSAEAeQAmAPIAKAHkANQDyABIA8gAaAOQBtADIAwglwgQIJcIECCVyAUArOoBWDgAaKBEmQCgRJkAokQsARlv72bQFCCXCBEgAyAMIJcIECCXCBAglwgQIJcIECCXCA2ihRJgAoUSYAKFEmAChRJgACQB5AKFEmAChRIYAWyqQFykq0AwpKhACCSoO2X2KClL2FBXk4SkqSK5TVAhUElSQBqeoILdNUUFum6KC3DZFBbltgopHbpuigtw2RQW5bYoKctsUFQKVBBXktgkqodZ7kNI9FTJDKrX2K06GLgqn9WLjFmGtnVAOwuY84vlZP3zCNdTaYxVEWKt0L4iwVp1fEGGtgwJZCJ3rDixdGN2Rax1BKIdQilpzvZIMax2dKMmw1rGMkgyhUPgMCQzZDKFR+AwhUvgMoVL4DCFT+AyhU9gMJXQKnyF0Cp8hdAqfIXQKnyGB4TzDIOPc5EGNGUKn8BlCp/AZFtEp0vvO+vzP6y8YKqJobWj60M52SxU435tKR/9G77919OE7R6/Et45+Ph8lIeVM9FrFvkNT+FRIIiCvbYzI9NOhJ5fdcFZ317izQUwbNx0X9avfSK/Pzd/Ptta7jRYxCi1p2PmpWm8gM1hqHbuawVLrcNQMllpHmKax6FoHjWaw1DoONIOl1qEdFVTEIsyMlBFR9zSn6kcMax3aKcmQwHCeYdPU4vkZOWJYa7JdkmGtmXlJhrWm8SUZ1prz5zG0cd3gZjxnyLDaNY6yGJIQZwNPI4bID/kMkR/yGRIYshkiP7yAoemH1o0RI4bID/kMkR/yGSI/5DOsdQC5IMNqlz8qyRA6hc8QOoXPEDqFz5DAkM0QOoXPEDrlEoYuPr1kghoxhE7hM4RO4TOETmEzrHZxpJIMoVP4DKFT+AyhU/gMkWNfwFD3r7BoPfo/pdqlfkoyRI7NZ4gcm88QOTabYbVLFJVkiBybzxA5Np8hcmw+QwJDNkPoFD5D6BQ+Q+iUSxiSizTs6D+papeEKskQOoXNsNrlpkoyhE7hM4RO4TOETuEzJDDkvltR7aJaJRlCp/AZQqfwGSLHHjJssKj0jM6uny6MhkufqfTEsSHOGRbMqJT0PKnTLpTvYvJd0r3T5LQW6otZDmec/BKnsMDpi6n0ZpzkEie1xEkvcaIlTmaJ05IWoZa0CLWkRaglLUIvaRF6SYtIz5oz2Z2kJ4kJopubMaixS/6Fnp56YbqUkO1CIt9F5rvkd8CU3wFTfgdM+fWSfvV22sXlu/h8l3Ttm64lBzd8/EqlX5ubdpH5LirfRee7UL6LyXeZq/2ES37tm/zaTz+dPemSfhh52kXmu+Rf+zb/2rf5177Nv/Zt/rVv82vf5te+za99l1/7LrP2fzdbf62P2/X9bvPSeLQ7X/cPp+1h/7F5+vu523N/3O5226e75+PhYfP4etzc7Q4P7b6V+Pj40UiLGy3Uz3Zdl2ZTNjpBBtdutoFpoZu9pim1Kfkf","brillig_names":["_finish_transfer_to_public"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"parameters":[{"name":"admin","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"name","type":{"kind":"string","length":31},"visibility":"private"},{"name":"symbol","type":{"kind":"string","length":31},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"364657447181031001":{"error_kind":"string","string":"invalid admin"},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7646447728501516020":{"error_kind":"string","string":"invalid token"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"]},{"name":"_finalize_transfer_to_private_unsafe","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"hiding_point_slot","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5527120278801020911":{"error_kind":"string","string":"invalid NFT owner"},"10536464181608181124":{"error_kind":"string","string":"transfer not prepared"},"11859452850824495745":{"error_kind":"fmtstring","length":60,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17028138060491915576":{"error_kind":"string","string":"Function _finalize_transfer_to_private_unsafe can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["_finalize_transfer_to_private_unsafe"]},{"name":"private_get_name","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"1186437190978851533":{"error_kind":"string","string":"Non-zero hint for zero hash"},"1589673740894288059":{"error_kind":"string","string":"Hint values do not match hash"},"2111772463301017956":{"error_kind":"string","string":"Function private_get_name can only be called statically"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","brillig_names":["storage_read","get_public_data_witness","field_less_than","decompose_hint","lte_hint","store_in_execution_cache_oracle_wrapper","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"_store_payload_in_transient_storage_unsafe","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"slot","type":{"kind":"field"},"visibility":"private"},{"name":"point","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"setup_log","type":{"kind":"array","length":9,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16958085610837407363":{"error_kind":"string","string":"Function _store_payload_in_transient_storage_unsafe can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1az4sjRRSuTncn6U6WBEXwIHhTvHU2MzsJeMii694UUfDcu90tA6srmXFRUGjw5sGjd0/evCgIggfx4k3Qf2i3svUmX768zGR2uoZt2IJQ1f1ev/e9H/U7gXlahk9+gWtHro7NdhGehauzq5VJg7IynziDluDstARn2CBOiy0xfvM08uDXpjHGLcDYbQHGXgsw9luAMWkBxrQFGActwDj0gHFVbkDbgrYTnJ087IBsBzw7oNgOazuETTgbUOuwodldxPj/XS2TRwfoDU5Qk4T0Nil/lh1OtMmvQfzTxMns+pFfiPyeH/mZyH23XstHW4QeuvpuvfblXfjGlhuuHaxZzuQKrQO0O0QLgfYe0SKzrVd8E5vmfTPLDmaefT8X27pgm/hOdPf96M4D0mfM2v9IE/2p8Zrnk4D0CR72j+SPjH1hvcYTEy2qt+0QWgw0ia/leQ34OLe6wPcmtN9ybYmZz7EM+1DTY8HLCn7UZUuvNmdF8iWEd+JX8XMf+YmWAC2qN/Wk7jkCPShLcMTE/4Z7Hrm6C9/I92NFf5f0b+BW3rFfEoU/UfhtDr3u2nYulvnpnXotr8n5yeqwOfqLkyd53VtDM8GOGm3Bd2KLNkaZ5rBnY7M9/vavwY4225A0b8NNzQbRY9eS0p/yR5998MX9h0V5uyiW5clJQHb1FPxauYzM5BIyX2WZ73/54MFxdVwu73x1fHK6JTtVZEu7Y3TbGBfyYdHWFrYsXJ1drawOPNCGt11tc+838MmIffJR+XlRLp+n0BkyJTa705HNvu1qa/bvrh0q3+PyUlty8rIMsTc4XB/suywT/Slh9bUsSwgP+6dDvksVrGOFhtMo0lBPqujRZIUNypLc8LzkOlvShX7kZ7zFQF323YfkM7E7NvryW5Yp3Ad/Apkfk+/w+0Uzdk05TmiDIb3atjTYgbFh/++9zRL9qfG3hcigP3cJD/uH+3OiYB0rNFwK7ho3EkXPC1kvZF1G1nlHJ/v0OU1Pl3Aa43dLn8EREM/fxuE5IUxiP47PkYI7Jv7vQeYj1x45Hu2I4yJcX5PO8JK4hP9bkPmNaw9ABsYN1xuMV575qM4Wz0dpc87rXT7okw+E/ztXW/ofZtNn2nEY/veA109a30K7Bc/IbPsXt3SvuPZ6W3D6cJl/Wn6yPD4tDRXeC3FQQoXPEA/yIXh0IE9KFyWn58X6WeBxY6Lh3rU5+cHVWuC1QJ4XeG2xi3Zz4DEpUqJpk734cgA0H74cgq80Xw6Ajvw/uhp9qZ0RJ2CPLVHtxZ7c4vgTcHCMYtCLdhlz/maF/YT8GBvx2Zj4MfbaxJeSHm0A2rdPyrc4kWmbbxwv5F1CzzgB8+aMN4EL95xdrUw5NtqmiPs/8v/saq1/a/1V21Dvkx+IZ2S2/SvfXnlg56D0FD5DPMiH4NGBnETaBSTuVn123qPZ039NrbA6+RJ4LhHQkf9X98wHiBLkxTPirI7ySTXNq/wwL4qD+/lLJN+ALwce9N8rJ+W0qqppmR9Ut6pr11/eOzyazrNpOcuzo1uz6bXrn82LbF6V+WQyuVlk5UX6tUsonIxskYssvOhCfpEXE/9fwvvk97dr8+Um6rN8/53DF+yoVzKUd1G9+U67AMOLQeEX3Wm9jVFoA6DhRGnL0D2jv1CW4IiJ/1/3LDHByzz5fqzo75P+DdzKO74YHCj8A4XfxucfkedqtL3pU6CVTpKP7xib5I7N68en9C2dGi0AAA==","debug_symbols":"1dvhTqswFAfwd+EzH3ra09MeX+XGmKloliybmfMmN8Z3v2VKp4NgrIh/vhhw54wftJxCB8/VbXP9dH+13t7tHquLP8/VZnezOqx327T2/FJX1/v1ZrO+v3r/78q0f9ge4x8fVtt29fGw2h+qCxKxddVsb9vFYNM33K03TXUh9uWyrtgV5HBBji/IkYKcUJATC3L06zneFORQQU5BP/AF/cB/tR/U/WBjfBdsrM/BZHkgmpnDWzSzlxytbiA4uvzV0Vl6H9za/QT2mIMTfka7TGBnysddPjvu5CVHC4VxuzrtgpUdn9vDpHYyH+3tFuKPb0F/egtivr0FFtttIS3qZ/0t2NzfYjhrM6Hva6br/VJQ3aSguknBKCeDVUVJuxy15MaPVIjBvQWHGN34kUolyOTTWE/nmtUwEO2oawPH9kNsS5fl0sNy6XG5dF0sPZjl0mm5dLtculsunZdLX+5oGpY7msYpKoyTTPdxnB48cxfs2Z9d7cXh7mt97DSO5OwqLPqCnOEGs3lHUnqYsMFslK4NbIynvXb2tRECFidicRSKowaLQ1gci8VxWBzG4ngsDlZVVqyqrFhVWbGqcppaBvNg1eU0ZQ3mwarMaYoWzINVm9PvBmAerOqcbsnAPGD1mcDqM4HVZ5r7fFfpbpDTovY9M/fn9CtQnqYwgXseO0V7TTZRQdbPzJHcXEFC7HFkbo53Y5wwNydPiKVF7XEiFkehOM5gcQiLY7E4DovDc3OcZo6a8eA0xvPpmR36OAId9R5Gf+TMfQmpehpyTX/IdYrlYQPmITCPBfM4MA+Defzcl9ju5HGx7xGsS34OYB6wWyJWLI83YB4C81gwjwPzMJjHg3nA6rMHq88erD7L3M/WjM8RiZ2bMzpHJG5uzuid7PAD4L/H8VgcweIELE7E4igUZ5Lnr39tjigQjP7yJa39Xe3Xq+tN8/Z+6N3T9ubd66KHfw/N2ZujD/vdTXP7tG/ad0hPr4+2jUJRa0sm7WZbi22sXWx3+fhR4JqCtqt0jDQ1RZsESfEf","brillig_names":["_store_payload_in_transient_storage_unsafe"]},{"name":"get_private_listings","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"array","length":10,"type":{"kind":"struct","path":"types::listing_note::ListingNote","fields":[{"name":"token_id","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"seller","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"buyer","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"price","type":{"kind":"struct","path":"std::uint128::U128","fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}]}},{"name":"randomness","type":{"kind":"field"}},{"name":"header","type":{"kind":"struct","path":"aztec::note::note_header::NoteHeader","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"kind":"boolean"}]},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["get_private_listings"]},{"name":"finalize_transfer_to_private","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"hiding_point_slot","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5527120278801020911":{"error_kind":"string","string":"invalid NFT owner"},"10536464181608181124":{"error_kind":"string","string":"transfer not prepared"},"11859452850824495745":{"error_kind":"fmtstring","length":60,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["finalize_transfer_to_private"]},{"name":"transfer_in_public","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"939615093317106671":{"error_kind":"string","string":"Invalid response from registry"},"4939791462094160055":{"error_kind":"string","string":"Message not authorized by account"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"10132274202417587856":{"error_kind":"string","string":"invalid nonce"},"10846690067871036662":{"error_kind":"string","string":"invalid owner"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7V3bThy7Ev0XnnmwXeVbfmXrKCIJO0JCEBFypKNo//vpmU27B2zasVUwZVwvEQSv6aq1PO1V1R7P74tv119+ff98c/f3/c+LT3/9vri9/3r1eHN/t/z2+5/Liy8PN7e3N98/n/73hTr8Y/Rx/M8fV3eHX38+Xj08XnzSzpnLi+u7b4cfvVle4e+b2+uLT275MR+slF0HK2PTYG2wMBoR/dNoROvS6AiFwQHSSwcw+nTwfy4vjCGIPaTBS/DvGDsQxI468e5qvGvr0min/X7sEeI6OCLgy9iRNHatnsd+uIJ98yu4N7+CL10BtV5BqE3cvwI6kwa7k8GvzDdv0nwL/qVmoRyNghSNVrV8fUz56m1SGHfMF2z5ChjWKxgVKldwoELiH04y9u5t6QFHEbzdJg94XQk+mvX2gBFxP/jDfRW2e2x8+Y4EP3b4Yezw49Dhoxo7fD12+Ob9ww9r+FYp9TIeYBYPMovHvn881m3x6P3p5uL6yl6dLNGL/zzE7gaOnWSJi5hiRx32Y7ca0jxYLHPlbd7mHCv3hDBRrnGeXK2aKFc9Ua5molxholxx1FwPwduRg3cjB/+BrIrxqW1iAmw9lqUZVGqyOFztXnBxs84m6JI5DFsdFU66jIDHhpL9QC7onDR+IIN1RhrdB/Ju56TxA9nCc9L4gRznOWn8QGb2nDSi0EhB47COnReNw9YOvGiUKoaERqliSGiUKuYPaVQx0WjMSxq9VDEkNEoVQ0KjVDEkNEoVQ0IjCo0UNEoVQ0KjVDEkNEoVQ0KjVDEkNEoVQ0FjkCqGhEapYkholCqGhEapYkhoRKGRgsaJq5iYaPQAFRoDmjQaPVZGQ9oNvtC3jS3RYXQizxhtTgcf5Jm4OhpBnomrrhHkmbiaG0GeiavEAeSJE1efI8gzcVU7gjwTV8sjyDNxFT6CPCjycJZHugas5ZGuAWt5pGvAWh7pGrCWR7oGnOXRStoGvPWRvgFvfaRxwFsf6Rzw1gdFH9b6SO+Atz7SPOCtj3QPeOsj7QPe+kj/gLU+WvoHvPWR/gFvfaR/wFsf6R/w1kf89Zn1MbDpg/alPkb8wZn18Xr9RIl5FsaTPuIPeOsj/oC3PuIPeOuDog9rfeT5Am995PkCb32k/uGtjzxf4K2PPF9grQ9Q9A+Wa2z6mIo+Otqo1uHRWb8/nPR8Bw16rnTNXOnCXOniXOnaudJ1c6Xr50o3zJVunCpdnMtV4VyuCudyVTiXqyL56vFzpXtMYGSfdExgZOdzTIC/lxlh7wny90hD0Mjfe41Ao+Xv6Yagkb9XHIJG/h50CBr5e9shaEShkYJG/s59CBr51w9D0ChVDAmNUsWQ0ChVDAWNTqoYEhqliiGhUaoYEhqliiGhEYVGChqliiGhUaoYEhqliiGhUaoYEhqliqGg0UsVQ0KjVDEkNEoVQ0KjVDEkNKLQSEGjVDEkNIpv/DMa9495CbJS/xmN+592C7JSk9AoKzUJjbJSk9AoKzUJjdJvJKFR+o0kNIpvJKFR+o0UNEbpN5LQSFHFIGyHgVhV4WVpKtk03EMw+8NBmfWED1CwvXaEf+M3g8cPg8ePg8dvB4/fDR6/Hzz+MHj8cej4DcmXOZ4z/rHXX6PGXn+NGnv9NWrs9deosddfo8Zef40ae/01auz116jB1189+PqrB19/9eDrr+a//qY2DuiTg06LZ5cGbWHt4izP2bNk+S/WhMnyX9kJk+VvAwiT5e8ZCJPlbzAIk+XvRuiSNfytC2Gy/H0OYbL8TVHUKVmE/WRjDOkplVIn+/nWbAewUITZ4lTZDmCiCLMdwEURZjuAjSLMlr2P0lu2p6GUv6RCQTpvcvnZqyxd9k5Kp2/OWNKNtXTR2pQuxmzFBfZeijZd9m6KNl32foo2XfaGijZdnCtd9paKNl32noo2XfamijZd/q6KNN25XBXO5apwLleFc7kqnMtVkXxnxUDpDuyqjvEPbJOO8Q/sew7xW/ZLnQnrGwCg3h6KENLbJTrI0mW/1NGmy36po02X/VJHmy77pY423TMsFU6nT5559/yDaseQPL+QAr+QzlA9Ou+2kIJ7GZJT/ELS/EIy/EICfiEhv5Asv5Acv5A8v5DCeUPyz4cfQ4rsQvKKX0gUN4EZPhYPah27PM3F08FHGuUAGxIa5QAbEhrlABsSGuUAGxIa5QAbChqDHGBDQqMcw/lnNJpoEo3KZjTKMZwkNMoxnCQ0otBIQaNUMSQ0ShVDQqNUMSQ0ShVDQqNUMRQ0yjGcNDSK/SahkWKJgbg15FFXaLQa1q0FVjudBpe3Fjhn0kt7sx/I0vVLqQbYNkzpQ9OfrT77xTrJaYmiz9vpE0UfxvoAyWmXos/b6aNFH9b6GNGHtT4g+rDWB0UfxvUPkJymK/q8nT5O9GGtj/QPeOsj/QPe+kj/gLU+WvoHvPWR/gFvfaR/wFsf6R/w1kfqU976lP21we0C1p3ScgTFDtArh29XQOXbL5j1MGgE9JXpo9w6WGu96bBIXxod0oetTo48WWzUv+EAr3CQVziWVziOVzieVziBVziRVTivnG57tnA0r3De/a6c1jujzLNw3nMl1cmGGHNy3PXTSgogpOSkoJCSk2KFlJwUJ6TkpHghJSclCCk5KVFIyUhBJaTkpGghJSdFHG2BFHG0BVJQSMlJEUdbIEUcbYEUcbQFUsTRFkgRR5uTYsXRFkgRR1sgRRxtgRRxtAVSUEjJSRFHWyBFHG2BFHG0BVLE0RZIEUebk+LE0RZImdOnGNhIwWyrmptz9fE6rlE820b4RMqcq0+FlDlXnwopc64++6T4OVefCilz9lMqpMzZT6mQMqdPqZCCQkpOypz9lAopBI5Wh/TVdaee+RVSDKZP0hiL+y/tnX8a68M2VC/8HGP3A8ceBo49jht7UAPH/oop8usFEJWqxQ4x3cDc80sUwoGw0uJRbaOLn2PzOqyf8vJLQ2F/sNYKtjupcu50+DFXU81V69NcjyDoAWEPqLyWLAIkkKtNo23O6eVJc02KAC5NDVv5NlHvksreRVWTQqPZFrUAmRRzVm37h1LFOau2CilzVm0VUuas2iqkzFm1VUhBISUnZc6qrULKnM8h9s8RiHM+h6iQMudziAopczraXVJQzeloK6TM6WgrpMzpaCukTLpfYp8UFFJyUuZ0tBVSxLzlpJTPq7IpGGt8BtHtENMOgXYItkNsO8S1Q3w7JLRDYjME2tWHdvXLB+lYtzay7cn5dSsE2iHYDimrnzYtumzPIpYP8NiH+HZIaIfEZkj54IB9iG6HmHYItEOwHdKuPrarj+3ql7eV7z9lx/K262VhSguWC9kboLwtuQbSPSDTA4IeUHEmaO/XO5T2MVsGne0BuR6Q7wGFHlDsAJW3CtZAugdkekDQA+qZEb5nRvieGeF7ZoTvmRG+Z0aEnhlR3kego06PgaPJQaYHBD0g7ACVm79apdvyUh2EDBR6QGWd9Ml+BvvyvmfLzbUaSPeATA8IekBlnbSzCRRCBipTvnQfV9DSc8tAsQNU/tqBGkj3gMqU221/h7UqA0EPCHtAtgfkekC+BxR6QLEDVC6nayDdA+qZEeaVGZFO/NY2mgyEPSDbA3I9IN8DCj2g2AEC1QMqiwvb+gSQ3SPKNXMNhD0g2wNyPSDfAwo9oNgBKlfQNZDuAfXMCOyZEfjKjECfQC67saDtAbkekO8BhR5Q7ABZ1QPSPSDT4SPKR4PUQNgDsh2gck3ot62mCBmkeJ2Y9ptGazOIa4f4dkhoh8T2YsG+Up9VQLoHZHpA0APCHpDtAbkekO8BhR5Qz4yIPTMi9syI2DMjYs+MiD0zoryHbfd2Ui7yo1rbtdHkkOY3uiuX3XtXceWiex8C7RBsh9j29F07xLdDOnSJzZByD2AfotshZfXtOpOjNxkE2iHYDrHtENcO8e2Q0A6pqZ9DTLv6pl39cq2/D4F2CLZD2t/7pv29b9rf+6b9vW/a3/vQrj60qw/t6kO7+tCo/j/Lb/+9eri5+nJ7/XNBHP746+7r48393dOvj//7sf7ly8PN7e3N988/Hu6/Xn/79XD9+fb+6+FvF+rpn78chEtn4xLK8Y6KWl2itodfD4xZh5fWueWqy5X/Dw==","brillig_names":["transfer_in_public"]},{"name":"public_get_name","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18105278452957613314":{"error_kind":"string","string":"Function public_get_name can only be called statically"}}},"bytecode":"H4sIAAAAAAAA/71VwU6DQBBdWhrF2sRoTfTgRRMTb0uhtsca9eBFE/sFW3bXkGBqChqP/XQhGcI4UqSy+BIys+zyZuYNAxYrYIG12XdYrAasintXYB2wHbTfTa8ZrHkzuA6Ja5J/yv2xU1Kfwfw9Bzitdvh5zt+S/nwHeO7WBT+uJY+7m177yB+AP6h4vs3c0976DuI0zZ/CPdqQf4Y+6HAG60ybA/DFx+vTW7CU6kbKlYpjPGdU3ypsw9nZgvOEcj6+R1GoQ7W6/wzj5Ad3t4Q79zusvDaaFz6HUTY/GWZgeTO4PVLDEGzWuwukyTHV5CGeJyIJg1sRRX9tIB0Ak4UxUliPbR5eKsIpEuGS5GqZz9XLBB5SgefJciVe1LMSsu7LXLcPgwot+qz4qdnrYt/Uh2My5TyP2wX+Hiu0x7DRPj5/Dus9lH9u7QZ56olwtSe0GAsp/UAcEn5GdDIdf6Fc5WmtPSV8fa3/Pb5e+COppLcI3NFU8tFv8b8AbSihzWoJAAA=","debug_symbols":"7ZXBbsIwDIbfJeceEttxEl5lmlCBgCpVLSpl0oR49yUTZKWLQOvKTrtUSfXZ/mXH9kls/Oq4W1bNtj2IxctJ1O267Ku2CbfTuRCrrqrrarcc/hYyfhR98od92cTroS+7XiwUMxTCN5t4NBA8bKvaiwWH43dYSn2FJegEK6AMTUTmQhNpTrTDDGwxubYIagi/FkLpGbTbBAfxf6idZ9BOKuWdH+VdaU40K3Nfu0N3hR0hjbWbWbUreas9RrBPj+CeHQHkryOwk9f3xg7wQc1k8uyk1aOagfqhmmgDE2xwgg1NsMn2PmKyQTTufnZRU4J5WD+TS68Cm6YcDmiQuW4zaPFCG5J0v3JGpSFk4HZSZHQoifj17JjHheb/xGQScw63t7KrylXtL0txe2zWgx3Zv+/9aF3uu3btN8fOx8U52Jmxs8EVSHGQxMZCXaAJMUKcDw==","brillig_names":["public_get_name"]},{"name":"prepare_private_balance_increase","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","brillig_names":["random","decompose_hint","field_less_than","lte_hint","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","store_in_execution_cache_oracle_wrapper","enqueue_public_function_call_internal","store_in_execution_cache_oracle_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"cancel_listing","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"3912224518872547481":{"error_kind":"string","string":"Buyer listing not found when cancelling listing"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6869395374906889440":{"error_kind":"string","string":"Mismatch note header contract address."},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"11873158822563704285":{"error_kind":"string","string":"Mismatch return note field."},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"14381800705049166368":{"error_kind":"string","string":"Seller listing not found when cancelling listing"},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["get_notes_internal","get_collapse_hints","field_less_than","decompose_hint","lte_hint","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"owner_of","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[{"name":"token_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"9443383425599897888":{"error_kind":"string","string":"Function owner_of can only be called statically"},"9605075991997100073":{"error_kind":"string","string":"token does not exist"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["owner_of"]},{"name":"get_admin","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"10055739771636044368":{"error_kind":"string","string":"Function get_admin can only be called statically"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/71VTUvDQBDdtCkaa0G0gh68KAjeNl82x4p68KJgf8G2uyuBSKWJ4rE/3QQmZBzT2NqND8LMZjdvZt5kEotVsMDa7DsstgashntXYB2wHbTfza8xrPl2cB0S1yR/xIPQqanPYP6+A5xWO/y85G9Jf74DPHfLih/XUsbdza995A/AHzQ832bueW8DB3Ga5s/hHq3Iv0AfdDiDdaHNAfji4/XpbTaX6kbKhUpTPGdU3yZswtnZgPOEcj6+J0msY7W4/4zT7Ad3t4a79DusvjaaFz6HUTc/BcZg+XZwe6SGIdiidxdIk2OqyUM6yUQWz25Fkvy1gXQATBbGSGE9tnp4qQinSIRLkqtlPtewEHhIBZ5k84V4Uc9KyHVf5nX7MGjQos+qn5q9rPZNfThGEedl3C7w91ilPYaN9vH5c1jvofxLa2+Rpx4JV/tCi1BIGczEIeFnRCfT8afKVb7W2lci0Nf63+NH00h6gk9HnueFXsh/i/8FmXq2VGoJAAA=","debug_symbols":"5ZXBbsIwDIbfJece4thxEl5lmlCBgCpVLSpl0oR49yVTCaWrQOvKLlyquPps/43t+iQ2fnXcLYtqWx/E4u0kynqdt0VdBet0zsSqKcqy2C37r4WMD6Bv/rDPq2ge2rxpxQKYVSZ8tYlHo0KEbVF6seBw/AlLqS+wVDrBoGiEJiLT0USaE+1wBLaYQltU0IffMwF6Bu02wUH8P2rnGbQTpHvnR/cOmhPNYO5rd+gusCOkoXYzq3aQt9pjBvv0DO7ZGZT8cwZ28tJv7BQ+qJlMkZ20elAzBb9UE33UBB+c4EMTfEZnHy1w54O217fj9QN0qX58hcGMzY8JATvakKT7tTCQfitG3c7+mA6JeG0k5mHp+EU+9Rysj7wp8lXpu8W1PVbr3h5rP/d+sNL2Tb32m2Pj43Lr7bU4fcplSHHYY/OjztCEHCHPFw==","brillig_names":["get_admin"]},{"name":"public_get_symbol","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"15009911310769716579":{"error_kind":"string","string":"Function public_get_symbol can only be called statically"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/71V30uEQBBeT4+y6yDqgqKXgqDXFb0fjxfVQy8F3V8w5+6GYFycFj36p6cw4rTnmZfaB8vMuus3M984aLACBlqL/YTBasCoeHaD1kbbI+dmuua4583g2FrcNvln3BvbJfW1mL9rI6fRDT/P+TvSn+8hz31S8NNa8rj76Tok/hD9YcX7Xeae9tazCWfb/Cmcky35ZxigDhe4z7Q5Qh8+357f/ZWQt0KsZRTROdP1rcIunL0dOM90zqePMAxUINcPX0EUb3CbJdy532Pltel50XsUZfOTYY6WN4PT12oYoc16d0U0OdU1eYwWMcSBfwdh+NcG6gPQZmFMK6zPtg+vLsI5EeGaiDDSRVjEqzW8yhcJoq4GdT/MASt+LlZS3GlrgKczzvOYZlLoYLJNWOSc3r/E/YFWQ2atBnmqKTjKBQVjEMLz4VjjZ0S3QQfxl9KRrlLKleCpifr3+IJ7QoKvwJ8tlZi4v8X/Bo0MkGfyCAAA","debug_symbols":"vZXbasJAEIbfZa9zMac9+SpFJOoqgZBIjIUivnt3S9xGG5Ra7U3YDd/s/MzxqNZhedguqmbT7tXs7ajqdlX2VdvE2/FUqGVX1XW1XYx/K0gflC9+vyubdN33ZderGRpDhQrNOh0txRc2VR3UzMTjTxhAn2EgnWEkmaBFxA60iDaZ9jwBO85POyYcw/NCoX6CdpfhKP4ftZsnaBfMcTf34o7aZNqgva3dsz/DXliutdunake41J48uJd78K/2QPBnD8bDud6MJ76TM8gve3D6KmeEv1STbOgBG37ARh6wmex9NgCDDRv0t6PLWijD4/zZqfAiuTzleEQTTHWbZccDbQXkduYs5iFk6XJSTOhAYP4uO3MxheaneHsvu6pc1mGY/ZtDsxqtgv5jF662wq5rV2F96ELaD6PVkAqYbMGU+iXVT3TMOvqIfj4B","brillig_names":["public_get_symbol"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"364657447181031001":{"error_kind":"string","string":"invalid admin"},"939615093317106671":{"error_kind":"string","string":"Invalid response from registry"},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"4939791462094160055":{"error_kind":"string","string":"Message not authorized by account"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5527120278801020911":{"error_kind":"string","string":"invalid NFT owner"},"6515419266667913063":{"error_kind":"string","string":"zero token ID not supported"},"7176719043052132708":{"error_kind":"string","string":"Function _finish_transfer_to_public can only be called internally"},"7646447728501516020":{"error_kind":"string","string":"invalid token"},"8359297168692325491":{"error_kind":"string","string":"Function is_minter can only be called statically"},"8778930052620580050":{"error_kind":"string","string":"caller is not an admin"},"9296579303138805202":{"error_kind":"string","string":"token already exists"},"9443383425599897888":{"error_kind":"string","string":"Function owner_of can only be called statically"},"9605075991997100073":{"error_kind":"string","string":"token does not exist"},"10055739771636044368":{"error_kind":"string","string":"Function get_admin can only be called statically"},"10132274202417587856":{"error_kind":"string","string":"invalid nonce"},"10536464181608181124":{"error_kind":"string","string":"transfer not prepared"},"10846690067871036662":{"error_kind":"string","string":"invalid owner"},"11859452850824495745":{"error_kind":"fmtstring","length":60,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14466155340988305413":{"error_kind":"string","string":"caller is not a minter"},"15009911310769716579":{"error_kind":"string","string":"Function public_get_symbol can only be called statically"},"16541607464495309456":{"error_kind":"fmtstring","length":16,"item_types":[]},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16958085610837407363":{"error_kind":"string","string":"Function _store_payload_in_transient_storage_unsafe can only be called internally"},"17028138060491915576":{"error_kind":"string","string":"Function _finalize_transfer_to_private_unsafe can only be called internally"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18105278452957613314":{"error_kind":"string","string":"Function public_get_name can only be called statically"}}},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"]},{"name":"process_log","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"log_plaintext","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"tx_hash","type":{"kind":"field"},"visibility":"private"},{"name":"unique_note_hashes_in_tx","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"first_nullifier_in_tx","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8861757336002045335":{"error_kind":"fmtstring","length":99,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"9862881900111276825":{"error_kind":"fmtstring","length":35,"item_types":[{"kind":"field"}]},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["process_log"]},{"name":"transfer_in_private","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3912224518872547481":{"error_kind":"string","string":"Buyer listing not found when cancelling listing"},"4939791462094160055":{"error_kind":"string","string":"Message not authorized by account"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6869395374906889440":{"error_kind":"string","string":"Mismatch note header contract address."},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"10132274202417587856":{"error_kind":"string","string":"invalid nonce"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"11873158822563704285":{"error_kind":"string","string":"Mismatch return note field."},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954044801249163952":{"error_kind":"string","string":"NFT not found when transferring"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["store_in_execution_cache_oracle_wrapper","call_private_function_internal","load","notify_created_nullifier_oracle_wrapper","get_notes_internal","get_collapse_hints","field_less_than","decompose_hint","lte_hint","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","get_notes_internal","get_collapse_hints","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"set_minter","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"minter","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"approve","type":{"kind":"boolean"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"8778930052620580050":{"error_kind":"string","string":"caller is not an admin"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["set_minter"]},{"name":"transfer_to_public","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"4718290446670665014":{"error_kind":"string","string":"NFT not found when transferring to public"},"4939791462094160055":{"error_kind":"string","string":"Message not authorized by account"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6869395374906889440":{"error_kind":"string","string":"Mismatch note header contract address."},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"10132274202417587856":{"error_kind":"string","string":"invalid nonce"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"11873158822563704285":{"error_kind":"string","string":"Mismatch return note field."},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["store_in_execution_cache_oracle_wrapper","call_private_function_internal","load","notify_created_nullifier_oracle_wrapper","get_notes_internal","get_collapse_hints","field_less_than","decompose_hint","lte_hint","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","store_in_execution_cache_oracle_wrapper","enqueue_public_function_call_internal","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"packed_note_content","type":{"kind":"array","length":6,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5972837590977953198":{"error_kind":"fmtstring","length":36,"item_types":[{"kind":"field"}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]}],"outputs":{"structs":{"events":[{"kind":"struct","path":"NFT::NFTTransfer","fields":[{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_id","type":{"kind":"field"}}]}],"functions":[{"kind":"struct","path":"NFT::finalize_transfer_to_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::finalize_transfer_to_private_parameters","fields":[{"name":"token_id","type":{"kind":"field"}},{"name":"hiding_point_slot","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::purchase_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::purchase_parameters","fields":[{"name":"token_id","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::list_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::list_parameters","fields":[{"name":"token_id","type":{"kind":"field"}},{"name":"price","type":{"kind":"struct","path":"std::uint128::U128","fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}]}},{"name":"buyer","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"NFT::private_get_symbol_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::private_get_symbol_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::_finish_transfer_to_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::_finish_transfer_to_public_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_id","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::transfer_in_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::transfer_in_private_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_id","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::is_minter_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::is_minter_parameters","fields":[{"name":"minter","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"boolean"}}]},{"kind":"struct","path":"NFT::mint_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::mint_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_id","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::cancel_authwit_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::cancel_authwit_parameters","fields":[{"name":"inner_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::transfer_to_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::transfer_to_public_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_id","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::owner_of_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::owner_of_parameters","fields":[{"name":"token_id","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::public_get_symbol_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::public_get_symbol_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::_store_payload_in_transient_storage_unsafe_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::_store_payload_in_transient_storage_unsafe_parameters","fields":[{"name":"slot","type":{"kind":"field"}},{"name":"point","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"setup_log","type":{"kind":"array","length":9,"type":{"kind":"field"}}}]}}]},{"kind":"struct","path":"NFT::transfer_to_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::transfer_to_private_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_id","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::_finalize_transfer_to_private_unsafe_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::_finalize_transfer_to_private_unsafe_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_id","type":{"kind":"field"}},{"name":"hiding_point_slot","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::constructor_parameters","fields":[{"name":"admin","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"name","type":{"kind":"string","length":31}},{"name":"symbol","type":{"kind":"string","length":31}},{"name":"token","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"NFT::set_admin_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::set_admin_parameters","fields":[{"name":"new_admin","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"NFT::private_get_name_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::private_get_name_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::set_minter_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::set_minter_parameters","fields":[{"name":"minter","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"approve","type":{"kind":"boolean"}}]}}]},{"kind":"struct","path":"NFT::transfer_in_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::transfer_in_public_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_id","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::cancel_listing_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::cancel_listing_parameters","fields":[{"name":"token_id","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::get_admin_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::get_admin_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"NFT::prepare_private_balance_increase_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::prepare_private_balance_increase_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"NFT::public_get_name_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::public_get_name_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"},{"kind":"string","value":"ListingNote"},{"kind":"struct","fields":[{"name":"token_id","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"seller","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"buyer","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"price","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"},{"kind":"string","value":"NFTNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"token_id","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}]}}]}]}],"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"minters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"total_supply","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"public_balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"symbol","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"name","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"decimals","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000a"}}]}}]}}]},{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"NFT"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"symbol","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"name","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"minters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"private_nfts","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}},{"name":"nft_exists","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"public_owners","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}]}},{"name":"token","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000a"}}]}},{"name":"private_listings","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000c"}}]}}]}}]}]}},"file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        /// Safety: `sorted` array is checked to be:\n        /// a. a permutation of `input`'s elements\n        /// b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n","path":"std/array/mod.nr"},"6":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"7":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"17":{"source":"use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"18":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    /// Safety: borrow is enforced to be boolean due to its type.\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        /// Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            /// Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        /// Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"19":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"21":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    /// Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"27":{"source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// docs:start:sha256\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        /// Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        /// Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    /// Safety: the msg_len is checked below in verify_msg_len\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n\n        /// Safety: testing context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 0) };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        /// Safety: test context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 64) };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        /// Safety: testing context\n        let msg_block = unsafe { attach_len_to_msg_block(input, 1, 448) };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n","path":"std/hash/sha256.nr"},"51":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"52":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"60":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::ops::{Add, BitAnd, BitOr, BitXor, Div, Mul, Not, Rem, Shl, Shr, Sub};\nuse crate::static_assert;\nuse super::{convert::AsPrimitive, default::Default};\n\nglobal pow64: Field = 18446744073709551616; //2^64;\nglobal pow63: Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    pub(crate) lo: Field,\n    pub(crate) hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i + 8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i + 8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        static_assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N - i]) * base;\n                base = base * 16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn unconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (\n            if ascii < 58 {\n                ascii - 48\n            } else {\n                /// Safety: optionally adds 32 and then check (below) the result is in 'a..f' range\n                let ascii =\n                    ascii + 32 * (unsafe { U128::unconstrained_check_is_upper_ascii(ascii) as u8 });\n                assert(ascii >= 97); // enforce >= 'a'\n                assert(ascii <= 102); // enforce <= 'f'\n                ascii - 87\n            }\n        ) as Field\n    }\n\n    // TODO: Replace with a faster version.\n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q, r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128\n    where\n        T: AsPrimitive<Field>,\n    {\n        let f = i.as_();\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size::<128>();\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T\n    where\n        Field: AsPrimitive<T>,\n    {\n        AsPrimitive::as_(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        /// Safety: euclidian division is asserted to be correct: assert(a == b * q + r); and assert(r < b);\n        /// Furthermore, U128 addition and multiplication ensures that b * q + r does not overflow\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        /// Safety: cf div() above\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nimpl Default for U128 {\n    fn default() -> Self {\n        U128::zero()\n    }\n}\n\nmod tests {\n    use crate::default::Default;\n    use crate::ops::Not;\n    use crate::uint128::{pow63, pow64, U128};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a = a.to_le_bytes();\n        let be_bytes_a = a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b = U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c = U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d = U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e = U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f = U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded = U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b: Field = a.to_integer();\n        let c: [u8; 17] = b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a = U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b = U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c = U128::one();\n        let d = U128::from_u64s_le(0x0, 0x1);\n        /// Safety: testing context\n        unsafe {\n            let (q, r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start: Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start: Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start: Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start: Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(),\n            U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(\n                U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff),\n            ),\n        );\n    }\n\n    #[test]\n    fn test_default() {\n        assert_eq(U128::default(), U128::zero());\n    }\n}\n","path":"std/uint128.nr"},"62":{"source":"mod types;\nmod test;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract NFT {\n    use crate::types::listing_note::ListingNote;\n    use crate::types::nft_note::NFTNote;\n    use dep::authwit::auth::{\n        assert_current_call_valid_authwit, assert_current_call_valid_authwit_public,\n        compute_authwit_nullifier,\n    };\n    use dep::aztec::{\n        encrypted_logs::log_assembly_strategies::default_aes128::note::encode_and_encrypt_note,\n        macros::{\n            events::event,\n            functions::{initializer, internal, private, public, view},\n            storage::storage,\n        },\n        note::constants::MAX_NOTES_PER_PAGE,\n        oracle::random::random,\n        prelude::{\n            AztecAddress, Map, NoteGetterOptions, NoteViewerOptions, PrivateContext, PrivateSet,\n            PublicContext, PublicImmutable, PublicMutable,\n        },\n        protocol_types::{point::Point, traits::Serialize},\n        utils::comparison::Comparator,\n    };\n    use dep::compressed_string::FieldCompressedString;\n    use dep::token_contract::Token;\n    use std::meta::derive;\n\n    #[derive(Serialize)]\n    #[event]\n    struct NFTTransfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        token_id: Field,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        symbol: PublicImmutable<FieldCompressedString, Context>,\n        name: PublicImmutable<FieldCompressedString, Context>,\n        admin: PublicMutable<AztecAddress, Context>,\n        minters: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n        private_nfts: Map<AztecAddress, PrivateSet<NFTNote, Context>, Context>,\n        nft_exists: Map<Field, PublicMutable<bool, Context>, Context>,\n        public_owners: Map<Field, PublicMutable<AztecAddress, Context>, Context>,\n        token: PublicImmutable<AztecAddress, Context>,\n        private_listings: Map<AztecAddress, PrivateSet<ListingNote, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>, token: AztecAddress) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        assert(!token.is_zero(), \"invalid token\");\n        storage.admin.write(admin);\n        storage.minters.at(admin).write(true);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n        storage.token.initialize(token);\n    }\n\n    #[public]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        storage.admin.write(new_admin);\n    }\n\n    #[public]\n    fn set_minter(minter: AztecAddress, approve: bool) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        storage.minters.at(minter).write(approve);\n    }\n\n    #[public]\n    fn mint(to: AztecAddress, token_id: Field) {\n        assert(token_id != 0, \"zero token ID not supported\");\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not a minter\");\n        assert(storage.nft_exists.at(token_id).read() == false, \"token already exists\");\n\n        storage.nft_exists.at(token_id).write(true);\n\n        storage.public_owners.at(token_id).write(to);\n    }\n\n    #[public]\n    #[view]\n    fn public_get_name() -> pub FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_name() -> pub FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[public]\n    #[view]\n    fn get_admin() -> Field {\n        storage.admin.read().to_field()\n    }\n\n    #[public]\n    #[view]\n    fn is_minter(minter: AztecAddress) -> bool {\n        storage.minters.at(minter).read()\n    }\n\n    #[public]\n    fn transfer_in_public(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let public_owners_storage = storage.public_owners.at(token_id);\n        assert(public_owners_storage.read().eq(from), \"invalid owner\");\n\n        public_owners_storage.write(to);\n    }\n\n    #[private]\n    fn transfer_to_private(to: AztecAddress, token_id: Field) {\n        let from = context.msg_sender();\n\n        let nft = NFT::at(context.this_address());\n\n        // We prepare the private balance increase.\n        let hiding_point_slot = _prepare_private_balance_increase(to, &mut context, storage);\n\n        // At last we finalize the transfer. Usage of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that he can transfer only his own NFTs.\n        nft._finalize_transfer_to_private_unsafe(from, token_id, hiding_point_slot).enqueue(\n            &mut context,\n        );\n    }\n\n    /// Prepares an increase of private balance of `to` (partial note). The increase needs to be finalized by calling\n    /// `finalize_transfer_to_private. Returns a hiding point slot.\n    #[private]\n    fn prepare_private_balance_increase(to: AztecAddress) -> Field {\n        _prepare_private_balance_increase(to, &mut context, storage)\n    }\n\n    /// This function exists separately from `prepare_private_balance_increase` solely as an optimization as it allows\n    /// us to have it inlined in the `transfer_to_private` function which results in one less kernel iteration.\n    #[contract_library_method]\n    fn _prepare_private_balance_increase(\n        to: AztecAddress,\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) -> Field {\n        let to_note_slot = storage.private_nfts.at(to).storage_slot;\n\n        // We create a setup payload with unpopulated/zero token id for 'to'\n\n        /// Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        /// so a malicious sender could use non-random values to make the note less private. But they already know\n        /// the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        /// information. We can therefore assume that the sender will cooperate in the random value generation.\n        let note_randomness = unsafe { random() };\n        let note_setup_payload = NFTNote::setup_payload().new(to, note_randomness, to_note_slot);\n\n        let setup_log = note_setup_payload.encrypt_log(context, to, context.msg_sender());\n\n        // Using the x-coordinate as a hiding point slot is safe against someone else interfering with it because\n        // we have a guarantee that the public functions of the transaction are executed right after the private ones\n        // and for this reason the protocol guarantees that nobody can front-run us in consuming the hiding point.\n        // This guarantee would break if `finalize_transfer_to_private` was not called in the same transaction. This\n        // however is not the flow we are currently concerned with. To support the multi-transaction flow we could\n        // introduce a `from` function argument, hash the x-coordinate with it and then repeat the hashing in\n        // `finalize_transfer_to_private`.\n        //\n        // We can also be sure that the `hiding_point_slot` will not overwrite any other value in the storage because\n        // in our state variables we derive slots using a different hash function from multi scalar multiplication\n        // (MSM).\n        let hiding_point_slot = note_setup_payload.hiding_point.x;\n\n        // We don't need to perform a check that the value overwritten by `_store_point_in_transient_storage_unsafe`\n        // is zero because the slot is the x-coordinate of the hiding point and hence we could only overwrite\n        // the value in the slot with the same value. This makes usage of the `unsafe` method safe.\n        NFT::at(context.this_address())\n            ._store_payload_in_transient_storage_unsafe(\n                hiding_point_slot,\n                note_setup_payload.hiding_point,\n                setup_log,\n            )\n            .enqueue(context);\n\n        hiding_point_slot\n    }\n\n    // TODO(#9375): Having to define the note log length here is very unfortunate as it's basically impossible for\n    // users to derive manually. This will however go away once we have a real transient storage since we will not need\n    // the public call and instead we would do something like `context.transient_storage_write(slot, payload)` and that\n    // will allow us to use generics and hence user will not need to define it explicitly. We cannot use generics here\n    // as it is an entrypoint function.\n    // docs:start:store_payload_in_transient_storage_unsafe\n    #[public]\n    #[internal]\n    fn _store_payload_in_transient_storage_unsafe(\n        slot: Field,\n        point: Point,\n        setup_log: [Field; 9],\n    ) {\n        context.storage_write(slot, point);\n        context.storage_write(slot + aztec::protocol_types::point::POINT_LENGTH as Field, setup_log);\n    }\n\n    /// Finalizes a transfer of NFT with `token_id` from public balance of `from` to a private balance of `to`.\n    /// The transfer must be prepared by calling `prepare_private_balance_increase` first and the resulting\n    /// `hiding_point_slot` must be passed as an argument to this function.\n    // docs:start:finalize_transfer_to_private\n    #[public]\n    fn finalize_transfer_to_private(token_id: Field, hiding_point_slot: Field) {\n        let from = context.msg_sender();\n        _finalize_transfer_to_private(from, token_id, hiding_point_slot, &mut context, storage);\n    }\n\n    #[public]\n    #[internal]\n    fn _finalize_transfer_to_private_unsafe(\n        from: AztecAddress,\n        token_id: Field,\n        hiding_point_slot: Field,\n    ) {\n        _finalize_transfer_to_private(from, token_id, hiding_point_slot, &mut context, storage);\n    }\n\n    #[contract_library_method]\n    fn _finalize_transfer_to_private(\n        from: AztecAddress,\n        token_id: Field,\n        hiding_point_slot: Field,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let public_owners_storage = storage.public_owners.at(token_id);\n        assert(public_owners_storage.read().eq(from), \"invalid NFT owner\");\n\n        // Set the public NFT owner to zero\n        public_owners_storage.write(AztecAddress::zero());\n\n        // Finalize the partial note with the `token_id`\n        let finalization_payload =\n            NFTNote::finalization_payload().new(context, hiding_point_slot, token_id);\n\n        // At last we emit the note hash and the final log\n        finalization_payload.emit();\n    }\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    // docs:start:cancel_authwit\n    #[private]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n\n    #[private]\n    fn transfer_in_private(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        _transfer_in_private(from, to, token_id, &mut context, storage);\n    }\n\n    #[contract_library_method]\n    fn _transfer_in_private(\n        from: AztecAddress,\n        to: AztecAddress,\n        token_id: Field,\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) {\n        let nfts = storage.private_nfts;\n\n        let notes = nfts.at(from).pop_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(notes.len() == 1, \"NFT not found when transferring\");\n\n        let mut new_note = NFTNote::new(token_id, to);\n\n        nfts.at(to).insert(&mut new_note).emit(encode_and_encrypt_note(context, to, from));\n\n        // cancel listing if any\n        let seller_listing_notes = storage.private_listings.at(from).pop_notes(NoteGetterOptions::new()\n            .select(ListingNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        if seller_listing_notes.len() == 1 {\n            let seller_listing_note = seller_listing_notes.get_unchecked(0);\n            let buyer_listing_notes = storage.private_listings.at(seller_listing_note.buyer).pop_notes(NoteGetterOptions::new()\n                .select(ListingNote::properties().token_id, Comparator.EQ, token_id)\n                .set_limit(1));\n            assert(buyer_listing_notes.len() == 1, \"Buyer listing not found when cancelling listing\");\n        }\n    }\n\n    #[private]\n    fn transfer_to_public(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let notes = storage.private_nfts.at(from).pop_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(notes.len() == 1, \"NFT not found when transferring to public\");\n\n        NFT::at(context.this_address())._finish_transfer_to_public(to, token_id).enqueue(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _finish_transfer_to_public(to: AztecAddress, token_id: Field) {\n        storage.public_owners.at(token_id).write(to);\n    }\n\n    #[public]\n    #[view]\n    fn owner_of(token_id: Field) -> AztecAddress {\n        assert(storage.nft_exists.at(token_id).read(), \"token does not exist\");\n        storage.public_owners.at(token_id).read()\n    }\n\n    /// Returns an array of token IDs owned by `owner` in private and a flag indicating whether a page limit was\n    /// reached. Starts getting the notes from page with index `page_index`. Zero values in the array are placeholder\n    /// values for non-existing notes.\n    // docs:start:get_private_nfts\n    unconstrained pub fn get_private_nfts(\n        owner: AztecAddress,\n        page_index: u32,\n    ) -> pub ([Field; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.private_nfts.at(owner).view_notes(options.set_offset(offset));\n\n        let mut owned_nft_ids = [0; MAX_NOTES_PER_PAGE];\n        for i in 0..options.limit {\n            if i < notes.len() {\n                owned_nft_ids[i] = notes.get_unchecked(i).token_id;\n            }\n        }\n\n        let page_limit_reached = notes.len() == options.limit;\n        (owned_nft_ids, page_limit_reached)\n    }\n\n    #[private]\n    fn list(token_id: Field, price: U128, buyer: AztecAddress) {\n        let from = context.msg_sender();\n\n        let nft_notes = storage.private_nfts.at(from).get_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(nft_notes.len() == 1, \"NFT not found when listing\");\n        assert(price > U128::zero(), \"invalid price\");\n        assert(!buyer.is_zero(), \"invalid buyer\");\n        assert(!buyer.eq(from), \"buyer equals from\");\n\n        let mut seller_note = ListingNote::new(token_id, from, from, buyer, price);\n        storage.private_listings.at(from).insert(&mut seller_note)\n            .emit(encode_and_encrypt_note(&mut context, from, from));\n\n        let mut buyer_note = ListingNote::new(token_id, buyer, from, buyer, price);\n        storage.private_listings.at(buyer).insert(&mut buyer_note)\n            .emit(encode_and_encrypt_note(&mut context, buyer, from));\n    }\n\n    #[private]\n    fn cancel_listing(token_id: Field) {\n        let from = context.msg_sender();\n\n        let seller_listing_notes = storage.private_listings.at(from).pop_notes(NoteGetterOptions::new()\n            .select(ListingNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(seller_listing_notes.len() == 1, \"Seller listing not found when cancelling listing\");\n        \n        let seller_listing_note = seller_listing_notes.get_unchecked(0);\n\n        let buyer_listing_notes = storage.private_listings.at(seller_listing_note.buyer).pop_notes(NoteGetterOptions::new()\n            .select(ListingNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(buyer_listing_notes.len() == 1, \"Buyer listing not found when cancelling listing\");\n    }\n\n    #[private]\n    fn purchase(token_id: Field, nonce: Field) {\n        let from = context.msg_sender();\n\n        let buyer_listing_notes = storage.private_listings.at(from).pop_notes(NoteGetterOptions::new()\n            .select(ListingNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(buyer_listing_notes.len() == 1, \"Buyer listing not found when purchasing\");\n\n        let buyer_listing_note = buyer_listing_notes.get_unchecked(0);\n\n        let seller_listing_notes = storage.private_listings.at(buyer_listing_note.seller).pop_notes(NoteGetterOptions::new()\n            .select(ListingNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(seller_listing_notes.len() == 1, \"Seller listing not found when purchasing\");\n\n        let token = Token::at(storage.token.read());\n        token.transfer_in_private(buyer_listing_note.buyer, buyer_listing_note.seller, buyer_listing_note.price, nonce).call(\n            &mut context,\n        );\n\n        _transfer_in_private(buyer_listing_note.seller, buyer_listing_note.buyer, token_id, &mut context, storage);\n    }\n\n    unconstrained pub fn get_private_listings(\n        owner: AztecAddress,\n        page_index: u32,\n    ) -> pub ([ListingNote; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.private_listings.at(owner).view_notes(options.set_offset(offset));\n\n        let mut owned_listings = [ListingNote::default(); MAX_NOTES_PER_PAGE];\n        for i in 0..options.limit {\n            if i < notes.len() {\n                owned_listings[i] = notes.get_unchecked(i);\n            }\n        }\n\n        let page_limit_reached = notes.len() == options.limit;\n        (owned_listings, page_limit_reached)\n    }\n}\n","path":"/Users/saimeunt/aztec/tezac/src/contracts/src/main.nr"},"72":{"source":"use dep::aztec::{\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::note,\n    note::utils::compute_note_hash_for_nullify,\n    oracle::random::random,\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{\n        address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator, traits::Packable,\n    },\n};\n\n#[note]\n#[derive(Eq)]\npub struct ListingNote {\n    // ID of the token\n    token_id: Field,\n    // The owner of the note\n    owner: AztecAddress,\n    // The initiating seller\n    seller: AztecAddress,\n    // The intended buyer\n    buyer: AztecAddress,\n    // The purchase price of the listing\n    price: U128,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n\nimpl NullifiableNote for ListingNote {\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self, storage_slot: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self, storage_slot);\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl ListingNote {\n    pub fn new(token_id: Field, owner: AztecAddress, seller: AztecAddress, buyer: AztecAddress, price: U128) -> Self {\n        /// Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        /// so a malicious sender could use non-random values to make the note less private. But they already know\n        /// the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        /// information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        ListingNote { token_id, owner, seller, buyer, price, randomness, header: NoteHeader::empty() }\n    }\n    pub fn default() -> Self {\n        ListingNote {\n            token_id: 0,\n            owner: AztecAddress::zero(),\n            seller: AztecAddress::zero(),\n            buyer: AztecAddress::zero(),\n            price: U128::zero(),\n            randomness: 0,\n            header: NoteHeader::empty()\n        }\n    }\n}\n","path":"/Users/saimeunt/aztec/tezac/src/contracts/src/types/listing_note.nr"},"73":{"source":"use dep::aztec::{\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::partial_note,\n    note::utils::compute_note_hash_for_nullify,\n    oracle::random::random,\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{\n        address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator, traits::Packable,\n    },\n};\n\n// docs:start:nft_note\n#[partial_note(quote { token_id })]\npub struct NFTNote {\n    // ID of the token\n    token_id: Field,\n    // The owner of the note\n    owner: AztecAddress,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:nft_note\n\nimpl NullifiableNote for NFTNote {\n    // docs:start:compute_nullifier\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n    // docs:end:compute_nullifier\n\n    unconstrained fn compute_nullifier_without_context(self, storage_slot: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self, storage_slot);\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl NFTNote {\n    pub fn new(token_id: Field, owner: AztecAddress) -> Self {\n        /// Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        /// so a malicious sender could use non-random values to make the note less private. But they already know\n        /// the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        /// information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        NFTNote { token_id, owner, randomness, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for NFTNote {\n    fn eq(self, other: Self) -> bool {\n        (self.token_id == other.token_id)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}\n","path":"/Users/saimeunt/aztec/tezac/src/contracts/src/types/nft_note.nr"},"76":{"source":"use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\nuse dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\nglobal IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/authwit/src/auth.nr"},"85":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::hash_args;\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\npub struct PrivateCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub gas_opts: GasOpts,\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr"},"92":{"source":"use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS, PUBLIC_DISPATCH_SELECTOR,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        execution_cache::store(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            /// Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            /// for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        /// Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        /// execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        /// the number of side effects that took place), along with the hash of the return values. We validate these\n        /// by requesting a private kernel iteration in which the return values are constrained to hash\n        /// to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        /// WARNING: This is insecure and should be temporary!\n        /// The oracle hashes the arguments and returns a new args_hash.\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        /// We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        /// b) this is only temporary.\n        let args_hash = unsafe {\n            enqueue_public_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.set_public_teardown_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        /// WARNING: This is insecure and should be temporary!\n        /// The oracle hashes the arguments and returns a new args_hash.\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        /// We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        /// b) this is only temporary.\n        let args_hash = unsafe {\n            set_public_teardown_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"93":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, Packable, Serialize};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call_static(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_opcode(gas, address, args)\n}\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"94":{"source":"use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        /// Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr"},"95":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr"},"97":{"source":"use std::hash::{from_field_unsafe as fr_to_fq_unsafe, sha256};\n\nuse dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::utils::point::point_to_bytes;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypt/aes128.nr"},"101":{"source":"use crate::{\n    context::PrivateContext,\n    encrypted_logs::encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    oracle::{\n        notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n        random::random,\n    },\n    utils::{bytes::{be_bytes_31_to_fields, get_random_bytes}, point::get_sign_of_point},\n};\nuse dep::protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n};\nuse std::aes128::aes128_encrypt;\n\npub(crate) global HEADER_CIPHERTEXT_SIZE_IN_BYTES: u32 = 48; // contract_address (32) + ciphertext_length (2) + 16 bytes pkcs#7 AES padding.\n\n/*\n * WHY IS THERE LOTS OF CODE DUPLICATION BETWEEN event.nr and note.nr?\n * It's because there are a few more optimisations that can be done for notes,\n * and so the stuff that looks like duplicated code currently, won't be\n * the same for long.\n * To modularise now feels premature, because we might get that modularisation wrong.\n * Much better (imo) to have a flattened templates for log assembly, because it\n * makes it much easier for us all to follow, it serves as a nice example for the\n * community to follow (if they wish to roll their own log layouts), and it gives\n * us more time to spot common patterns across all kinds of log layouts.\n */\n\n/*\n * LOG CONFIGURATION CHOICES:\n *\n * deliver_to: INPUT as recipient: AztecAddress\n * encrypt_with: aes128 CBC (Cipher Block Chaining)\n * shared_secret: ephemeral\n * shared_secret_randomness_extraction_hash: sha256\n * tag: true\n * tag_from: INPUT as sender: AztecAddress\n *\n * Note-specific:\n * derive_note_randomness_from_shared_secret: false\n *\n */\n\n/*\n * LOG LAYOUT CHOICE:\n *\n * Short explanation:\n * log = [tag, epk, header_ct=[[contract_address, ct_len], pkcs7_pad], ct=[[pt], pkcs7_pad], some bytes padding, some fields padding]\n *\n * Long explanation:\n * tag: Field\n * epk: [Field, u8]\n * header_ct: [[u8; 32], [u8; 2], [u8; 16]]\n * ct: [[u8; 2], [u8; x], [u8; y]]\n *\n * More precisely (in pseudocode):\n *\n * log = [\n *     tag: Field,\n *     Epk: Field,\n *\n *     le_bytes_31_to_fields(\n *\n *         log_bytes: [\n *             eph_pk_sign: [u8; 1],\n *\n *             header_ciphertext: aes_encrypt(\n *                 contract_address: [u8; 32],\n *                 ct_length: [u8; 2],\n *\n *                 // the aes128_encrypt fn automatically inserts padding:\n *                 header_pt_aes_padding: [u8; 14], // `16 - (input.len() % 16)`\n\n *             ): [u8; 48],\n *\n *             ciphertext: aes_encrypt(\n *                 final_pt: [\n *                     pt: {\n *                         note_bytes: {\n *                             storage_slot: [u8; 32],\n *                             note_type_id: [u8; 32],\n *                             ...note: [u8; N * 32],\n *                         }: [u8; N * 32 + 64],\n *                     }: [u8; N * 32 + 64],\n\n *                 ]: [u8; N * 32 + 64],\n *\n *                 // the aes128_encrypt fn automatically inserts padding:\n *                 pt_aes_padding: [u8; 16 - ( (|pt_length| + |pt|) % 16 )]\n *\n *             ): [u8; |pt| + |pt_aes_padding|]\n *                [u8; |ct|]\n *\n *             log_bytes_padding_to_mult_31: [u8; 31 * ceil((1 + 48 + |ct|)/31) - (1 + 48 + |ct|)],\n *                                           [u8; p]\n *\n *         ]: [u8; 1 + 48 + |ct| + p]\n *\n *     ): [Field; (1 + 48 + |ct| + p) / 31]\n *\n *     log_fields_padding: [Field; PRIVATE_LOG_SIZE_IN_FIELDS - 2 - (1 + 48 + |ct| + p) / 31],\n *\n * ]: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\n *\n *\n */\n\n/********************************************************/\n// Disgusting arithmetic on generics\n/********************************************************/\n\n// In this section, instead of initialising arrays with very complicated generic\n// arithmetic, such as:\n// let my_arr: [u8; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))] = [0; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))];\n//... we instead do the arithmetic a little bit at a time, so that the computation\n// can be audited and understood. Now, we can't do arithmetic on generics in the body\n// of a function, so we abusing functions in the following way:\n\n// |full_pt| = |pt| = (N * 32) + 64\nfn get_arr_of_size__full_plaintext<let PT: u32>() -> [u8; PT] {\n    [0; PT]\n}\n\n// |pt_aes_padding| = 16 - (|full_pt| % 16)\nfn get_arr_of_size__plaintext_aes_padding<let FULL_PT: u32>(\n    _full_pt: [u8; FULL_PT],\n) -> [u8; 16 - (FULL_PT % 16)] {\n    [0; 16 - (FULL_PT % 16)]\n}\n\n// |ct| = |full_pt| + |pt_aes_padding|\nfn get_arr_of_size__ciphertext<let FULL_PT: u32, let PT_AES_PADDING: u32>(\n    _full_pt: [u8; FULL_PT],\n    _pt_aes_padding: [u8; PT_AES_PADDING],\n) -> [u8; FULL_PT + PT_AES_PADDING] {\n    [0; FULL_PT + PT_AES_PADDING]\n}\n\n// Ok, so we have the following bytes:\n// eph_pk_sign, header_ciphertext, ciphertext:\n// Let lbwop = 1 + 48 + |ct| // aka log bytes without padding\nfn get_arr_of_size__log_bytes_without_padding<let CT: u32>(_ct: [u8; CT]) -> [u8; 1 + 48 + CT] {\n    [0; 1 + 48 + CT]\n}\n\n// Recall:\n//   lbwop := 1 + 48 + |ct| // aka log bytes without padding\n// We now want to pad b to the next multiple of 31, so as to \"fill\" fields.\n// Let p be that padding.\n// p = 31 * ceil(lbwop / 31) - lbwop\n//   = 31 * ((lbwop + 30) // 31) - lbwop\n//     (because ceil(x / y) = (x + y - 1) // y ).\nfn get_arr_of_size__log_bytes_padding<let LBWOP: u32>(\n    _lbwop: [u8; LBWOP],\n) -> [u8; (31 * ((LBWOP + 30) / 31)) - LBWOP] {\n    [0; (31 * ((LBWOP + 30) / 31)) - LBWOP]\n}\n\n// |log_bytes| = 1 + 48 + |ct| + p // aka log bytes (with padding)\n// Recall:\n//   lbwop := 1 + 48 + |ct|\n//   p is the padding\nfn get_arr_of_size__log_bytes<let LBWOP: u32, let P: u32>(\n    _lbwop: [u8; LBWOP],\n    _p: [u8; P],\n) -> [u8; LBWOP + P] {\n    [0; LBWOP + P]\n}\n\n// The return type is pasted from the LSP's expectation, because it was too difficult\n// to match its weird way of doing algebra. It doesn't know all rules of arithmetic.\n// PT is the plaintext length.\npub(crate) fn get_arr_of_size__log_bytes_padding__from_PT<let PT: u32>() -> [u8; ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49))] {\n    let full_pt = get_arr_of_size__full_plaintext::<PT>();\n    let pt_aes_padding = get_arr_of_size__plaintext_aes_padding(full_pt);\n    let ct = get_arr_of_size__ciphertext(full_pt, pt_aes_padding);\n    let lbwop = get_arr_of_size__log_bytes_without_padding(ct);\n    let p = get_arr_of_size__log_bytes_padding(lbwop);\n    p\n}\n\n// The return type is pasted from the LSP's expectation, because it was too difficult\n// to match its weird way of doing algebra. It doesn't know all rules of arithmetic.\npub(crate) fn get_arr_of_size__log_bytes__from_PT<let PT: u32>() -> [u8; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))] {\n    let full_pt = get_arr_of_size__full_plaintext::<PT>();\n    let pt_aes_padding = get_arr_of_size__plaintext_aes_padding(full_pt);\n    let ct = get_arr_of_size__ciphertext(full_pt, pt_aes_padding);\n    let lbwop = get_arr_of_size__log_bytes_without_padding(ct);\n    let p = get_arr_of_size__log_bytes_padding(lbwop);\n    let log_bytes = get_arr_of_size__log_bytes(lbwop, p);\n    log_bytes\n}\n\n/********************************************************/\n// End of disgusting arithmetic on generics\n/********************************************************/\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<Note, let N: u32>(context: PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\n/// This particular log assembly strategy (AES 128) requires the note (and the\n/// note_id and the storage_slot) to be converted into bytes, because the aes function\n/// operates on bytes; not fields.\n/// NB: The extra `+ 64` bytes is for the note_id and the storage_slot of the note:\nfn compute_note_plaintext_for_this_strategy<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n) -> [u8; N * 32 + 64]\nwhere\n    Note: NoteInterface<N>,\n{\n    let packed_note = note.pack_content();\n\n    let note_header = note.get_header();\n    let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n\n    // TODO(#10952): The following can be reduced to 7 bits\n    let note_type_id_bytes: [u8; 32] = Note::get_note_type_id().to_be_bytes();\n\n    // We combine all the bytes into plaintext_bytes:\n    let mut plaintext_bytes: [u8; N * 32 + 64] = [0; N * 32 + 64];\n    for i in 0..32 {\n        plaintext_bytes[i] = storage_slot_bytes[i];\n        plaintext_bytes[32 + i] = note_type_id_bytes[i];\n    }\n\n    for i in 0..packed_note.len() {\n        let bytes: [u8; 32] = packed_note[i].to_be_bytes();\n        for j in 0..32 {\n            plaintext_bytes[64 + i * 32 + j] = bytes[j];\n        }\n    }\n\n    plaintext_bytes\n}\n\nfn compute_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteInterface<N>,\n{\n    // *****************************************************************************\n    // Compute the shared secret\n    // *****************************************************************************\n\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n    let ciphertext_shared_secret = derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient); // not to be confused with the tagging shared secret\n\n    // TODO: also use this shared secret for deriving note randomness.\n\n    // *****************************************************************************\n    // Compute the plaintext\n    // *****************************************************************************\n\n    let final_plaintext_bytes = compute_note_plaintext_for_this_strategy(note, storage_slot);\n\n    // *****************************************************************************\n    // Convert the plaintext into whatever format the encryption function expects\n    // *****************************************************************************\n\n    // Already done for this strategy: AES expects bytes.\n\n    // *****************************************************************************\n    // Encrypt the plaintext\n    // *****************************************************************************\n\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    let ciphertext_bytes = aes128_encrypt(final_plaintext_bytes, iv, sym_key);\n\n    // |full_pt| = |pt_length| + |pt|\n    // |pt_aes_padding| = 16 - (|full_pt| % 16)\n    // or... since a % b is the same as a - b * (a // b) (integer division), so:\n    // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n    // |ct| = |full_pt| + |pt_aes_padding|\n    //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n    //      = 16 + 16 * (|full_pt| // 16)\n    //      = 16 * (1 + |full_pt| // 16)\n    assert(ciphertext_bytes.len() == 16 * (1 + ((N * 32) + 64) / 16));\n\n    // *****************************************************************************\n    // Compute the header ciphertext\n    // *****************************************************************************\n\n    let contract_address = context.this_address();\n    let contract_address_bytes = contract_address.to_field().to_be_bytes::<32>();\n\n    let mut header_plaintext: [u8; 32 + 2] = [0; 32 + 2];\n    for i in 0..32 {\n        header_plaintext[i] = contract_address_bytes[i];\n    }\n    let offset = 32;\n    let ciphertext_bytes_length = ciphertext_bytes.len();\n    header_plaintext[offset] = (ciphertext_bytes_length >> 8) as u8;\n    header_plaintext[offset + 1] = ciphertext_bytes_length as u8;\n\n    // TODO: this is insecure and wasteful:\n    // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n    // and again for the proper ciphertext) (at least, I never got the\n    // \"go ahead\" that this would be safe, unfortunately).\n    // \"Wasteful\", because the exact same computation is happening further down.\n    // I'm leaving that 2nd computation where it is, because this 1st computation\n    // will be imminently deleted, when the header logic is deleted.\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n    // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n    // bytes larger than the input in this case.\n    let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n    // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n    assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n    // *****************************************************************************\n    // Prepend / append more bytes of data to the ciphertext, before converting back\n    // to fields.\n    // *****************************************************************************\n\n    let mut log_bytes_padding_to_mult_31 =\n        get_arr_of_size__log_bytes_padding__from_PT::<(N * 32) + 64>();\n    /// Safety: this randomness won't be constrained to be random. It's in the\n    /// interest of the executor of this fn to encrypt with random bytes.\n    log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n    let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<(N * 32) + 64>();\n\n    assert(\n        log_bytes.len() % 31 == 0,\n        \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n    );\n\n    log_bytes[0] = eph_pk_sign_byte;\n    let mut offset = 1;\n    for i in 0..header_ciphertext_bytes.len() {\n        log_bytes[offset + i] = header_ciphertext_bytes[i];\n    }\n    offset += header_ciphertext_bytes.len();\n\n    for i in 0..ciphertext_bytes.len() {\n        log_bytes[offset + i] = ciphertext_bytes[i];\n    }\n    offset += ciphertext_bytes.len();\n\n    for i in 0..log_bytes_padding_to_mult_31.len() {\n        log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n    }\n\n    assert(\n        offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n        \"Something has gone wrong\",\n    );\n\n    // *****************************************************************************\n    // Convert bytes back to fields\n    // *****************************************************************************\n\n    let log_bytes_as_fields = be_bytes_31_to_fields(log_bytes);\n\n    // *****************************************************************************\n    // Prepend / append fields, to create the final log\n    // *****************************************************************************\n\n    // In this strategy, we prepend [tag, eph_pk.x]\n\n    // We assume that the sender wants for the recipient to find the tagged note,\n    // and therefore that they will cooperate and use the correct tag. Usage of a bad\n    // tag will result in the recipient not being able to find the note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut final_log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS] = [0; PRIVATE_LOG_SIZE_IN_FIELDS];\n\n    final_log[0] = tag;\n    final_log[1] = eph_pk.x;\n\n    let mut offset = 2;\n    for i in 0..log_bytes_as_fields.len() {\n        final_log[offset + i] = log_bytes_as_fields[i];\n    }\n    offset += log_bytes_as_fields.len();\n\n    for i in offset..PRIVATE_LOG_SIZE_IN_FIELDS {\n        /// Safety: randomness cannot be constrained.\n        final_log[i] = unsafe { random() };\n    }\n\n    final_log\n}\n\nunconstrained fn compute_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteInterface<N>,\n{\n    compute_log(context, note, storage_slot, recipient, sender)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        assert_note_exists(*context, note);\n\n        let note_hash_counter = note.get_header().note_hash_counter;\n\n        let encrypted_log = compute_log(*context, note, storage_slot, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n// Important note: this function -- although called \"unconstrained\" -- the\n// function is not labelled as `unconstrained`, because we pass a reference to the\n// context.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        assert_note_exists(*context, note);\n\n        let note_hash_counter = note.get_header().note_hash_counter;\n\n        //   Unconstrained logs have both their content and encryption unconstrained - it could occur that the\n        // recipient is unable to decrypt the payload.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        //   It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        let encrypted_log =\n            unsafe { compute_log_unconstrained(*context, note, storage_slot, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\nmod test {\n    use crate::test::{helpers::test_environment::TestEnvironment, mocks::mock_note::MockNote};\n    use dep::protocol_types::address::AztecAddress;\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n        let mut context = env.private();\n\n        // I'm not sure how to initialise an `env` or `context` with a consistent contract address for every run of this test; the value kept changing each time. So I'm going to overwrite it now:\n        context.inputs.call_context.contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        ); // This is an address copied to match the typescript one.\n\n        let storage_slot = 42;\n        let note = MockNote::new(1234).contract_address(context.this_address()).build();\n        let contract_address = context.this_address();\n\n        // All the values in this test were copied over from `encrypted_log_payload.test.ts`\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n\n        let plaintext = super::compute_note_plaintext_for_this_strategy(note, storage_slot);\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let sender = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns([69420, 1337]);\n\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let payload = super::compute_log(context, note, storage_slot, recipient, sender);\n\n        // The following value was generated by `encrypted_log_payload.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let private_log_payload_from_typescript = [\n            0x0e9cffc3ddd746affb02410d8f0a823e89939785bcc8e88ee4f3cae05e737c36,\n            0x0d460c0e434d846ec1ea286e4090eb56376ff27bddc1aacae1d856549f701fa7,\n            0x000194e6d7872db8f61e8e59f23580f4db45d13677f873ec473a409cf61fd04d,\n            0x00334e5fb6083721f3eb4eef500876af3c9acfab0a1cb1804b930606fdb0b283,\n            0x00af91db798fa320746831a59b74362dfd0cf9e7c239f6aad11a4b47d0d870ee,\n            0x00d25a054613a83be7be8512f2c09664bc4f7ab60a127b06584f476918581b8a,\n            0x003840d100d8c1d78d4b68b787ed353ebfb8cd2987503d3b472f614f25799a18,\n            0x003f38322629d401010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n        ];\n\n        assert_eq(payload, private_log_payload_from_typescript);\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/note.nr"},"102":{"source":"// THIS FILE WILL GO AWAY WHEN WE REFACTOR PARTIAL NOTES, SO I DON'T FEEL TOO\n// GUILTY ABOUT THE OBVIOUS CODE DUPLICATION VS note.nr & event.nr.\n\nuse crate::{\n    encrypted_logs::{\n        encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n        log_assembly_strategies::default_aes128::note::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES,\n        },\n    },\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    utils::{bytes::{be_bytes_31_to_fields, get_random_bytes}, point::get_sign_of_point},\n};\nuse dep::protocol_types::{address::{aztec_address::ToField, AztecAddress}, hash::poseidon2_hash};\nuse std::aes128::aes128_encrypt;\n\npub fn compute_partial_public_log_payload<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    plaintext: [u8; N],\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; M] {\n    // *****************************************************************************\n    // Compute the shared secret\n    // *****************************************************************************\n\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n    let ciphertext_shared_secret = derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient); // not to be confused with the tagging shared secret\n\n    // TODO: also use this shared secret for deriving note randomness.\n\n    // *****************************************************************************\n    // Prepend/append extra bytes\n    // *****************************************************************************\n\n    // \"Proper\" meaning the main meaty stuff that we care about.\n    let proper_plaintext: [u8; N] = plaintext;\n    let final_plaintext = proper_plaintext;\n\n    // *****************************************************************************\n    // Convert the plaintext into whatever format the encryption function expects\n    // *****************************************************************************\n\n    // Already done for this strategy: AES expects bytes.\n\n    // *****************************************************************************\n    // Encrypt\n    // *****************************************************************************\n\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    let ciphertext_bytes = aes128_encrypt(final_plaintext, iv, sym_key);\n\n    assert(ciphertext_bytes.len() == 16 * (1 + (2 + N) / 16));\n\n    // *****************************************************************************\n    // Compute the header ciphertext\n    // *****************************************************************************\n\n    let contract_address_bytes = contract_address.to_field().to_be_bytes::<32>();\n\n    let mut header_plaintext: [u8; 32 + 2] = [0; 32 + 2];\n    for i in 0..32 {\n        header_plaintext[i] = contract_address_bytes[i];\n    }\n    let offset = contract_address_bytes.len();\n\n    let ciphertext_bytes_length = ciphertext_bytes.len();\n    header_plaintext[offset] = (ciphertext_bytes_length >> 8) as u8;\n    header_plaintext[offset + 1] = ciphertext_bytes_length as u8;\n\n    // TODO: this is insecure and wasteful:\n    // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n    // and again for the proper ciphertext) (at least, I never got the\n    // \"go ahead\" that this would be safe, unfortunately).\n    // \"Wasteful\", because the exact same computation is happening further down.\n    // I'm leaving that 2nd computation where it is, because this 1st computation\n    // will be imminently deleted, when the header logic is deleted.\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n    // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n    // bytes larger than the input in this case.\n    let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n    // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n    assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n    // *****************************************************************************\n    // Prepend / append more bytes of data to the ciphertext, before converting back\n    // to fields.\n    // *****************************************************************************\n\n    let mut log_bytes_padding_to_mult_31 = get_arr_of_size__log_bytes_padding__from_PT::<2 + N>();\n    log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n    let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<2 + N>();\n\n    log_bytes[0] = eph_pk_sign_byte;\n    let mut offset = 1;\n    for i in 0..header_ciphertext_bytes.len() {\n        log_bytes[offset + i] = header_ciphertext_bytes[i];\n    }\n    offset += header_ciphertext_bytes.len();\n\n    for i in 0..ciphertext_bytes.len() {\n        log_bytes[offset + i] = ciphertext_bytes[i];\n    }\n    offset += ciphertext_bytes.len();\n\n    for i in 0..log_bytes_padding_to_mult_31.len() {\n        log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n    }\n\n    // *****************************************************************************\n    // Convert bytes back to fields\n    // *****************************************************************************\n\n    let log_bytes_as_fields = be_bytes_31_to_fields(log_bytes);\n\n    // *****************************************************************************\n    // Prepend / append fields, to create the final log\n    // *****************************************************************************\n\n    // We don't add any extra random padding.\n    // Whilst we do this in note.nr, we won't do it for this partial_note log, because it's going to get stored in public, and so:\n    // - The nature of the tx is going to be leaked.\n    // - We therefore don't care if it's padded to obscure the length of the actual ciphertext.\n    // Note: partial logs are going to be greatly refactored, soon.\n\n    // We assume that the sender wants for the recipient to find the tagged note, and therefore that they will cooperate\n    // and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the note\n    // automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    // Silo the tag with contract address.\n    // This is done by the kernel circuit to the private logs, but since the partial log will be finalized and emitted\n    // in public as unencrypted log, its tag is not siloed at the moment.\n    // To avoid querying logs using two types of tags, we silo the tag manually here.\n    // TODO(#10273) This should be done by the AVM when it's processing the raw logs instead of their hashes.\n    let siloed_tag = poseidon2_hash([contract_address.to_field(), tag]);\n\n    // Temporary hack so that the partial public log remains the same format.\n    // It should return field array and make the tag the first field as compute_private_log_payload does.\n\n    let mut final_log: [Field; M] = [0; M];\n\n    final_log[0] = siloed_tag;\n    final_log[1] = eph_pk.x;\n\n    let mut offset = 2;\n    for i in 0..log_bytes_as_fields.len() {\n        final_log[offset + i] = log_bytes_as_fields[i];\n    }\n\n    final_log\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/partial_note.nr"},"107":{"source":"use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::Hash,\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/hash.nr"},"114":{"source":"use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        /// Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/history/public_storage.nr"},"116":{"source":"use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::embedded_curve_ops::multi_scalar_mul;\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr"},"117":{"source":"use std::{\n    embedded_curve_ops::fixed_base_scalar_mul, field::bn254::decompose,\n    hash::from_field_unsafe as fr_to_fq_unsafe,\n};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr"},"118":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    /// Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"124":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"133":{"source":"use std::static_assert;\n\nuse crate::{\n    context::unconstrained_context::UnconstrainedContext, note::note_header::NoteHeader,\n    oracle::note_discovery::deliver_note, utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PRIVATE_LOG_SIZE_IN_FIELDS},\n    hash::compute_note_hash_nonce,\n};\n\n// We reserve two fields in the note log that are not part of the note content: one for the storage slot, and one for\n// the note type id.\nglobal NOTE_LOG_RESERVED_FIELDS: u32 = 2;\npub global MAX_NOTE_SERIALIZED_LEN: u32 = PRIVATE_LOG_SIZE_IN_FIELDS - NOTE_LOG_RESERVED_FIELDS;\n\npub struct NoteHashesAndNullifier {\n    pub note_hash: Field,\n    pub unique_note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Processes a log given its plaintext by trying to find notes encoded in it. This process involves the discovery of\n/// the nonce of any such notes, which requires knowledge of the transaction hash in which the notes would've been\n/// created, along with the list of unique note hashes in said transaction.\n///\n/// Additionally, this requires a `compute_note_hash_and_nullifier` lambda that is able to compute these values for any\n/// note in the contract given their contents. A typical implementation of such a function would look like this:\n///\n/// ```\n/// |packed_note_content, note_header, note_type_id| {\n///     let hashes = if note_type_id == MyNoteType::get_note_type_id() {\n///         assert(packed_note_content.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///         dep::aztec::note::utils::compute_note_hash_and_optionally_a_nullifier(\n///             MyNoteType::unpack_content,\n///             note_header,\n///             true,\n///             storage_slot,\n///             packed_note_content.storage(),\n///         )\n///     } else {\n///         panic(f\"Unknown note type id {note_type_id}\")\n///     };\n///\n///     Option::some(dep::aztec::oracle::management::NoteHashesAndNullifier {\n///         note_hash: hashes[0],\n///         unique_note_hash: hashes[1],\n///         inner_nullifier: hashes[3],\n///     })\n/// }\n/// ```\npub unconstrained fn do_process_log<Env>(\n    context: UnconstrainedContext,\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: fn[Env](BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>, NoteHeader, Field, Field) -> Option<NoteHashesAndNullifier>,\n) {\n    let (storage_slot, note_type_id, packed_note_content) =\n        destructure_log_plaintext(log_plaintext);\n\n    // We need to find the note's nonce, which is the one that results in one of the unique note hashes from tx_hash\n    for_each_in_bounded_vec(\n        unique_note_hashes_in_tx,\n        |expected_unique_note_hash, i| {\n            let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n            let header = NoteHeader::new(context.this_address(), candidate_nonce);\n\n            // TODO(#11157): handle failed note_hash_and_nullifier computation\n            let hashes = compute_note_hash_and_nullifier(\n                packed_note_content,\n                header,\n                storage_slot,\n                note_type_id,\n            )\n                .unwrap();\n\n            if hashes.unique_note_hash == expected_unique_note_hash {\n                // TODO(#10726): push these into a vec to deliver all at once instead of having one oracle call per note\n\n                assert(\n                    deliver_note(\n                        context.this_address(), // TODO(#10727): allow other contracts to deliver notes\n                        storage_slot,\n                        candidate_nonce,\n                        packed_note_content,\n                        hashes.note_hash,\n                        hashes.inner_nullifier,\n                        tx_hash,\n                        recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n\n                // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n                // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n                // notes containing random values in order to hide their contents.\n            }\n        },\n    );\n}\n\nunconstrained fn destructure_log_plaintext(\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>) {\n    assert(log_plaintext.len() >= NOTE_LOG_RESERVED_FIELDS);\n\n    // If NOTE_LOG_RESERVED_FIELDS is changed, causing the assertion below to fail, then the declarations for\n    // `storage_slot` and `note_type_id` must be updated as well.\n    static_assert(\n        NOTE_LOG_RESERVED_FIELDS == 2,\n        \"unepxected value for NOTE_LOG_RESERVED_FIELDS\",\n    );\n    let storage_slot = log_plaintext.get(0);\n    let note_type_id = log_plaintext.get(1);\n\n    let packed_note_content = array::subbvec(log_plaintext, NOTE_LOG_RESERVED_FIELDS);\n\n    (storage_slot, note_type_id, packed_note_content)\n}\n\nfn for_each_in_bounded_vec<T, let MaxLen: u32, Env>(\n    vec: BoundedVec<T, MaxLen>,\n    f: fn[Env](T, u32) -> (),\n) {\n    for i in 0..MaxLen {\n        if i < vec.len() {\n            f(vec.get_unchecked(i), i);\n        }\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/note/discovery/mod.nr"},"134":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_header::NoteHeader,\n    note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_nullify_internal, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note_content = Note::pack_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        packed_note_content,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note, storage_slot)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note, storage_slot: Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note, storage_slot);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"136":{"source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field) -> Self {\n        Self { note, storage_slot }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"138":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\nuse dep::protocol_types::constants::{\n    GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note_content: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note_content[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(context: PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n}\n\nfn check_note_content<let N: u32>(\n    packed_note_content: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note_content, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (Note, Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    /// Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    /// is check that the metadata is correct, and that the note exists.\n    let note = unsafe { get_note_internal(storage_slot) };\n    check_note_header(*context, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    /// Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::array::collapse(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\n        BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.pack_content();\n            check_note_header(*context, note);\n            check_note_content(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\nwhere\n    Note: NoteInterface<N>,\n{\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length,\n    )[0]\n        .expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteInterface<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteInterface<N>,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr"},"143":{"source":"use crate::note::constants::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{NoteStatus, PropertySelector, Select, Sort};\nuse crate::note::note_interface::NoteInterface;\nuse dep::protocol_types::traits::ToField;\nuse std::option::Option;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    pub selects: BoundedVec<Option<Select>, N>,\n    pub sorts: BoundedVec<Option<Sort>, N>,\n    pub limit: u32,\n    pub offset: u32,\n    pub status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N>\n    where\n        Note: NoteInterface<N>,\n    {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE,\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T,\n    ) -> Self\n    where\n        T: ToField,\n    {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        if !dep::std::runtime::is_unconstrained() {\n            assert_constant(limit);\n        }\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr"},"144":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\n    utils::array,\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    compute_unique_note_hash,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header, storage_slot);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash(storage_slot);\n    let header = note.get_header();\n    let nonce = header.nonce;\n    let counter = header.note_hash_counter;\n\n    // If same tx note, read request always uses the normal note hash\n    if counter != 0 {\n        note_hash\n    } else {\n        // If the note comes from a different tx, we need to compute the note hash that reached the tree\n        compute_unique_note_hash(\n            nonce,\n            compute_siloed_note_hash(header.contract_address, note_hash),\n        )\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if (header.note_hash_counter != 0) & (header.nonce != 0) {\n        // Non-revertible note, nullified by a revertible nullifier, we need to nullify the note hash that will reach the tree\n        let siloed_note_hash =\n            compute_siloed_note_hash(header.contract_address, note_hash_for_read_request);\n\n        compute_unique_note_hash(header.nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note, storage_slot: Field) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note, storage_slot);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    unpack_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    storage_slot: Field,\n    packed_note_content: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = unpack_content(array::subarray(packed_note_content, 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash(storage_slot);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, note_hash);\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context(storage_slot)\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"147":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"149":{"source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"150":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"151":{"source":"/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field]) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values) };\n}\n\npub unconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field]) {\n    let _ = store_in_execution_cache_oracle(values);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field]) -> Field {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr"},"152":{"source":"use dep::protocol_types::{\n    address::AztecAddress, constants::CONTRACT_INSTANCE_LENGTH, contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    /// Safety: The to_address function combines all values in the instance object to produce an address,\n    /// so by checking that we get the expected address we validate the entire struct.\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"156":{"source":"use crate::utils::array;\nuse dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage {\n            slot: fields[1],\n            value: fields[2],\n            next_index: fields[3] as u32,\n            next_slot: fields[4],\n        },\n        path: array::subarray(fields, 1 + LEAF_PREIMAGE_LENGTH),\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"157":{"source":"use dep::protocol_types::abis::validation_requests::{\n    key_validation_request::KEY_VALIDATION_REQUEST_LENGTH, KeyValidationRequest,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"158":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"161":{"source":"use crate::note::discovery::MAX_NOTE_SERIALIZED_LEN;\nuse dep::protocol_types::address::AztecAddress;\n\n/// Informs PXE of a note's existence so that it can later retrieved by the `getNotes` oracle. The note will be scoped\n/// to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The note's `content` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value is\n/// typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are the\n/// inner hashes, i.e. the raw hashes returned by `NoteInterface::compute_note_hash` and\n/// `NullifiableNote::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree at\n/// `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was sucessfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    content: BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        content,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    content: BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/note_discovery.nr"},"162":{"source":"use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note_content,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        packed_note_content,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note_content: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    let _ = notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    sync_notes_oracle_wrapper();\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let note_content = array::subarray(fields, read_offset + 2);\n\n            let mut note = Note::unpack_content(note_content);\n            note.set_header(NoteHeader { contract_address, nonce, note_hash_counter });\n\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\n}\n\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\n/// Includes the last known index used to send a note tagged with this secret.\n/// For this to work, PXE must know the ivsk_m of the sender.\n/// For the recipient's side, only the address is needed.\npub unconstrained fn get_indexed_tagging_secret_as_sender(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> IndexedTaggingSecret {\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\n    IndexedTaggingSecret::deserialize(result)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\n/// for later querying via the `get_notes` oracle.\npub fn sync_notes() {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        sync_notes_oracle_wrapper();\n    }\n}\n\nunconstrained fn sync_notes_oracle_wrapper() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"163":{"source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/random.nr"},"164":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Packable};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"166":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"171":{"source":"use crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // TODO: This function is still around because of a stale blacklist token. It should most likely be nuked. If you\n    // need this functionality use partial notes instead.\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr"},"173":{"source":"use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: U128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    // docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read(self) -> T {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub unconstrained fn read(self) -> T {\n        WithHash::unconstrained_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PrivateContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub fn read(self) -> T {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr"},"174":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"193":{"source":"/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    /// Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr"},"195":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"196":{"source":"use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    vec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(vec.storage(), offset), vec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr"},"197":{"source":"use crate::oracle::random::random;\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole bytes.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted into a Field. If the last chunk\n/// is less than 31 bytes long, then only the relevant bytes are considered.\n/// For example, [1, 10, 3] is encoded as [1 * 256^2 + 10 * 256 + 3]\n/// Note: ceil(N / 31) = (N + 30) / 31\npub fn be_bytes_31_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = [0; (N + 30) / 31];\n\n    // There are N / 31 whole fields that can be populated.\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    // Note: if 31 divides N, then this loop does not execute.\n    // ceil(N/31) - floor(N/31) = 1, unless 31 divides N, in which case it's 0.\n    for _ in 0..((N + 30) / 31) - (N / 31) {\n        let mut final_field = 0;\n        let final_field_idx = fields.len() - 1;\n        let final_offset = final_field_idx * 31;\n        // N - ((N / 31) * 31) = N - floor(N/31) * 31 = the number of bytes to go in the final field.\n        for j in 0..N - ((N / 31) * 31) {\n            // Shift the existing value left by 8 bits and add the new byte\n            final_field = final_field * 256 + bytes[final_offset + j] as Field;\n        }\n\n        fields[final_field_idx] = final_field;\n    }\n\n    fields\n}\n\npub fn le_bytes_31_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = [0; (N + 30) / 31];\n\n    // There are N / 31 whole fields that can be populated.\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            let k = 31 - j - 1; // iterate in reverse.\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + k] as Field;\n        }\n        fields[i] = field;\n    }\n\n    // Note: if 31 divides N, then this loop does not execute.\n    // ceil(N/31) - floor(N/31) = 1, unless 31 divides N, in which case it's 0.\n    for _ in 0..((N + 30) / 31) - (N / 31) {\n        let mut final_field = 0;\n        let final_field_idx = fields.len() - 1;\n        let final_offset = final_field_idx * 31;\n        // N - ((N / 31) * 31) = N - floor(N/31) * 31 = the number of bytes to go in the final field.\n        for j in 0..N - ((N / 31) * 31) {\n            let k = (N - ((N / 31) * 31)) - j - 1; // iterate in reverse.\n            // Shift the existing value left by 8 bits and add the new byte\n            final_field = final_field * 256 + bytes[final_offset + k] as Field;\n        }\n        fields[final_field_idx] = final_field;\n    }\n\n    fields\n}\n\n/// Converts an input array of fields into a single array of bytes.\n/// Each input field must contain only 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte\n/// chunks are concatenated back together in the order of the original fields.\n///\n/// It appears that the original author of this function wants to give the caller some control\n/// over the number of bytes that are returned: the final field can be mapped to fewer than 31 bytes,\n/// based on the caller's choice of M.\n/// Given the input is N fields, and each field (except the last) is mapped to 31 bytes,\n/// we definitely need M > (N - 1) * 31 to cover those first (N - 1) fields. Hence the static assertion.\n/// TODO: this is the same as the \"le\" version of this function, save for the `field.to_be_bytes()` calls. I tried passing the conversion function in as a parameter, to reduce code duplication, but couldn't get it to work.\npub fn fields_to_be_bytes_31<let N: u32, let M: u32>(fields: [Field; N]) -> [u8; M] {\n    let mut bytes = [0; M];\n\n    std::static_assert(M > (N - 1) * 31, \"Not enough output bytes specified\");\n    // We make this assertion to keep the logic simpler:\n    std::static_assert(N * 31 >= M, \"Too many output bytes specified.\");\n\n    for i in 0..N - 1 {\n        let field = fields[i];\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes[i * 31 + j] = field_as_bytes[j];\n        }\n    }\n\n    let final_field = fields[N - 1];\n    final_field.assert_max_bit_size::<8 * (M - ((N - 1) * 31))>();\n\n    let final_field_as_bytes: [u8; M - ((N - 1) * 31)] = final_field.to_be_bytes();\n\n    let start_index = (N - 1) * 31;\n    for j in 0..M - ((N - 1) * 31) {\n        bytes[start_index + j] = final_field_as_bytes[j];\n    }\n\n    bytes\n}\n\n/// Converts an input array of fields into a single array of bytes.\n/// Each input field must contain only 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 little-endian bytes, and the resulting 31-byte\n/// chunks are concatenated back together in the order of the original fields. You'll\n/// end up with quite a strange ordering of bytes if you use this particular function.\npub fn fields_to_le_bytes_31<let N: u32, let M: u32>(fields: [Field; N]) -> [u8; M] {\n    let mut bytes = [0; M];\n\n    std::static_assert(M > (N - 1) * 31, \"Not enough output bytes specified\");\n    // We make this assertion to keep the logic simpler:\n    std::static_assert(N * 31 >= M, \"Too many output bytes specified.\");\n\n    for i in 0..N - 1 {\n        let field = fields[i];\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_le_bytes();\n\n        for j in 0..31 {\n            bytes[i * 31 + j] = field_as_bytes[j];\n        }\n    }\n\n    let final_field = fields[N - 1];\n    final_field.assert_max_bit_size::<8 * (M - ((N - 1) * 31))>();\n\n    let final_field_as_bytes: [u8; M - ((N - 1) * 31)] = final_field.to_le_bytes();\n\n    let start_index = (N - 1) * 31;\n    for j in 0..M - ((N - 1) * 31) {\n        bytes[start_index + j] = final_field_as_bytes[j];\n    }\n\n    bytes\n}\n\n/// Converts an input array of fields into a single array of bytes.\n/// Each field is converted to a 32-byte big-endian array.\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end,\n/// every 32 bytes. Be careful that such a gap doesn't leak information!\npub fn fields_to_be_bytes_32<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field = fields[i];\n        let field_as_bytes: [u8; 32] = field.to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\nunconstrained fn byte_to_bits(byte: u8) -> [u1; 8] {\n    let mut mut_byte = byte;\n    let mut bits: [u1; 8] = [0; 8];\n    for i in 0..8 {\n        bits[i] = (mut_byte & 1) as u1;\n        mut_byte >>= 1;\n    }\n    bits\n}\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n\n/// Returns as many random bits as specified through N.\nunconstrained fn get_random_bits<let N: u32>() -> [u1; N] {\n    // Note: (N + 7) / 8 = ceil(N / 8)\n    let bytes = get_random_bytes::<(N + 7) / 8>();\n    let mut bits: [u1; N] = [0; N];\n    for i in 0..bytes.len() - 1 {\n        let mut byte = bytes[i];\n        for j in 0..8 {\n            let bit_idx = i * 8 + j;\n            bits[bit_idx] = (byte & 1) as u1;\n            byte >>= 1;\n        }\n    }\n\n    // N - ((N / 8) * 8) = N - floor(N/8) * 8 = the number of bits remaining.\n    let byte_idx = bytes.len() - 1;\n    let mut byte = bytes[byte_idx];\n    for j in 0..N - ((N / 8) * 8) {\n        let bit_idx = (byte_idx) * 8 + j;\n        bits[bit_idx] = (byte & 1) as u1;\n        byte >>= 1;\n    }\n\n    bits\n}\n\n/// Returns random bits, in chunks, according to the provided numeric generics.\nunconstrained fn get_chunks_of_random_bits<let NUM_CHUNKS: u32, let NUM_BITS: u32>() -> [[u1; NUM_BITS]; NUM_CHUNKS] {\n    let random_bits = get_random_bits::<NUM_CHUNKS * NUM_BITS>();\n    let mut chunks: [[u1; NUM_BITS]; NUM_CHUNKS] = [[0; NUM_BITS]; NUM_CHUNKS];\n    for i in 0..NUM_CHUNKS {\n        let mut chunk: [u1; NUM_BITS] = [0; NUM_BITS];\n        for j in 0..NUM_BITS {\n            chunk[j] = random_bits[i * NUM_BITS + j];\n        }\n        chunks[i] = chunk;\n    }\n    chunks\n}\n\n/**\n * Helper fn for be/le_bytes_to_padded_fields() fns.\n */\nfn pad_31_byte_fields_with_random_bits<let N: u32>(input: [Field; N]) -> [Field; N] {\n    /// Safety: we can't constrain whether or not the returned bits are actually random;\n    /// we can only rely on it being in the caller's best interest.\n    let chunks_of_random_bits = unsafe { get_chunks_of_random_bits::<((N + 30) / 31), 6>() };\n    let mut fields = input;\n    // We push the random bits to the \"big end\" of each field\n    let TWO_POW_248 = 0x100000000000000000000000000000000000000000000000000000000000000;\n    for i in 0..fields.len() {\n        let mut shift = TWO_POW_248;\n        for j in 0..5 {\n            fields[i] += shift * chunks_of_random_bits[i][j] as Field;\n            shift *= 2;\n        }\n\n        // This might overflow the field modulus, so we need to be careful.\n        // By this point, shift = 2 ^ 253, so will populate the 254th bit (counting from 1)\n        let field_with_254th_bit = fields[i] + shift * chunks_of_random_bits[i][6 - 1] as Field;\n\n        // Expensive comparison (one for each field), but it's important -- if we want to hide that we were\n        // working with bytes -- that we include the 254th random bit when it fits.\n        fields[i] = if (fields[i].lt(field_with_254th_bit)) {\n            field_with_254th_bit\n        } else {\n            fields[i]\n        };\n    }\n    fields\n}\n\n/**\n * The above functions be_bytes_31_to_fields and le_bytes_31_to_fields have a privacy-leakage problem:\n * they result in fields which are all 248-bits instead of 254-bits.\n * That means if the above functions are used to convert a ciphertext from bytes to\n * fields, it leaks (with very high probability) to all observers of the log that the\n * ciphertext was created with a \"bit twiddly\" encryption scheme like AES.\n * This reduces privacy sets for all apps.\n *\n * This function seeks to \"pad\" those remaining 6 bits with randomness, so that all\n * encrypted logs look even more similar (full fields of 254-bits of random-looking\n * information). Of course, this adds some extra constraints, unfortunately.\n */\npub fn le_bytes_to_padded_fields<let N: u32>(input: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = le_bytes_31_to_fields(input);\n    pad_31_byte_fields_with_random_bits(fields)\n}\n\npub fn be_bytes_to_padded_fields<let N: u32>(input: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = be_bytes_31_to_fields(input);\n    pad_31_byte_fields_with_random_bits(fields)\n}\n\nmod test {\n    use crate::utils::bytes::{\n        be_bytes_31_to_fields, fields_to_be_bytes_31, fields_to_le_bytes_31, le_bytes_31_to_fields,\n    };\n\n    // BE BYTES\n\n    #[test]\n    fn test_be_bytes_31_to_1_field() {\n        let input = [\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31,\n        ];\n        let output = be_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n    }\n\n    #[test]\n    fn test_1_field_to_be_bytes_31() {\n        let input = [0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f];\n        let output: [u8; 31] = fields_to_be_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n                24, 25, 26, 27, 28, 29, 30, 31,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_be_bytes_31() {\n        let input = [1, 2, 3];\n        let output: [u8; 93] = fields_to_be_bytes_31(input);\n\n        // Each field should occupy 31 bytes with the non-zero value being placed in the last one.\n        assert_eq(\n            output,\n            [\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_fewer_be_bytes() {\n        let input = [1, 2, 3];\n        let output: [u8; 63] = fields_to_be_bytes_31(input);\n        println(f\"output: {output}\");\n\n        // First 2 fields should occupy 31 bytes with the non-zero value being placed in the last one while the last\n        // field should occupy 1 byte. There is not information destruction here because the last field fits into\n        // 1 byte.\n        assert_eq(\n            output,\n            [\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 2, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_be_bytes_31_to_2_fields() {\n        let input = [\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\n            47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        ];\n        let output = be_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n        assert_eq(output[1], 0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b);\n    }\n\n    #[test]\n    fn test_2_fields_to_be_bytes_31() {\n        let input = [\n            0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,\n            0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b,\n        ];\n        let output: [u8; 62] = fields_to_be_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n                24, 25, 26, 27, 28, 29, 30, 31, 0, 0, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\n                43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_large_random_be_bytes_31_input_to_fields_and_back(input: [u8; 128]) {\n        let output = be_bytes_31_to_fields(input);\n        let input_back: [u8; 128] = fields_to_be_bytes_31(output);\n\n        assert_eq(input, input_back);\n    }\n\n    // I need to get an array of random values lower than 2^248 on input and since there is no u248 type and modulo\n    // operation is not supported on a Field (to do field % 2^248), I will take multiple smaller values and combine\n    // them to get a value lower than 2^248.\n    #[test]\n    fn test_large_random_input_to_be_bytes_31_and_back(\n        input1: [u64; 5],\n        input2: [u64; 5],\n        input3: [u64; 5],\n        input4: [u32; 5],\n        input5: [u16; 5],\n        input6: [u8; 5],\n    ) {\n        let mut input = [0; 5];\n        for i in 0..5 {\n            input[i] = (input1[i] as Field * 2.pow_32(184))\n                + (input2[i] as Field * 2.pow_32(120))\n                + (input3[i] as Field * 2.pow_32(56))\n                + (input4[i] as Field * 2.pow_32(24))\n                + (input5[i] as Field * 2.pow_32(8))\n                + input6[i] as Field;\n        }\n\n        let output: [u8; 155] = fields_to_be_bytes_31(input);\n        let input_back = be_bytes_31_to_fields(output);\n\n        assert_eq(input, input_back);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_too_few_destination_be_bytes() {\n        // We should get an error here because first field gets converted to 31 bytes and the second field needs\n        // at least 2 bytes but we provide it with 1.\n        let input = [1, 256];\n        let _ignored_result: [u8; 32] = fields_to_be_bytes_31(input);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_fields_to_be_bytes_31_value_too_large() {\n        let input = [2.pow_32(248)]; // this number is 1 bit larger than 31 bytes.\n        let _ignored_result: [u8; 31] = fields_to_be_bytes_31(input);\n    }\n\n    #[test]\n    fn test_fields_to_be_bytes_31_max_value() {\n        let input = [2.pow_32(248) - 1];\n        let result: [u8; 31] = fields_to_be_bytes_31(input);\n\n        // We check that all the bytes were set to max value (255)\n        for i in 0..31 {\n            assert_eq(result[i], 255);\n        }\n    }\n\n    // LE BYTES\n\n    #[test]\n    fn test_le_bytes_31_to_1_field() {\n        let input = [\n            31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,\n            9, 8, 7, 6, 5, 4, 3, 2, 1,\n        ];\n        let output = le_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n    }\n\n    #[test]\n    fn test_1_field_to_le_bytes_31() {\n        let input = [0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f];\n        let output: [u8; 31] = fields_to_le_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11,\n                10, 9, 8, 7, 6, 5, 4, 3, 2, 1,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_le_bytes_31() {\n        let input = [1, 2, 3];\n        let output: [u8; 93] = fields_to_le_bytes_31(input);\n\n        // Each field should occupy 31 bytes with the non-zero value being placed in the last one.\n        assert_eq(\n            output,\n            [\n                1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_fewer_le_bytes() {\n        let input = [1, 2, 3];\n        let output: [u8; 63] = fields_to_le_bytes_31(input);\n\n        // First 2 fields should occupy 31 bytes with the non-zero value being placed in the last one while the last\n        // field should occupy 1 byte. There is not information destruction here because the last field fits into\n        // 1 byte.\n        assert_eq(\n            output,\n            [\n                1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_le_bytes_31_to_2_fields() {\n        let input = [\n            59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38,\n            37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,\n            15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1,\n        ];\n        let output = le_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b);\n        assert_eq(output[1], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c);\n    }\n\n    #[test]\n    fn test_2_fields_to_le_bytes_31() {\n        let input = [\n            0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,\n            0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b,\n        ];\n        let output: [u8; 62] = fields_to_le_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11,\n                10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47,\n                46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 0, 0, 0,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_large_random_le_bytes_input_to_fields_and_back(input: [u8; 128]) {\n        let output = le_bytes_31_to_fields(input);\n        let input_back: [u8; 128] = fields_to_le_bytes_31(output);\n\n        assert_eq(input, input_back);\n    }\n\n    // I need to get an array of random values lower than 2^248 on input and since there is no u248 type and modulo\n    // operation is not supported on a Field (to do field % 2^248), I will take multiple smaller values and combine\n    // them to get a value lower than 2^248.\n    #[test]\n    fn test_large_random_input_to_le_bytes_and_back(\n        input1: [u64; 5],\n        input2: [u64; 5],\n        input3: [u64; 5],\n        input4: [u32; 5],\n        input5: [u16; 5],\n        input6: [u8; 5],\n    ) {\n        let mut input = [0; 5];\n        for i in 0..5 {\n            input[i] = (input1[i] as Field * 2.pow_32(184))\n                + (input2[i] as Field * 2.pow_32(120))\n                + (input3[i] as Field * 2.pow_32(56))\n                + (input4[i] as Field * 2.pow_32(24))\n                + (input5[i] as Field * 2.pow_32(8))\n                + input6[i] as Field;\n        }\n\n        let output: [u8; 155] = fields_to_le_bytes_31(input);\n        let input_back = le_bytes_31_to_fields(output);\n\n        assert_eq(input, input_back);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_too_few_destination_le_bytes() {\n        // We should get an error here because first field gets converted to 31 bytes and the second field needs\n        // at least 2 bytes but we provide it with 1.\n        let input = [1, 256];\n        let _ignored_result: [u8; 32] = fields_to_le_bytes_31(input);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_fields_to_le_bytes_31_value_too_large() {\n        let input = [2.pow_32(248)];\n        let _ignored_result: [u8; 31] = fields_to_le_bytes_31(input);\n    }\n\n    #[test]\n    fn test_fields_to_le_bytes_31_max_value() {\n        let input = [2.pow_32(248) - 1];\n        let result: [u8; 31] = fields_to_le_bytes_31(input);\n\n        // We check that all the bytes were set to max value (255)\n        for i in 0..31 {\n            assert_eq(result[i], 255);\n        }\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/utils/bytes.nr"},"198":{"source":"struct ComparatorEnum {\n    pub EQ: u8,\n    pub NEQ: u8,\n    pub LT: u8,\n    pub LTE: u8,\n    pub GT: u8,\n    pub GTE: u8,\n}\n\npub global Comparator: ComparatorEnum =\n    ComparatorEnum { EQ: 1, NEQ: 2, LT: 3, LTE: 4, GT: 5, GTE: 6 };\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::Comparator;\n    use super::compare;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            !compare(lhs, Comparator.LTE, rhs),\n            \"Expected lhs to not be less than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/utils/comparison.nr"},"201":{"source":"use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::point_to_bytes;\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"204":{"source":"use crate::{\n    context::{PublicContext, UnconstrainedContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn unconstrained_public_storage_read(\n        context: UnconstrainedContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            /// Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr"},"221":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"257":{"source":"use crate::{point::Point, traits::{Deserialize, Empty, Serialize}};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pub pk_m: Point,\n    pub sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr"},"264":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        MAX_FIELD_VALUE,\n    },\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse ec::{pow, sqrt};\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        function_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            function_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"279":{"source":"use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr"},"280":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"281":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash},\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::{constants::TWO_POW_64, utils::{arrays::array_concat, field::field_from_bytes}};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_contract_class_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_contract_class_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; N * 32];\n    for offset in 0..N {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"282":{"source":"use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr"},"291":{"source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr"},"297":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"298":{"source":"use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr"},"307":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"310":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"323":{"source":"use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"327":{"source":"use crate::traits::{Packable, ToField};\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for U128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self.to_field()]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"328":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 2;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        // We use little-endian ordering to match the order in which U128 defines its limbs.\n        // This is necessary because of how Noir handles serialization:\n        // - When calling a contract function from TypeScript, the serialization in encoder.ts gets used and then Noir\n        //   deserializes using its intrinsic serialization logic (based on the limb order in the struct).\n        // - When calling a contract function from another function, the `serialize` method is invoked on the type\n        //   first.\n        // For this reason if we didn't use the ordering of U128 limbs here and in encoder.ts we would get an arguments\n        // hash mismatch.\n        // The below warning is due to visibility in noir stdlib.\n        [self.lo, self.hi]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_u64s_le(fields[0] as u64, fields[1] as u64)\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"344":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    /// Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    /// of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    /// Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"345":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"347":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"352":{"source":"// Elliptic curve implementation\n// Overview\n// ========\n// The following three elliptic curve representations are admissible:\npub mod tecurve; // Twisted Edwards curves\npub mod swcurve; // Elliptic curves in Short Weierstrass form\npub mod montcurve; // Montgomery curves\npub mod consts; // Commonly used curve presets\n//\n// Note that Twisted Edwards and Montgomery curves are (birationally) equivalent, so that\n// they may be freely converted between one another, whereas Short Weierstrass curves are\n// more general. Diagramatically:\n//\n// tecurve == montcurve `subset` swcurve\n//\n// Each module is further divided into two submodules, 'affine' and 'curvegroup', depending\n// on the preferred coordinate representation. Affine coordinates are none other than the usual\n// two-dimensional Cartesian coordinates used in the definitions of these curves, whereas\n// 'CurveGroup' coordinates (terminology borrowed from Arkworks, whose conventions we try\n// to follow) are special coordinate systems with respect to which the group operations may be\n// implemented more efficiently, usually by means of an appropriate choice of projective coordinates.\n//\n// In each of these submodules, there is a Point struct and a Curve struct, the former\n// representing a point in the coordinate system and the latter a curve configuration.\n//\n// Points\n// ======\n// Points may be instantiated using the associated function `new`, which takes coordinates\n// as its arguments. For instance,\n//\n// `let p = swcurve::Point::new(1,1);`\n//\n// The additive identity may be constructed by a call to the associated function `zero` of no\n// arguments:\n//\n// `let zero = swcurve::Point::zero();`\n//\n// Points may be tested for equality by calling the method `eq`:\n//\n// `let pred = p.eq(zero);`\n//\n// There is also the method `is_zero` to explicitly check whether a point is the additive identity:\n//\n// `constrain pred == p.is_zero();`\n//\n// Points may be negated by calling the `negate` method and converted to CurveGroup (or affine)\n// coordinates by calling the `into_group` (resp. `into_affine`) method on them. Finally,\n// Points may be freely mapped between their respective Twisted Edwards and Montgomery\n// representations by calling the `into_montcurve` or `into_tecurve` methods. For mappings\n// between Twisted Edwards/Montgomery curves and Short Weierstrass curves, see the Curve section\n// below, as the underlying mappings are those of curves rather than ambient spaces.\n// As a rule, Points in affine (or CurveGroup) coordinates are mapped to Points in affine\n// (resp. CurveGroup) coordinates.\n//\n// Curves\n// ======\n// A curve configuration (Curve) is completely determined by the Field coefficients of its defining\n// equation (a and b in the case of swcurve, a and d in the case of tecurve, and j and k in\n// the case of montcurve) together with a generator (`gen`) in the corresponding coordinate system.\n// For example, the Baby Jubjub curve configuration as defined in ERC-2494 may be instantiated as a Twisted\n// Edwards curve in affine coordinates as follows:\n//\n// `let bjj_affine = tecurve::Curve::new(168700, 168696, tecurve::Point::new(995203441582195749578291179787384436505546430278305826713579947235728471134,5472060717959818805561601436314318772137091100104008585924551046643952123905));`\n//\n// The `contains` method may be used to check whether a Point lies on a given curve:\n//\n// `constrain bjj_affine.contains(tecurve::Point::zero());`\n//\n// The elliptic curve group's addition operation is exposed as the `add` method, e.g.\n//\n// `let p = bjj_affine.add(bjj_affine.gen, bjj_affine.gen);`\n//\n// subtraction as the `subtract` method, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.subtract(bjj_affine.gen, bjj_affine.gen));`\n//\n// scalar multiplication as the `mul` method, where the scalar is assumed to be a Field* element, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.mul(2, tecurve::Point::zero());`\n//\n// There is a scalar multiplication method (`bit_mul`) provided where the scalar input is expected to be\n// an array of bits (little-endian convention), as well as a multi-scalar multiplication method** (`msm`)\n// which takes an array of Field elements and an array of elliptic curve points as arguments, both assumed\n// to be of the same length.\n//\n// Curve configurations may be converted between different coordinate representations by calling the `into_group`\n// and `into_affine` methods on them, e.g.\n//\n// `let bjj_curvegroup = bjj_affine.into_group();`\n//\n// Curve configurations may also be converted between different curve representations by calling the `into_swcurve`,\n// `into_montcurve` and `into_tecurve` methods subject to the relation between the curve representations mentioned\n// above. Note that it is possible to map Points from a Twisted Edwards/Montgomery curve to the corresponding\n// Short Weierstrass representation and back, and the methods to do so are exposed as `map_into_swcurve` and\n// `map_from_swcurve`, which each take one argument, the point to be mapped.\n//\n// Curve maps\n// ==========\n// There are a few different ways of mapping Field elements to elliptic curves. Here we provide the simplified\n// Shallue-van de Woestijne-Ulas and Elligator 2 methods, the former being applicable to all curve types\n// provided above subject to the constraint that the coefficients of the corresponding Short Weierstrass curve satisfies\n// a*b != 0 and the latter being applicable to Montgomery and Twisted Edwards curves subject to the constraint that\n// the coefficients of the corresponding Montgomery curve satisfy j*k != 0 and (j^2 - 4)/k^2 is non-square.\n//\n// The simplified Shallue-van de Woestijne-Ulas method is exposed as the method `swu_map` on the Curve configuration and\n// depends on two parameters, a Field element z != -1 for which g(x) - z is irreducible over Field and g(b/(z*a)) is\n// square, where g(x) = x^3 + a*x + b is the right-hand side of the defining equation of the corresponding Short\n// Weierstrass curve, and a Field element u to be mapped onto the curve. For example, in the case of bjj_affine above,\n// it may be determined using the scripts provided at <https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve> that z = 5.\n//\n// The Elligator 2 method is exposed as the method `elligator2_map` on the Curve configurations of Montgomery and\n// Twisted Edwards curves. Like the simplified SWU method above, it depends on a certain non-square element of Field,\n// but this element need not satisfy any further conditions, so it is included as the (Field-dependent) constant\n//`ZETA` below. Thus, the `elligator2_map` method depends only on one parameter, the Field element to be mapped onto\n// the curve.\n//\n// For details on all of the above in the context of hashing to elliptic curves, see <https://datatracker.ietf.org/doc/id/draft-irtf-cfrg-hash-to-curve-06.html>.\n//\n//\n// *TODO: Replace Field with Bigint.\n// **TODO: Support arrays of structs to make this work.\n// Field-dependent constant ZETA = a non-square element of Field\n// Required for Elligator 2 map\n// TODO: Replace with built-in constant.\nglobal ZETA: Field = 5;\n// Field-dependent constants for Tonelli-Shanks algorithm (see sqrt function below)\n// TODO: Possibly make this built-in.\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n// Higher-order version of scalar multiplication\n// TODO: Make this work so that the submodules' bit_mul may be defined in terms of it.\n//fn bit_mul<T,N>(add: fn(T,T) -> T, e: T, bits: [u1; N], p: T) -> T {\n//    let mut out = e;\n//    let n = bits.len();\n//\n//    for i in 0..n {\n//        out = add(\n//            add(out, out),\n//            if(bits[n - i - 1] == 0) {e} else {p});\n//    }\n//\n//    out\n//}\n// TODO: Make this built-in.\npub fn safe_inverse(x: Field) -> Field {\n    if x == 0 {\n        0\n    } else {\n        1 / x\n    }\n}\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\npub fn is_square(x: Field) -> bool {\n    let v = pow(x, 0 - 1 / 2);\n\n    v * (v - 1) == 0\n}\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\nmod tests {\n    use crate::montcurve::affine::Point as MGaffine;\n    use crate::montcurve::curvegroup::Point as MG;\n    use crate::swcurve::affine::Point as SWGaffine;\n    use crate::swcurve::curvegroup::Point as SWG;\n    use crate::tecurve::affine::Curve as AffineCurve;\n    use crate::tecurve::affine::Point as Gaffine;\n    use crate::tecurve::curvegroup::Point as G;\n\n    #[test]\n    fn smoke_test() {\n        // Tests may be checked against https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/tree/main/poc\n        // Define Baby Jubjub (ERC-2494) parameters in affine representation\n        let bjj_affine = AffineCurve::new(\n            168700,\n            168696,\n            Gaffine::new(\n                995203441582195749578291179787384436505546430278305826713579947235728471134,\n                5472060717959818805561601436314318772137091100104008585924551046643952123905,\n            ),\n        );\n        // Test addition\n        let p1_affine = Gaffine::new(\n            17777552123799933955779906779655732241715742912184938656739573121738514868268,\n            2626589144620713026669568689430873010625803728049924121243784502389097019475,\n        );\n        let p2_affine = Gaffine::new(\n            16540640123574156134436876038791482806971768689494387082833631921987005038935,\n            20819045374670962167435360035096875258406992893633759881276124905556507972311,\n        );\n\n        let p3_affine = bjj_affine.add(p1_affine, p2_affine);\n        assert(p3_affine.eq(Gaffine::new(\n            7916061937171219682591368294088513039687205273691143098332585753343424131937,\n            14035240266687799601661095864649209771790948434046947201833777492504781204499,\n        )));\n        // Test scalar multiplication\n        let p4_affine = bjj_affine.mul(2, p1_affine);\n        assert(p4_affine.eq(Gaffine::new(\n            6890855772600357754907169075114257697580319025794532037257385534741338397365,\n            4338620300185947561074059802482547481416142213883829469920100239455078257889,\n        )));\n        assert(p4_affine.eq(bjj_affine.bit_mul([0, 1], p1_affine)));\n        // Test subtraction\n        let p5_affine = bjj_affine.subtract(p3_affine, p3_affine);\n        assert(p5_affine.eq(Gaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_affine.contains(bjj_affine.gen)\n                & bjj_affine.contains(p1_affine)\n                & bjj_affine.contains(p2_affine)\n                & bjj_affine.contains(p3_affine)\n                & bjj_affine.contains(p4_affine)\n                & bjj_affine.contains(p5_affine),\n        );\n        // Test CurveGroup equivalents\n        let bjj = bjj_affine.into_group(); // Baby Jubjub\n        let p1 = p1_affine.into_group();\n        let p2 = p2_affine.into_group();\n        let p3 = p3_affine.into_group();\n        let p4 = p4_affine.into_group();\n        let p5 = p5_affine.into_group();\n        // Test addition\n        assert(p3.eq(bjj.add(p1, p2)));\n        // Test scalar multiplication\n        assert(p4.eq(bjj.mul(2, p1)));\n        assert(p4.eq(bjj.bit_mul([0, 1], p1)));\n        // Test subtraction\n        assert(G::zero().eq(bjj.subtract(p3, p3)));\n        assert(p5.eq(G::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj.contains(bjj.gen)\n                & bjj.contains(p1)\n                & bjj.contains(p2)\n                & bjj.contains(p3)\n                & bjj.contains(p4)\n                & bjj.contains(p5),\n        );\n        // Test SWCurve equivalents of the above\n        // First the affine representation\n        let bjj_swcurve_affine = bjj_affine.into_swcurve();\n\n        let p1_swcurve_affine = bjj_affine.map_into_swcurve(p1_affine);\n        let p2_swcurve_affine = bjj_affine.map_into_swcurve(p2_affine);\n        let p3_swcurve_affine = bjj_affine.map_into_swcurve(p3_affine);\n        let p4_swcurve_affine = bjj_affine.map_into_swcurve(p4_affine);\n        let p5_swcurve_affine = bjj_affine.map_into_swcurve(p5_affine);\n        // Addition\n        assert(p3_swcurve_affine.eq(bjj_swcurve_affine.add(p1_swcurve_affine, p2_swcurve_affine)));\n        // Doubling\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.mul(2, p1_swcurve_affine)));\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.bit_mul([0, 1], p1_swcurve_affine)));\n        // Subtraction\n        assert(SWGaffine::zero().eq(bjj_swcurve_affine.subtract(\n            p3_swcurve_affine,\n            p3_swcurve_affine,\n        )));\n        assert(p5_swcurve_affine.eq(SWGaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_swcurve_affine.contains(bjj_swcurve_affine.gen)\n                & bjj_swcurve_affine.contains(p1_swcurve_affine)\n                & bjj_swcurve_affine.contains(p2_swcurve_affine)\n                & bjj_swcurve_affine.contains(p3_swcurve_affine)\n                & bjj_swcurve_affine.contains(p4_swcurve_affine)\n                & bjj_swcurve_affine.contains(p5_swcurve_affine),\n        );\n        // Then the CurveGroup representation\n        let bjj_swcurve = bjj.into_swcurve();\n\n        let p1_swcurve = bjj.map_into_swcurve(p1);\n        let p2_swcurve = bjj.map_into_swcurve(p2);\n        let p3_swcurve = bjj.map_into_swcurve(p3);\n        let p4_swcurve = bjj.map_into_swcurve(p4);\n        let p5_swcurve = bjj.map_into_swcurve(p5);\n        // Addition\n        assert(p3_swcurve.eq(bjj_swcurve.add(p1_swcurve, p2_swcurve)));\n        // Doubling\n        assert(p4_swcurve.eq(bjj_swcurve.mul(2, p1_swcurve)));\n        assert(p4_swcurve.eq(bjj_swcurve.bit_mul([0, 1], p1_swcurve)));\n        // Subtraction\n        assert(SWG::zero().eq(bjj_swcurve.subtract(p3_swcurve, p3_swcurve)));\n        assert(p5_swcurve.eq(SWG::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_swcurve.contains(bjj_swcurve.gen)\n                & bjj_swcurve.contains(p1_swcurve)\n                & bjj_swcurve.contains(p2_swcurve)\n                & bjj_swcurve.contains(p3_swcurve)\n                & bjj_swcurve.contains(p4_swcurve)\n                & bjj_swcurve.contains(p5_swcurve),\n        );\n        // Test MontCurve conversions\n        // First the affine representation\n        let bjj_montcurve_affine = bjj_affine.into_montcurve();\n\n        let p1_montcurve_affine = p1_affine.into_montcurve();\n        let p2_montcurve_affine = p2_affine.into_montcurve();\n        let p3_montcurve_affine = p3_affine.into_montcurve();\n        let p4_montcurve_affine = p4_affine.into_montcurve();\n        let p5_montcurve_affine = p5_affine.into_montcurve();\n        // Addition\n        assert(p3_montcurve_affine.eq(bjj_montcurve_affine.add(\n            p1_montcurve_affine,\n            p2_montcurve_affine,\n        )));\n        // Doubling\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.mul(2, p1_montcurve_affine)));\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.bit_mul([0, 1], p1_montcurve_affine)));\n        // Subtraction\n        assert(MGaffine::zero().eq(bjj_montcurve_affine.subtract(\n            p3_montcurve_affine,\n            p3_montcurve_affine,\n        )));\n        assert(p5_montcurve_affine.eq(MGaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_montcurve_affine.contains(bjj_montcurve_affine.gen)\n                & bjj_montcurve_affine.contains(p1_montcurve_affine)\n                & bjj_montcurve_affine.contains(p2_montcurve_affine)\n                & bjj_montcurve_affine.contains(p3_montcurve_affine)\n                & bjj_montcurve_affine.contains(p4_montcurve_affine)\n                & bjj_montcurve_affine.contains(p5_montcurve_affine),\n        );\n        // Then the CurveGroup representation\n        let bjj_montcurve = bjj.into_montcurve();\n\n        let p1_montcurve = p1_montcurve_affine.into_group();\n        let p2_montcurve = p2_montcurve_affine.into_group();\n        let p3_montcurve = p3_montcurve_affine.into_group();\n        let p4_montcurve = p4_montcurve_affine.into_group();\n        let p5_montcurve = p5_montcurve_affine.into_group();\n        // Addition\n        assert(p3_montcurve.eq(bjj_montcurve.add(p1_montcurve, p2_montcurve)));\n        // Doubling\n        assert(p4_montcurve.eq(bjj_montcurve.mul(2, p1_montcurve)));\n        assert(p4_montcurve.eq(bjj_montcurve.bit_mul([0, 1], p1_montcurve)));\n        // Subtraction\n        assert(MG::zero().eq(bjj_montcurve.subtract(p3_montcurve, p3_montcurve)));\n        assert(p5_montcurve.eq(MG::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_montcurve.contains(bjj_montcurve.gen)\n                & bjj_montcurve.contains(p1_montcurve)\n                & bjj_montcurve.contains(p2_montcurve)\n                & bjj_montcurve.contains(p3_montcurve)\n                & bjj_montcurve.contains(p4_montcurve)\n                & bjj_montcurve.contains(p5_montcurve),\n        );\n        // Elligator 2 map-to-curve\n        let ell2_pt_map = bjj_affine.elligator2_map(27);\n\n        assert(ell2_pt_map.eq(MGaffine::new(\n            7972459279704486422145701269802978968072470631857513331988813812334797879121,\n            8142420778878030219043334189293412482212146646099536952861607542822144507872,\n        )\n            .into_tecurve()));\n        // SWU map-to-curve\n        let swu_pt_map = bjj_affine.swu_map(5, 27);\n\n        assert(swu_pt_map.eq(bjj_affine.map_from_swcurve(SWGaffine::new(\n            2162719247815120009132293839392097468339661471129795280520343931405114293888,\n            5341392251743377373758788728206293080122949448990104760111875914082289313973,\n        ))));\n    }\n\n}\n","path":"/Users/saimeunt/nargo/github.com/noir-lang/ec/v0.1.2/src/lib.nr"},"361":{"source":"use dep::aztec::protocol_types::{\n    traits::{Deserialize, Packable, Serialize},\n    utils::field::field_from_bytes,\n};\nuse std::meta::derive;\n\n// A Fixedsize Compressed String.\n// Essentially a special version of Compressed String for practical use.\n#[derive(Deserialize, Eq, Packable, Serialize)]\npub struct FieldCompressedString {\n    value: Field,\n}\n\nimpl FieldCompressedString {\n    pub fn is_eq(self, other: FieldCompressedString) -> bool {\n        self.value == other.value\n    }\n\n    pub fn from_field(input_field: Field) -> Self {\n        Self { value: input_field }\n    }\n\n    pub fn from_string(input_string: str<31>) -> Self {\n        Self { value: field_from_bytes(input_string.as_bytes(), true) }\n    }\n\n    pub fn to_bytes(self) -> [u8; 31] {\n        self.value.to_be_bytes()\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/compressed-string/src/field_compressed_string.nr"},"363":{"source":"// docs:start:token_all\n// docs:start:imports\nmod types;\nmod test;\n\nuse dep::aztec::macros::aztec;\n\n// Minimal token implementation that supports `AuthWit` accounts.\n// The auth message follows a similar pattern to the cross-chain message and includes a designated caller.\n// The designated caller is ALWAYS used here, and not based on a flag as cross-chain.\n// message hash = H([caller, contract, selector, ...args])\n// To be read as `caller` calls function at `contract` defined by `selector` with `args`\n// Including a nonce in the message hash ensures that the message can only be used once.\n#[aztec]\npub contract Token {\n    // Libs\n    use std::meta::derive;\n\n    use dep::compressed_string::FieldCompressedString;\n\n    use dep::aztec::{\n        context::{PrivateCallInterface, PrivateContext},\n        encrypted_logs::log_assembly_strategies::default_aes128::{\n            event::encode_and_encrypt_event_unconstrained,\n            note::{encode_and_encrypt_note, encode_and_encrypt_note_unconstrained},\n        },\n        macros::{\n            events::event,\n            functions::{initializer, internal, private, public, view},\n            storage::storage,\n        },\n        oracle::random::random,\n        prelude::{\n            AztecAddress, FunctionSelector, Map, PublicContext, PublicImmutable, PublicMutable,\n        },\n        protocol_types::{point::Point, traits::Serialize},\n    };\n\n    use dep::uint_note::uint_note::UintNote;\n\n    // docs:start:import_authwit\n    use dep::authwit::auth::{\n        assert_current_call_valid_authwit, assert_current_call_valid_authwit_public,\n        compute_authwit_nullifier,\n    };\n    // docs:end:import_authwit\n\n    use crate::types::balance_set::BalanceSet;\n\n    // docs:end::imports\n\n    // In the first transfer iteration we are computing a lot of additional information (validating inputs, retrieving\n    // keys, etc.), so the gate count is already relatively high. We therefore only read a few notes to keep the happy\n    // case with few constraints.\n    global INITIAL_TRANSFER_CALL_MAX_NOTES: u32 = 2;\n    // All the recursive call does is nullify notes, meaning the gate count is low, but it is all constant overhead. We\n    // therefore read more notes than in the base case to increase the efficiency of the overhead, since this results in\n    // an overall small circuit regardless.\n    global RECURSIVE_TRANSFER_CALL_MAX_NOTES: u32 = 8;\n\n    #[derive(Serialize)]\n    #[event]\n    struct Transfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: U128,\n    }\n\n    // docs:start:storage_struct\n    #[storage]\n    struct Storage<Context> {\n        // docs:start:storage_admin\n        admin: PublicMutable<AztecAddress, Context>,\n        // docs:end:storage_admin\n        // docs:start:storage_minters\n        minters: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n        // docs:end:storage_minters\n        // docs:start:storage_balances\n        balances: Map<AztecAddress, BalanceSet<Context>, Context>,\n        // docs:end:storage_balances\n        total_supply: PublicMutable<U128, Context>,\n        public_balances: Map<AztecAddress, PublicMutable<U128, Context>, Context>,\n        symbol: PublicImmutable<FieldCompressedString, Context>,\n        name: PublicImmutable<FieldCompressedString, Context>,\n        // docs:start:storage_decimals\n        decimals: PublicImmutable<u8, Context>,\n        // docs:end:storage_decimals\n    }\n    // docs:end:storage_struct\n\n    // docs:start:constructor\n    #[public]\n    #[initializer]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>, decimals: u8) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.minters.at(admin).write(true);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n        // docs:start:initialize_decimals\n        storage.decimals.initialize(decimals);\n        // docs:end:initialize_decimals\n    }\n    // docs:end:constructor\n\n    // docs:start:set_admin\n    #[public]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:start:write_admin\n        storage.admin.write(new_admin);\n        // docs:end:write_admin\n    }\n    // docs:end:set_admin\n\n    #[public]\n    #[view]\n    fn public_get_name() -> FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_name() -> FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_decimals() -> pub u8 {\n        storage.decimals.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_decimals() -> pub u8 {\n        storage.decimals.read()\n    }\n\n    // docs:start:admin\n    #[public]\n    #[view]\n    fn get_admin() -> Field {\n        storage.admin.read().to_field()\n    }\n    // docs:end:admin\n\n    // docs:start:is_minter\n    #[public]\n    #[view]\n    fn is_minter(minter: AztecAddress) -> bool {\n        storage.minters.at(minter).read()\n    }\n    // docs:end:is_minter\n\n    // docs:start:total_supply\n    #[public]\n    #[view]\n    fn total_supply() -> U128 {\n        storage.total_supply.read()\n    }\n    // docs:end:total_supply\n\n    // docs:start:balance_of_public\n    #[public]\n    #[view]\n    fn balance_of_public(owner: AztecAddress) -> U128 {\n        storage.public_balances.at(owner).read()\n    }\n    // docs:end:balance_of_public\n\n    // docs:start:set_minter\n    #[public]\n    fn set_minter(minter: AztecAddress, approve: bool) {\n        // docs:start:read_admin\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:end:read_admin\n        // docs:start:write_minter\n        storage.minters.at(minter).write(approve);\n        // docs:end:write_minter\n    }\n    // docs:end:set_minter\n\n    // docs:start:mint_to_public\n    #[public]\n    fn mint_to_public(to: AztecAddress, amount: U128) {\n        // docs:start:read_minter\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        // docs:end:read_minter\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        let supply = storage.total_supply.read().add(amount);\n        storage.public_balances.at(to).write(new_balance);\n        storage.total_supply.write(supply);\n    }\n    // docs:end:mint_to_public\n\n    // docs:start:transfer_in_public\n    #[public]\n    fn transfer_in_public(from: AztecAddress, to: AztecAddress, amount: U128, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n        let to_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(to_balance);\n    }\n    // docs:end:transfer_in_public\n\n    // docs:start:burn_public\n    #[public]\n    fn burn_public(from: AztecAddress, amount: U128, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit_public\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit_public\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:burn_public\n\n    // docs:start:transfer_to_public\n    #[private]\n    fn transfer_to_public(from: AztecAddress, to: AztecAddress, amount: U128, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        storage.balances.at(from).sub(from, amount).emit(encode_and_encrypt_note(\n            &mut context,\n            from,\n            from,\n        ));\n        Token::at(context.this_address())._increase_public_balance(to, amount).enqueue(&mut context);\n    }\n    // docs:end:transfer_to_public\n\n    // docs:start:transfer\n    #[private]\n    fn transfer(to: AztecAddress, amount: U128) {\n        let from = context.msg_sender();\n\n        // We reduce `from`'s balance by amount by recursively removing notes over potentially multiple calls. This\n        // method keeps the gate count for each individual call low - reading too many notes at once could result in\n        // circuits in which proving is not feasible.\n        // Since the sum of the amounts in the notes we nullified was potentially larger than amount, we create a new\n        // note for `from` with the change amount, e.g. if `amount` is 10 and two notes are nullified with amounts 8 and\n        // 5, then the change will be 3 (since 8 + 5 - 10 = 3).\n        let change = subtract_balance(\n            &mut context,\n            storage,\n            from,\n            amount,\n            INITIAL_TRANSFER_CALL_MAX_NOTES,\n        );\n        storage.balances.at(from).add(from, change).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            from,\n            from,\n        ));\n        storage.balances.at(to).add(to, amount).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            to,\n            from,\n        ));\n        // We don't constrain encryption of the note log in `transfer` (unlike in `transfer_in_private`) because the transfer\n        // function is only designed to be used in situations where the event is not strictly necessary (e.g. payment to\n        // another person where the payment is considered to be successful when the other party successfully decrypts a\n        // note).\n        Transfer { from, to, amount }.emit(encode_and_encrypt_event_unconstrained(\n            &mut context,\n            to,\n            from,\n        ));\n    }\n    // docs:end:transfer\n\n    #[contract_library_method]\n    fn subtract_balance(\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n        account: AztecAddress,\n        amount: U128,\n        max_notes: u32,\n    ) -> U128 {\n        let subtracted = storage.balances.at(account).try_sub(amount, max_notes);\n        // Failing to subtract any amount means that the owner was unable to produce more notes that could be nullified.\n        // We could in some cases fail early inside try_sub if we detected that fewer notes than the maximum were\n        // returned and we were still unable to reach the target amount, but that'd make the code more complicated, and\n        // optimizing for the failure scenario is not as important.\n        assert(subtracted > U128::zero(), \"Balance too low\");\n        if subtracted >= amount {\n            // We have achieved our goal of nullifying notes that add up to more than amount, so we return the change\n            subtracted - amount\n        } else {\n            // try_sub failed to nullify enough notes to reach the target amount, so we compute the amount remaining\n            // and try again.\n            let remaining = amount - subtracted;\n            compute_recurse_subtract_balance_call(*context, account, remaining).call(context)\n        }\n    }\n\n    // TODO(#7729): apply no_predicates to the contract interface method directly instead of having to use a wrapper\n    // like we do here.\n    #[no_predicates]\n    #[contract_library_method]\n    fn compute_recurse_subtract_balance_call(\n        context: PrivateContext,\n        account: AztecAddress,\n        remaining: U128,\n    ) -> PrivateCallInterface<25, U128> {\n        Token::at(context.this_address())._recurse_subtract_balance(account, remaining)\n    }\n\n    #[internal]\n    #[private]\n    fn _recurse_subtract_balance(account: AztecAddress, amount: U128) -> U128 {\n        subtract_balance(\n            &mut context,\n            storage,\n            account,\n            amount,\n            RECURSIVE_TRANSFER_CALL_MAX_NOTES,\n        )\n    }\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    // docs:start:cancel_authwit\n    #[private]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n    // docs:end:cancel_authwit\n\n    // docs:start:transfer_in_private\n    #[private]\n    fn transfer_in_private(from: AztecAddress, to: AztecAddress, amount: U128, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit\n\n        // docs:start:increase_private_balance\n        // docs:start:encrypted\n        storage.balances.at(from).sub(from, amount).emit(encode_and_encrypt_note(\n            &mut context,\n            from,\n            from,\n        ));\n        // docs:end:encrypted\n        // docs:end:increase_private_balance\n        storage.balances.at(to).add(to, amount).emit(encode_and_encrypt_note(&mut context, to, from));\n    }\n    // docs:end:transfer_in_private\n\n    // docs:start:burn_private\n    #[private]\n    fn burn_private(from: AztecAddress, amount: U128, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        storage.balances.at(from).sub(from, amount).emit(encode_and_encrypt_note(\n            &mut context,\n            from,\n            from,\n        ));\n        Token::at(context.this_address())._reduce_total_supply(amount).enqueue(&mut context);\n    }\n    // docs:end:burn_private\n\n    // docs:start:transfer_to_private\n    // Transfers token `amount` from public balance of message sender to a private balance of `to`.\n    #[private]\n    fn transfer_to_private(to: AztecAddress, amount: U128) {\n        // `from` is the owner of the public balance from which we'll subtract the `amount`.\n        let from = context.msg_sender();\n        let token = Token::at(context.this_address());\n\n        // We prepare the private balance increase (the partial note).\n        let hiding_point_slot = _prepare_private_balance_increase(from, to, &mut context, storage);\n\n        // At last we finalize the transfer. Usage of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that he can transfer only his own tokens.\n        token._finalize_transfer_to_private_unsafe(from, amount, hiding_point_slot).enqueue(\n            &mut context,\n        );\n    }\n    // docs:end:transfer_to_private\n\n    // docs:start:prepare_private_balance_increase\n    /// Prepares an increase of private balance of `to` (partial note). The increase needs to be finalized by calling\n    /// some of the finalization functions (`finalize_transfer_to_private`, `finalize_mint_to_private`).\n    /// Returns a hiding point slot.\n    #[private]\n    fn prepare_private_balance_increase(to: AztecAddress, from: AztecAddress) -> Field {\n        // TODO(#9887): ideally we'd not have `from` here, but we do need a `from` address to produce a tagging secret\n        // with `to`.\n        _prepare_private_balance_increase(from, to, &mut context, storage)\n    }\n    // docs:end:prepare_private_balance_increase\n\n    /// This function exists separately from `prepare_private_balance_increase` solely as an optimization as it allows\n    /// us to have it inlined in the `transfer_to_private` function which results in one less kernel iteration.\n    ///\n    /// TODO(#9180): Consider adding macro support for functions callable both as an entrypoint and as an internal\n    /// function.\n    #[contract_library_method]\n    fn _prepare_private_balance_increase(\n        from: AztecAddress, // sender of the tag: TODO(#9887): this is not great?\n        to: AztecAddress,\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) -> Field {\n        let to_note_slot = storage.balances.at(to).set.storage_slot;\n\n        // We create a setup payload with unpopulated/zero `amount` for 'to'\n        // TODO(#7775): Manually fetching the randomness here is not great. If we decide to include randomness in all\n        // notes we could just inject it in macros.\n\n        /// Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        /// so a malicious sender could use non-random values to make the note less private. But they already know\n        /// the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        /// information. We can therefore assume that the sender will cooperate in the random value generation.\n        let note_randomness = unsafe { random() };\n        let note_setup_payload = UintNote::setup_payload().new(to, note_randomness, to_note_slot);\n\n        // We get the keys and encrypt the log of the note\n        let setup_log = note_setup_payload.encrypt_log(context, to, from);\n\n        // Using the x-coordinate as a hiding point slot is safe against someone else interfering with it because\n        // we have a guarantee that the public functions of the transaction are executed right after the private ones\n        // and for this reason the protocol guarantees that nobody can front-run us in consuming the hiding point.\n        // This guarantee would break if `finalize_transfer_to_private` was not called in the same transaction. This\n        // however is not the flow we are currently concerned with. To support the multi-transaction flow we could\n        // introduce a `from` function argument, hash the x-coordinate with it and then repeat the hashing in\n        // `finalize_transfer_to_private`.\n        //\n        // We can also be sure that the `hiding_point_slot` will not overwrite any other value in the storage because\n        // in our state variables we derive slots using a different hash function from multi scalar multiplication\n        // (MSM).\n        let hiding_point_slot = note_setup_payload.hiding_point.x;\n\n        // We don't need to perform a check that the value overwritten by `_store_point_in_transient_storage_unsafe`\n        // is zero because the slot is the x-coordinate of the hiding point and hence we could only overwrite\n        // the value in the slot with the same value. This makes usage of the `unsafe` method safe.\n        Token::at(context.this_address())\n            ._store_payload_in_transient_storage_unsafe(\n                hiding_point_slot,\n                note_setup_payload.hiding_point,\n                setup_log,\n            )\n            .enqueue(context);\n\n        hiding_point_slot\n    }\n\n    // docs:start:finalize_transfer_to_private\n    /// Finalizes a transfer of token `amount` from public balance of `from` to a private balance of `to`.\n    /// The transfer must be prepared by calling `prepare_private_balance_increase` first and the resulting\n    /// `hiding_point_slot` must be passed as an argument to this function.\n    #[public]\n    fn finalize_transfer_to_private(amount: U128, hiding_point_slot: Field) {\n        let from = context.msg_sender();\n        _finalize_transfer_to_private(from, amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_transfer_to_private\n\n    // docs:start:finalize_transfer_to_private_unsafe\n    /// This is a wrapper around `_finalize_transfer_to_private` placed here so that a call\n    /// to `_finalize_transfer_to_private` can be enqueued. Called unsafe as it does not check `from` (this has to be\n    /// done in the calling function).\n    #[public]\n    #[internal]\n    fn _finalize_transfer_to_private_unsafe(\n        from: AztecAddress,\n        amount: U128,\n        hiding_point_slot: Field,\n    ) {\n        _finalize_transfer_to_private(from, amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_transfer_to_private_unsafe\n\n    #[contract_library_method]\n    fn _finalize_transfer_to_private(\n        from: AztecAddress,\n        amount: U128,\n        hiding_point_slot: Field,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        // First we subtract the `amount` from the public balance of `from`\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        // Then we finalize the partial note with the `amount`\n        let finalization_payload =\n            UintNote::finalization_payload().new(context, hiding_point_slot, amount);\n\n        // At last we emit the note hash and the final log\n        finalization_payload.emit();\n    }\n\n    // docs:start:mint_to_private\n    /// Mints token `amount` to a private balance of `to`. Message sender has to have minter permissions (checked\n    /// in the enqueued call).\n    #[private]\n    fn mint_to_private(\n        from: AztecAddress, // sender of the tag: TODO(#9887): this is not great?\n        to: AztecAddress,\n        amount: U128,\n    ) {\n        let token = Token::at(context.this_address());\n\n        // We prepare the partial note to which we'll \"send\" the minted amount.\n        let hiding_point_slot = _prepare_private_balance_increase(from, to, &mut context, storage);\n\n        // At last we finalize the mint. Usage of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that only a message sender with minter permissions\n        // can successfully execute the function.\n        token\n            ._finalize_mint_to_private_unsafe(context.msg_sender(), amount, hiding_point_slot)\n            .enqueue(&mut context);\n    }\n    // docs:end:mint_to_private\n\n    // docs:start:finalize_mint_to_private\n    /// Finalizes a mint of token `amount` to a private balance of `to`. The mint must be prepared by calling\n    /// `prepare_private_balance_increase` first and the resulting\n    /// `hiding_point_slot` must be passed as an argument to this function.\n    ///\n    /// Note: This function is only an optimization as it could be replaced by a combination of `mint_to_public`\n    /// and `finalize_transfer_to_private`. It is however used very commonly so it makes sense to optimize it\n    /// (e.g. used during token bridging, in AMM liquidity token etc.).\n    #[public]\n    fn finalize_mint_to_private(amount: U128, hiding_point_slot: Field) {\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n\n        _finalize_mint_to_private(amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_mint_to_private\n\n    // docs:start:finalize_mint_to_private_unsafe\n    #[public]\n    #[internal]\n    fn _finalize_mint_to_private_unsafe(\n        from: AztecAddress,\n        amount: U128,\n        hiding_point_slot: Field,\n    ) {\n        // We check the minter permissions as it was not done in `mint_to_private` function.\n        assert(storage.minters.at(from).read(), \"caller is not minter\");\n        _finalize_mint_to_private(amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_mint_to_private_unsafe\n\n    #[contract_library_method]\n    fn _finalize_mint_to_private(\n        amount: U128,\n        hiding_point_slot: Field,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        // First we increase the total supply by the `amount`\n        let supply = storage.total_supply.read().add(amount);\n        storage.total_supply.write(supply);\n\n        // Then we finalize the partial note with the `amount`\n        let finalization_payload =\n            UintNote::finalization_payload().new(context, hiding_point_slot, amount);\n\n        // At last we emit the note hash and the final log\n        finalization_payload.emit();\n    }\n\n    // TODO(#9375): Having to define the note log length here is very unfortunate as it's basically impossible for\n    // users to derive manually. This will however go away once we have a real transient storage since we will not need\n    // the public call and instead we would do something like `context.transient_storage_write(slot, payload)` and that\n    // will allow us to use generics and hence user will not need to define it explicitly. We cannot use generics here\n    // as it is an entrypoint function.\n    #[public]\n    #[internal]\n    fn _store_payload_in_transient_storage_unsafe(\n        slot: Field,\n        point: Point,\n        setup_log: [Field; 9],\n    ) {\n        context.storage_write(slot, point);\n        context.storage_write(slot + aztec::protocol_types::point::POINT_LENGTH as Field, setup_log);\n    }\n\n    /// Internal ///\n    // docs:start:increase_public_balance\n    /// TODO(#9180): Consider adding macro support for functions callable both as an entrypoint and as an internal\n    /// function.\n    #[public]\n    #[internal]\n    fn _increase_public_balance(to: AztecAddress, amount: U128) {\n        _increase_public_balance_inner(to, amount, storage);\n    }\n    // docs:end:increase_public_balance\n\n    #[contract_library_method]\n    fn _increase_public_balance_inner(\n        to: AztecAddress,\n        amount: U128,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(new_balance);\n    }\n\n    // docs:start:reduce_total_supply\n    #[public]\n    #[internal]\n    fn _reduce_total_supply(amount: U128) {\n        // Only to be called from burn.\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:reduce_total_supply\n\n    /// Unconstrained ///\n    // docs:start:balance_of_private\n    pub(crate) unconstrained fn balance_of_private(owner: AztecAddress) -> pub U128 {\n        storage.balances.at(owner).balance_of()\n    }\n    // docs:end:balance_of_private\n}\n\n// docs:end:token_all\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-contracts/contracts/token_contract/src/main.nr"},"379":{"source":"use dep::aztec::{\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::partial_note,\n    note::utils::compute_note_hash_for_nullify,\n    oracle::random::random,\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{\n        address::AztecAddress,\n        constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator,\n        traits::{Packable, Serialize},\n    },\n};\n\n// docs:start:UintNote\n#[partial_note(quote {value})]\n#[derive(Serialize)]\npub struct UintNote {\n    // The amount of tokens in the note\n    value: U128,\n    owner: AztecAddress,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:UintNote\n\nimpl NullifiableNote for UintNote {\n    // docs:start:nullifier\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self, storage_slot: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self, storage_slot);\n        let owner_npk_m_hash = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl Eq for UintNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: U128, owner: AztecAddress) -> Self {\n        /// Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        /// so a malicious sender could use non-random values to make the note less private. But they already know\n        /// the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        /// information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_value(self) -> U128 {\n        self.value\n    }\n}\n","path":"/Users/saimeunt/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/uint-note/src/uint_note.nr"}}}